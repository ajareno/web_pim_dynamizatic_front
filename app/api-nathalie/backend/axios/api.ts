/* tslint:disable */
/* eslint-disable */
/**
 * Bbddmysql application
 * Proyecto API encargado de ser la parte Backend de la aplicaci√≥n web Bbddmysql
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ajareno@dynamizatic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Archivo
 */
export interface Archivo {
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'tipoArchivoId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'tabla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'idTabla'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'pantalla'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface ArchivoFilter
 */
export interface ArchivoFilter {
    /**
     * 
     * @type {number}
     * @memberof ArchivoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ArchivoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ArchivoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ArchivoFilter1
 */
export interface ArchivoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ArchivoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ArchivoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ArchivoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ArchivoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Archivo>, schemaOptions: { partial: true })
 * @export
 * @interface ArchivoPartial
 */
export interface ArchivoPartial {
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'tipoArchivoId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'tabla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'idTabla'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'pantalla'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: ArchivoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ArchivoWithRelations
 */
export interface ArchivoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'tipoArchivoId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'tabla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'idTabla'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'pantalla'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Atributo
 */
export interface Atributo {
    /**
     * 
     * @type {number}
     * @memberof Atributo
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Atributo
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof Atributo
     */
    'grupoAtributoId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Atributo
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof Atributo
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Atributo
     */
    'tipoDato': string;
    /**
     * 
     * @type {string}
     * @memberof Atributo
     */
    'unidadMedida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Atributo
     */
    'obligatorioSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Atributo
     */
    'multivalorSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Atributo
     */
    'valoresPermitidos'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Atributo
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Atributo
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Atributo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Atributo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Atributo
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Atributo
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface AtributoFilter
 */
export interface AtributoFilter {
    /**
     * 
     * @type {number}
     * @memberof AtributoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof AtributoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof AtributoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof AtributoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof AtributoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface AtributoFilter1
 */
export interface AtributoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof AtributoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof AtributoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof AtributoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof AtributoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof AtributoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof AtributoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Atributo>, schemaOptions: { partial: true })
 * @export
 * @interface AtributoPartial
 */
export interface AtributoPartial {
    /**
     * 
     * @type {number}
     * @memberof AtributoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof AtributoPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AtributoPartial
     */
    'grupoAtributoId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof AtributoPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributoPartial
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AtributoPartial
     */
    'tipoDato'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributoPartial
     */
    'unidadMedida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AtributoPartial
     */
    'obligatorioSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AtributoPartial
     */
    'multivalorSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AtributoPartial
     */
    'valoresPermitidos'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AtributoPartial
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof AtributoPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AtributoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AtributoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AtributoPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof AtributoPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: AtributoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface AtributoWithRelations
 */
export interface AtributoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof AtributoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof AtributoWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof AtributoWithRelations
     */
    'grupoAtributoId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof AtributoWithRelations
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof AtributoWithRelations
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AtributoWithRelations
     */
    'tipoDato': string;
    /**
     * 
     * @type {string}
     * @memberof AtributoWithRelations
     */
    'unidadMedida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AtributoWithRelations
     */
    'obligatorioSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AtributoWithRelations
     */
    'multivalorSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AtributoWithRelations
     */
    'valoresPermitidos'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AtributoWithRelations
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof AtributoWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AtributoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AtributoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AtributoWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof AtributoWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Auditoria
 */
export interface Auditoria {
    /**
     * 
     * @type {number}
     * @memberof Auditoria
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Auditoria
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof Auditoria
     */
    'tablaAfectada': string;
    /**
     * 
     * @type {number}
     * @memberof Auditoria
     */
    'idRegistro': number;
    /**
     * 
     * @type {string}
     * @memberof Auditoria
     */
    'accion': string;
    /**
     * 
     * @type {number}
     * @memberof Auditoria
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof Auditoria
     */
    'ipAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Auditoria
     */
    'userAgent'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Auditoria
     */
    'valoresAnteriores'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Auditoria
     */
    'valoresNuevos'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Auditoria
     */
    'fechaAccion'?: string | null;
}
/**
 * 
 * @export
 * @interface AuditoriaFilter
 */
export interface AuditoriaFilter {
    /**
     * 
     * @type {number}
     * @memberof AuditoriaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuditoriaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuditoriaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof AuditoriaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof AuditoriaFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface AuditoriaFilter1
 */
export interface AuditoriaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof AuditoriaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuditoriaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuditoriaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof AuditoriaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof AuditoriaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof AuditoriaFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Auditoria>, schemaOptions: { partial: true })
 * @export
 * @interface AuditoriaPartial
 */
export interface AuditoriaPartial {
    /**
     * 
     * @type {number}
     * @memberof AuditoriaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuditoriaPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuditoriaPartial
     */
    'tablaAfectada'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuditoriaPartial
     */
    'idRegistro'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuditoriaPartial
     */
    'accion'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuditoriaPartial
     */
    'usuarioId'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuditoriaPartial
     */
    'ipAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuditoriaPartial
     */
    'userAgent'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuditoriaPartial
     */
    'valoresAnteriores'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuditoriaPartial
     */
    'valoresNuevos'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuditoriaPartial
     */
    'fechaAccion'?: string | null;
}
/**
 * (tsType: AuditoriaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface AuditoriaWithRelations
 */
export interface AuditoriaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof AuditoriaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuditoriaWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof AuditoriaWithRelations
     */
    'tablaAfectada': string;
    /**
     * 
     * @type {number}
     * @memberof AuditoriaWithRelations
     */
    'idRegistro': number;
    /**
     * 
     * @type {string}
     * @memberof AuditoriaWithRelations
     */
    'accion': string;
    /**
     * 
     * @type {number}
     * @memberof AuditoriaWithRelations
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof AuditoriaWithRelations
     */
    'ipAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuditoriaWithRelations
     */
    'userAgent'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuditoriaWithRelations
     */
    'valoresAnteriores'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuditoriaWithRelations
     */
    'valoresNuevos'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuditoriaWithRelations
     */
    'fechaAccion'?: string | null;
}
/**
 * 
 * @export
 * @interface CalendariosDisponibilidad
 */
export interface CalendariosDisponibilidad {
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidad
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidad
     */
    'usuarioId': number;
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidad
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof CalendariosDisponibilidad
     */
    'dia'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CalendariosDisponibilidad
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CalendariosDisponibilidad
     */
    'observaciones'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CalendariosDisponibilidad
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CalendariosDisponibilidad
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidad
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidad
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface CalendariosDisponibilidadFilter
 */
export interface CalendariosDisponibilidadFilter {
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidadFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidadFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidadFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof CalendariosDisponibilidadFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof CalendariosDisponibilidadFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface CalendariosDisponibilidadFilter1
 */
export interface CalendariosDisponibilidadFilter1 {
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidadFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidadFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidadFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof CalendariosDisponibilidadFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof CalendariosDisponibilidadFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof CalendariosDisponibilidadFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<CalendariosDisponibilidad>, schemaOptions: { partial: true })
 * @export
 * @interface CalendariosDisponibilidadPartial
 */
export interface CalendariosDisponibilidadPartial {
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidadPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidadPartial
     */
    'usuarioId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidadPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CalendariosDisponibilidadPartial
     */
    'dia'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CalendariosDisponibilidadPartial
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CalendariosDisponibilidadPartial
     */
    'observaciones'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CalendariosDisponibilidadPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CalendariosDisponibilidadPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidadPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidadPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: CalendariosDisponibilidadWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface CalendariosDisponibilidadWithRelations
 */
export interface CalendariosDisponibilidadWithRelations {
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidadWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidadWithRelations
     */
    'usuarioId': number;
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidadWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof CalendariosDisponibilidadWithRelations
     */
    'dia'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CalendariosDisponibilidadWithRelations
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CalendariosDisponibilidadWithRelations
     */
    'observaciones'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CalendariosDisponibilidadWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CalendariosDisponibilidadWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidadWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof CalendariosDisponibilidadWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface CampoDinamico
 */
export interface CampoDinamico {
    /**
     * 
     * @type {number}
     * @memberof CampoDinamico
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CampoDinamico
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamico
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamico
     */
    'etiqueta': string;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamico
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamico
     */
    'tipoCampo': string;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamico
     */
    'opciones'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamico
     */
    'obligatorioSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamico
     */
    'grupo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CampoDinamico
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamico
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamico
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamico
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CampoDinamico
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof CampoDinamico
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface CampoDinamicoFilter
 */
export interface CampoDinamicoFilter {
    /**
     * 
     * @type {number}
     * @memberof CampoDinamicoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof CampoDinamicoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof CampoDinamicoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof CampoDinamicoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof CampoDinamicoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface CampoDinamicoFilter1
 */
export interface CampoDinamicoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof CampoDinamicoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof CampoDinamicoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof CampoDinamicoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof CampoDinamicoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof CampoDinamicoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof CampoDinamicoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<CampoDinamico>, schemaOptions: { partial: true })
 * @export
 * @interface CampoDinamicoPartial
 */
export interface CampoDinamicoPartial {
    /**
     * 
     * @type {number}
     * @memberof CampoDinamicoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CampoDinamicoPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoPartial
     */
    'etiqueta'?: string;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoPartial
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoPartial
     */
    'tipoCampo'?: string;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoPartial
     */
    'opciones'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoPartial
     */
    'obligatorioSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoPartial
     */
    'grupo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CampoDinamicoPartial
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CampoDinamicoPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof CampoDinamicoPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: CampoDinamicoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface CampoDinamicoWithRelations
 */
export interface CampoDinamicoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof CampoDinamicoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CampoDinamicoWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoWithRelations
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoWithRelations
     */
    'etiqueta': string;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoWithRelations
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoWithRelations
     */
    'tipoCampo': string;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoWithRelations
     */
    'opciones'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoWithRelations
     */
    'obligatorioSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoWithRelations
     */
    'grupo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CampoDinamicoWithRelations
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampoDinamicoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CampoDinamicoWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof CampoDinamicoWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Catalogo
 */
export interface Catalogo {
    /**
     * 
     * @type {number}
     * @memberof Catalogo
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Catalogo
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof Catalogo
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof Catalogo
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Catalogo
     */
    'tipo': string;
    /**
     * 
     * @type {string}
     * @memberof Catalogo
     */
    'estado': string;
    /**
     * 
     * @type {string}
     * @memberof Catalogo
     */
    'fechaPublicacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Catalogo
     */
    'fechaVencimiento'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Catalogo
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Catalogo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Catalogo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Catalogo
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Catalogo
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface CatalogoFilter
 */
export interface CatalogoFilter {
    /**
     * 
     * @type {number}
     * @memberof CatalogoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof CatalogoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof CatalogoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface CatalogoFilter1
 */
export interface CatalogoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof CatalogoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof CatalogoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof CatalogoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof CatalogoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Catalogo>, schemaOptions: { partial: true })
 * @export
 * @interface CatalogoPartial
 */
export interface CatalogoPartial {
    /**
     * 
     * @type {number}
     * @memberof CatalogoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogoPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogoPartial
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoPartial
     */
    'tipo'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogoPartial
     */
    'estado'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogoPartial
     */
    'fechaPublicacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoPartial
     */
    'fechaVencimiento'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CatalogoPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface CatalogoProducto
 */
export interface CatalogoProducto {
    /**
     * 
     * @type {number}
     * @memberof CatalogoProducto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProducto
     */
    'catalogoId': number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProducto
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProducto
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoProducto
     */
    'fechaInclusion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoProducto
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoProducto
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProducto
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProducto
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface CatalogoProductoFilter
 */
export interface CatalogoProductoFilter {
    /**
     * 
     * @type {number}
     * @memberof CatalogoProductoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProductoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProductoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof CatalogoProductoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof CatalogoProductoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface CatalogoProductoFilter1
 */
export interface CatalogoProductoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof CatalogoProductoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProductoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProductoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof CatalogoProductoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof CatalogoProductoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof CatalogoProductoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<CatalogoProducto>, schemaOptions: { partial: true })
 * @export
 * @interface CatalogoProductoPartial
 */
export interface CatalogoProductoPartial {
    /**
     * 
     * @type {number}
     * @memberof CatalogoProductoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProductoPartial
     */
    'catalogoId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProductoPartial
     */
    'productoId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProductoPartial
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoProductoPartial
     */
    'fechaInclusion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoProductoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoProductoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProductoPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProductoPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: CatalogoProductoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface CatalogoProductoWithRelations
 */
export interface CatalogoProductoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof CatalogoProductoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProductoWithRelations
     */
    'catalogoId': number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProductoWithRelations
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProductoWithRelations
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoProductoWithRelations
     */
    'fechaInclusion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoProductoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoProductoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProductoWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoProductoWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: CatalogoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface CatalogoWithRelations
 */
export interface CatalogoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof CatalogoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof CatalogoWithRelations
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof CatalogoWithRelations
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoWithRelations
     */
    'tipo': string;
    /**
     * 
     * @type {string}
     * @memberof CatalogoWithRelations
     */
    'estado': string;
    /**
     * 
     * @type {string}
     * @memberof CatalogoWithRelations
     */
    'fechaPublicacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoWithRelations
     */
    'fechaVencimiento'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CatalogoWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof CatalogoWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Categoria
 */
export interface Categoria {
    /**
     * 
     * @type {number}
     * @memberof Categoria
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Categoria
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof Categoria
     */
    'categoriaPadreId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Categoria
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof Categoria
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Categoria
     */
    'imagen'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Categoria
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Categoria
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Categoria
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Categoria
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Categoria
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Categoria
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface CategoriaFilter
 */
export interface CategoriaFilter {
    /**
     * 
     * @type {number}
     * @memberof CategoriaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof CategoriaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof CategoriaFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface CategoriaFilter1
 */
export interface CategoriaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof CategoriaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof CategoriaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof CategoriaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof CategoriaFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface CategoriaGrupoAtributo
 */
export interface CategoriaGrupoAtributo {
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributo
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributo
     */
    'categoriaId': number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributo
     */
    'grupoAtributoId': number;
    /**
     * 
     * @type {string}
     * @memberof CategoriaGrupoAtributo
     */
    'obligatorioSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoriaGrupoAtributo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoriaGrupoAtributo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributo
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributo
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface CategoriaGrupoAtributoFilter
 */
export interface CategoriaGrupoAtributoFilter {
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof CategoriaGrupoAtributoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof CategoriaGrupoAtributoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface CategoriaGrupoAtributoFilter1
 */
export interface CategoriaGrupoAtributoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof CategoriaGrupoAtributoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof CategoriaGrupoAtributoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof CategoriaGrupoAtributoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<CategoriaGrupoAtributo>, schemaOptions: { partial: true })
 * @export
 * @interface CategoriaGrupoAtributoPartial
 */
export interface CategoriaGrupoAtributoPartial {
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributoPartial
     */
    'categoriaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributoPartial
     */
    'grupoAtributoId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoriaGrupoAtributoPartial
     */
    'obligatorioSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoriaGrupoAtributoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoriaGrupoAtributoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributoPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributoPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: CategoriaGrupoAtributoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface CategoriaGrupoAtributoWithRelations
 */
export interface CategoriaGrupoAtributoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributoWithRelations
     */
    'categoriaId': number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributoWithRelations
     */
    'grupoAtributoId': number;
    /**
     * 
     * @type {string}
     * @memberof CategoriaGrupoAtributoWithRelations
     */
    'obligatorioSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoriaGrupoAtributoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoriaGrupoAtributoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributoWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaGrupoAtributoWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Partial<Categoria>, schemaOptions: { partial: true })
 * @export
 * @interface CategoriaPartial
 */
export interface CategoriaPartial {
    /**
     * 
     * @type {number}
     * @memberof CategoriaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaPartial
     */
    'categoriaPadreId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CategoriaPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoriaPartial
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoriaPartial
     */
    'imagen'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoriaPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CategoriaPartial
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CategoriaPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoriaPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CategoriaPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: CategoriaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface CategoriaWithRelations
 */
export interface CategoriaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof CategoriaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaWithRelations
     */
    'categoriaPadreId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CategoriaWithRelations
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof CategoriaWithRelations
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoriaWithRelations
     */
    'imagen'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoriaWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CategoriaWithRelations
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CategoriaWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoriaWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CategoriaWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof CategoriaWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface ConfiguracionDiseno
 */
export interface ConfiguracionDiseno {
    /**
     * 
     * @type {number}
     * @memberof ConfiguracionDiseno
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConfiguracionDiseno
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDiseno
     */
    'colorPrimario'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDiseno
     */
    'colorSecundario'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDiseno
     */
    'colorAcento'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDiseno
     */
    'logotipo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDiseno
     */
    'favicon'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDiseno
     */
    'fuentePrincipal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDiseno
     */
    'configuracionPersonalizada'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDiseno
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDiseno
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDiseno
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ConfiguracionDiseno
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof ConfiguracionDiseno
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface ConfiguracionDisenoFilter
 */
export interface ConfiguracionDisenoFilter {
    /**
     * 
     * @type {number}
     * @memberof ConfiguracionDisenoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConfiguracionDisenoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConfiguracionDisenoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ConfiguracionDisenoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ConfiguracionDisenoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ConfiguracionDisenoFilter1
 */
export interface ConfiguracionDisenoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ConfiguracionDisenoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConfiguracionDisenoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConfiguracionDisenoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ConfiguracionDisenoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ConfiguracionDisenoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ConfiguracionDisenoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<ConfiguracionDiseno>, schemaOptions: { partial: true })
 * @export
 * @interface ConfiguracionDisenoPartial
 */
export interface ConfiguracionDisenoPartial {
    /**
     * 
     * @type {number}
     * @memberof ConfiguracionDisenoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConfiguracionDisenoPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoPartial
     */
    'colorPrimario'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoPartial
     */
    'colorSecundario'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoPartial
     */
    'colorAcento'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoPartial
     */
    'logotipo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoPartial
     */
    'favicon'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoPartial
     */
    'fuentePrincipal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoPartial
     */
    'configuracionPersonalizada'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ConfiguracionDisenoPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConfiguracionDisenoPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: ConfiguracionDisenoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ConfiguracionDisenoWithRelations
 */
export interface ConfiguracionDisenoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ConfiguracionDisenoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConfiguracionDisenoWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoWithRelations
     */
    'colorPrimario'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoWithRelations
     */
    'colorSecundario'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoWithRelations
     */
    'colorAcento'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoWithRelations
     */
    'logotipo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoWithRelations
     */
    'favicon'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoWithRelations
     */
    'fuentePrincipal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoWithRelations
     */
    'configuracionPersonalizada'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfiguracionDisenoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ConfiguracionDisenoWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof ConfiguracionDisenoWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Empresa
 */
export interface Empresa {
    /**
     * 
     * @type {number}
     * @memberof Empresa
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'codigo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Empresa
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Empresa
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Empresa
     */
    'tiempoInactividad'?: number;
}
/**
 * 
 * @export
 * @interface EmpresaFilter
 */
export interface EmpresaFilter {
    /**
     * 
     * @type {number}
     * @memberof EmpresaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmpresaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmpresaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EmpresaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof EmpresaFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface EmpresaFilter1
 */
export interface EmpresaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof EmpresaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmpresaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmpresaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EmpresaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof EmpresaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof EmpresaFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Empresa>, schemaOptions: { partial: true })
 * @export
 * @interface EmpresaPartial
 */
export interface EmpresaPartial {
    /**
     * 
     * @type {number}
     * @memberof EmpresaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'codigo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EmpresaPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmpresaPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EmpresaPartial
     */
    'tiempoInactividad'?: number;
}
/**
 * (tsType: EmpresaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface EmpresaWithRelations
 */
export interface EmpresaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof EmpresaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'codigo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EmpresaWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof EmpresaWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EmpresaWithRelations
     */
    'tiempoInactividad'?: number;
}
/**
 * 
 * @export
 * @interface GrupoAtributo
 */
export interface GrupoAtributo {
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributo
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributo
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof GrupoAtributo
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof GrupoAtributo
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributo
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof GrupoAtributo
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GrupoAtributo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GrupoAtributo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributo
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributo
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface GrupoAtributoFilter
 */
export interface GrupoAtributoFilter {
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof GrupoAtributoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof GrupoAtributoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface GrupoAtributoFilter1
 */
export interface GrupoAtributoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof GrupoAtributoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof GrupoAtributoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof GrupoAtributoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<GrupoAtributo>, schemaOptions: { partial: true })
 * @export
 * @interface GrupoAtributoPartial
 */
export interface GrupoAtributoPartial {
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributoPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GrupoAtributoPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrupoAtributoPartial
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributoPartial
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof GrupoAtributoPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GrupoAtributoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GrupoAtributoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributoPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributoPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: GrupoAtributoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface GrupoAtributoWithRelations
 */
export interface GrupoAtributoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributoWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof GrupoAtributoWithRelations
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof GrupoAtributoWithRelations
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributoWithRelations
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof GrupoAtributoWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GrupoAtributoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GrupoAtributoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributoWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof GrupoAtributoWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Icono
 */
export interface Icono {
    /**
     * 
     * @type {number}
     * @memberof Icono
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Icono
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof Icono
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof Icono
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Icono
     */
    'archivo': string;
    /**
     * 
     * @type {string}
     * @memberof Icono
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Icono
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Icono
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Icono
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Icono
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Icono
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface IconoFilter
 */
export interface IconoFilter {
    /**
     * 
     * @type {number}
     * @memberof IconoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof IconoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof IconoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof IconoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof IconoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface IconoFilter1
 */
export interface IconoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof IconoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof IconoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof IconoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof IconoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof IconoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof IconoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Icono>, schemaOptions: { partial: true })
 * @export
 * @interface IconoPartial
 */
export interface IconoPartial {
    /**
     * 
     * @type {number}
     * @memberof IconoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof IconoPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof IconoPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof IconoPartial
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IconoPartial
     */
    'archivo'?: string;
    /**
     * 
     * @type {string}
     * @memberof IconoPartial
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IconoPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IconoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IconoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IconoPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof IconoPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: IconoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface IconoWithRelations
 */
export interface IconoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof IconoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof IconoWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof IconoWithRelations
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof IconoWithRelations
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IconoWithRelations
     */
    'archivo': string;
    /**
     * 
     * @type {string}
     * @memberof IconoWithRelations
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IconoWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IconoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IconoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IconoWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof IconoWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Idioma
 */
export interface Idioma {
    /**
     * 
     * @type {number}
     * @memberof Idioma
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Idioma
     */
    'iso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Idioma
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Idioma
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Idioma
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Idioma
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Idioma
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Idioma
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Idioma
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Idioma
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface IdiomaFilter
 */
export interface IdiomaFilter {
    /**
     * 
     * @type {number}
     * @memberof IdiomaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdiomaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdiomaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof IdiomaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof IdiomaFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface IdiomaFilter1
 */
export interface IdiomaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof IdiomaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdiomaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdiomaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof IdiomaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof IdiomaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof IdiomaFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Idioma>, schemaOptions: { partial: true })
 * @export
 * @interface IdiomaPartial
 */
export interface IdiomaPartial {
    /**
     * 
     * @type {number}
     * @memberof IdiomaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IdiomaPartial
     */
    'iso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IdiomaPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdiomaPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaPartial
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IdiomaPartial
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: IdiomaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface IdiomaWithRelations
 */
export interface IdiomaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof IdiomaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IdiomaWithRelations
     */
    'iso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IdiomaWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof IdiomaWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaWithRelations
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IdiomaWithRelations
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineObject3
     */
    'emails'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof InlineObject3
     */
    'empresaId'?: number;
}
/**
 * 
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineObject4
     */
    'emails'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof InlineObject4
     */
    'empresaId'?: number;
}
/**
 * 
 * @export
 * @interface InlineObject5
 */
export interface InlineObject5 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    'mail': string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface InlineObject6
 */
export interface InlineObject6 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject6
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject7
 */
export interface InlineObject7 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject7
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject7
     */
    'mail': string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject7
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject7
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject7
     */
    'rolId'?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'expiresIn'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {Usuario}
     * @memberof InlineResponse200
     */
    'userData'?: Usuario;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2001
     */
    'user'?: object;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface LogAcceso
 */
export interface LogAcceso {
    /**
     * 
     * @type {number}
     * @memberof LogAcceso
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogAcceso
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof LogAcceso
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof LogAcceso
     */
    'ipAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogAcceso
     */
    'userAgent'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogAcceso
     */
    'navegador'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogAcceso
     */
    'sistemaOperativo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogAcceso
     */
    'dispositivo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogAcceso
     */
    'resultado': string;
    /**
     * 
     * @type {string}
     * @memberof LogAcceso
     */
    'motivoFallo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogAcceso
     */
    'fechaAcceso'?: string | null;
}
/**
 * 
 * @export
 * @interface LogAccesoFilter
 */
export interface LogAccesoFilter {
    /**
     * 
     * @type {number}
     * @memberof LogAccesoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogAccesoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogAccesoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof LogAccesoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof LogAccesoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface LogAccesoFilter1
 */
export interface LogAccesoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof LogAccesoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogAccesoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogAccesoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof LogAccesoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof LogAccesoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof LogAccesoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<LogAcceso>, schemaOptions: { partial: true })
 * @export
 * @interface LogAccesoPartial
 */
export interface LogAccesoPartial {
    /**
     * 
     * @type {number}
     * @memberof LogAccesoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogAccesoPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogAccesoPartial
     */
    'usuarioId'?: number;
    /**
     * 
     * @type {string}
     * @memberof LogAccesoPartial
     */
    'ipAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogAccesoPartial
     */
    'userAgent'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogAccesoPartial
     */
    'navegador'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogAccesoPartial
     */
    'sistemaOperativo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogAccesoPartial
     */
    'dispositivo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogAccesoPartial
     */
    'resultado'?: string;
    /**
     * 
     * @type {string}
     * @memberof LogAccesoPartial
     */
    'motivoFallo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogAccesoPartial
     */
    'fechaAcceso'?: string | null;
}
/**
 * (tsType: LogAccesoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface LogAccesoWithRelations
 */
export interface LogAccesoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof LogAccesoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogAccesoWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof LogAccesoWithRelations
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof LogAccesoWithRelations
     */
    'ipAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogAccesoWithRelations
     */
    'userAgent'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogAccesoWithRelations
     */
    'navegador'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogAccesoWithRelations
     */
    'sistemaOperativo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogAccesoWithRelations
     */
    'dispositivo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogAccesoWithRelations
     */
    'resultado': string;
    /**
     * 
     * @type {string}
     * @memberof LogAccesoWithRelations
     */
    'motivoFallo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogAccesoWithRelations
     */
    'fechaAcceso'?: string | null;
}
/**
 * 
 * @export
 * @interface LogExportacion
 */
export interface LogExportacion {
    /**
     * 
     * @type {number}
     * @memberof LogExportacion
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogExportacion
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof LogExportacion
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof LogExportacion
     */
    'tablaOrigen': string;
    /**
     * 
     * @type {string}
     * @memberof LogExportacion
     */
    'nombreArchivo': string;
    /**
     * 
     * @type {string}
     * @memberof LogExportacion
     */
    'rutaArchivo': string;
    /**
     * 
     * @type {string}
     * @memberof LogExportacion
     */
    'filtrosAplicados'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogExportacion
     */
    'camposExportados'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogExportacion
     */
    'estado': string;
    /**
     * 
     * @type {number}
     * @memberof LogExportacion
     */
    'totalRegistros'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogExportacion
     */
    'registrosExportados'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LogExportacion
     */
    'mensajeResultado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogExportacion
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogExportacion
     */
    'fechaFin'?: string | null;
}
/**
 * 
 * @export
 * @interface LogExportacionFilter
 */
export interface LogExportacionFilter {
    /**
     * 
     * @type {number}
     * @memberof LogExportacionFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogExportacionFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogExportacionFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof LogExportacionFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof LogExportacionFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface LogExportacionFilter1
 */
export interface LogExportacionFilter1 {
    /**
     * 
     * @type {number}
     * @memberof LogExportacionFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogExportacionFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogExportacionFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof LogExportacionFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof LogExportacionFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof LogExportacionFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<LogExportacion>, schemaOptions: { partial: true })
 * @export
 * @interface LogExportacionPartial
 */
export interface LogExportacionPartial {
    /**
     * 
     * @type {number}
     * @memberof LogExportacionPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogExportacionPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogExportacionPartial
     */
    'usuarioId'?: number;
    /**
     * 
     * @type {string}
     * @memberof LogExportacionPartial
     */
    'tablaOrigen'?: string;
    /**
     * 
     * @type {string}
     * @memberof LogExportacionPartial
     */
    'nombreArchivo'?: string;
    /**
     * 
     * @type {string}
     * @memberof LogExportacionPartial
     */
    'rutaArchivo'?: string;
    /**
     * 
     * @type {string}
     * @memberof LogExportacionPartial
     */
    'filtrosAplicados'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogExportacionPartial
     */
    'camposExportados'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogExportacionPartial
     */
    'estado'?: string;
    /**
     * 
     * @type {number}
     * @memberof LogExportacionPartial
     */
    'totalRegistros'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogExportacionPartial
     */
    'registrosExportados'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LogExportacionPartial
     */
    'mensajeResultado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogExportacionPartial
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogExportacionPartial
     */
    'fechaFin'?: string | null;
}
/**
 * (tsType: LogExportacionWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface LogExportacionWithRelations
 */
export interface LogExportacionWithRelations {
    /**
     * 
     * @type {number}
     * @memberof LogExportacionWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogExportacionWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof LogExportacionWithRelations
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof LogExportacionWithRelations
     */
    'tablaOrigen': string;
    /**
     * 
     * @type {string}
     * @memberof LogExportacionWithRelations
     */
    'nombreArchivo': string;
    /**
     * 
     * @type {string}
     * @memberof LogExportacionWithRelations
     */
    'rutaArchivo': string;
    /**
     * 
     * @type {string}
     * @memberof LogExportacionWithRelations
     */
    'filtrosAplicados'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogExportacionWithRelations
     */
    'camposExportados'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogExportacionWithRelations
     */
    'estado': string;
    /**
     * 
     * @type {number}
     * @memberof LogExportacionWithRelations
     */
    'totalRegistros'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogExportacionWithRelations
     */
    'registrosExportados'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LogExportacionWithRelations
     */
    'mensajeResultado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogExportacionWithRelations
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogExportacionWithRelations
     */
    'fechaFin'?: string | null;
}
/**
 * 
 * @export
 * @interface LogImportacion
 */
export interface LogImportacion {
    /**
     * 
     * @type {number}
     * @memberof LogImportacion
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogImportacion
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof LogImportacion
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof LogImportacion
     */
    'tablaDestino': string;
    /**
     * 
     * @type {string}
     * @memberof LogImportacion
     */
    'nombreArchivo': string;
    /**
     * 
     * @type {string}
     * @memberof LogImportacion
     */
    'rutaArchivo': string;
    /**
     * 
     * @type {string}
     * @memberof LogImportacion
     */
    'estado': string;
    /**
     * 
     * @type {number}
     * @memberof LogImportacion
     */
    'totalRegistros'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogImportacion
     */
    'registrosProcesados'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogImportacion
     */
    'registrosInsertados'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogImportacion
     */
    'registrosActualizados'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogImportacion
     */
    'registrosConError'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LogImportacion
     */
    'archivoErrores'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogImportacion
     */
    'mensajeResultado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogImportacion
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogImportacion
     */
    'fechaFin'?: string | null;
}
/**
 * 
 * @export
 * @interface LogImportacionFilter
 */
export interface LogImportacionFilter {
    /**
     * 
     * @type {number}
     * @memberof LogImportacionFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogImportacionFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogImportacionFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof LogImportacionFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof LogImportacionFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface LogImportacionFilter1
 */
export interface LogImportacionFilter1 {
    /**
     * 
     * @type {number}
     * @memberof LogImportacionFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogImportacionFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogImportacionFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof LogImportacionFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof LogImportacionFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof LogImportacionFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<LogImportacion>, schemaOptions: { partial: true })
 * @export
 * @interface LogImportacionPartial
 */
export interface LogImportacionPartial {
    /**
     * 
     * @type {number}
     * @memberof LogImportacionPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogImportacionPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogImportacionPartial
     */
    'usuarioId'?: number;
    /**
     * 
     * @type {string}
     * @memberof LogImportacionPartial
     */
    'tablaDestino'?: string;
    /**
     * 
     * @type {string}
     * @memberof LogImportacionPartial
     */
    'nombreArchivo'?: string;
    /**
     * 
     * @type {string}
     * @memberof LogImportacionPartial
     */
    'rutaArchivo'?: string;
    /**
     * 
     * @type {string}
     * @memberof LogImportacionPartial
     */
    'estado'?: string;
    /**
     * 
     * @type {number}
     * @memberof LogImportacionPartial
     */
    'totalRegistros'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogImportacionPartial
     */
    'registrosProcesados'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogImportacionPartial
     */
    'registrosInsertados'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogImportacionPartial
     */
    'registrosActualizados'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogImportacionPartial
     */
    'registrosConError'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LogImportacionPartial
     */
    'archivoErrores'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogImportacionPartial
     */
    'mensajeResultado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogImportacionPartial
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogImportacionPartial
     */
    'fechaFin'?: string | null;
}
/**
 * (tsType: LogImportacionWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface LogImportacionWithRelations
 */
export interface LogImportacionWithRelations {
    /**
     * 
     * @type {number}
     * @memberof LogImportacionWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogImportacionWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof LogImportacionWithRelations
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof LogImportacionWithRelations
     */
    'tablaDestino': string;
    /**
     * 
     * @type {string}
     * @memberof LogImportacionWithRelations
     */
    'nombreArchivo': string;
    /**
     * 
     * @type {string}
     * @memberof LogImportacionWithRelations
     */
    'rutaArchivo': string;
    /**
     * 
     * @type {string}
     * @memberof LogImportacionWithRelations
     */
    'estado': string;
    /**
     * 
     * @type {number}
     * @memberof LogImportacionWithRelations
     */
    'totalRegistros'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogImportacionWithRelations
     */
    'registrosProcesados'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogImportacionWithRelations
     */
    'registrosInsertados'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogImportacionWithRelations
     */
    'registrosActualizados'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogImportacionWithRelations
     */
    'registrosConError'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LogImportacionWithRelations
     */
    'archivoErrores'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogImportacionWithRelations
     */
    'mensajeResultado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogImportacionWithRelations
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogImportacionWithRelations
     */
    'fechaFin'?: string | null;
}
/**
 * 
 * @export
 * @interface LogSincronizacion
 */
export interface LogSincronizacion {
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacion
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacion
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacion
     */
    'sistemaExterno': string;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacion
     */
    'tipoSincronizacion': string;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacion
     */
    'estado': string;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacion
     */
    'registrosProcesados'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacion
     */
    'registrosExitosos'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacion
     */
    'registrosConError'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacion
     */
    'mensajeResultado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacion
     */
    'archivoLog'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacion
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacion
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacion
     */
    'fechaFin'?: string | null;
}
/**
 * 
 * @export
 * @interface LogSincronizacionFilter
 */
export interface LogSincronizacionFilter {
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacionFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacionFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacionFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof LogSincronizacionFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof LogSincronizacionFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface LogSincronizacionFilter1
 */
export interface LogSincronizacionFilter1 {
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacionFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacionFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacionFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof LogSincronizacionFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof LogSincronizacionFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof LogSincronizacionFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<LogSincronizacion>, schemaOptions: { partial: true })
 * @export
 * @interface LogSincronizacionPartial
 */
export interface LogSincronizacionPartial {
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacionPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacionPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacionPartial
     */
    'sistemaExterno'?: string;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacionPartial
     */
    'tipoSincronizacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacionPartial
     */
    'estado'?: string;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacionPartial
     */
    'registrosProcesados'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacionPartial
     */
    'registrosExitosos'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacionPartial
     */
    'registrosConError'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacionPartial
     */
    'mensajeResultado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacionPartial
     */
    'archivoLog'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacionPartial
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacionPartial
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacionPartial
     */
    'fechaFin'?: string | null;
}
/**
 * (tsType: LogSincronizacionWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface LogSincronizacionWithRelations
 */
export interface LogSincronizacionWithRelations {
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacionWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacionWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacionWithRelations
     */
    'sistemaExterno': string;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacionWithRelations
     */
    'tipoSincronizacion': string;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacionWithRelations
     */
    'estado': string;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacionWithRelations
     */
    'registrosProcesados'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacionWithRelations
     */
    'registrosExitosos'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacionWithRelations
     */
    'registrosConError'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacionWithRelations
     */
    'mensajeResultado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacionWithRelations
     */
    'archivoLog'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LogSincronizacionWithRelations
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacionWithRelations
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogSincronizacionWithRelations
     */
    'fechaFin'?: string | null;
}
/**
 * 
 * @export
 * @interface LoopbackCount
 */
export interface LoopbackCount {
    /**
     * 
     * @type {number}
     * @memberof LoopbackCount
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface Marca
 */
export interface Marca {
    /**
     * 
     * @type {number}
     * @memberof Marca
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Marca
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof Marca
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof Marca
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Marca
     */
    'logo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Marca
     */
    'sitioWeb'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Marca
     */
    'paisOrigen'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Marca
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Marca
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Marca
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Marca
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Marca
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface MarcaFilter
 */
export interface MarcaFilter {
    /**
     * 
     * @type {number}
     * @memberof MarcaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof MarcaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof MarcaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof MarcaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof MarcaFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface MarcaFilter1
 */
export interface MarcaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof MarcaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof MarcaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof MarcaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof MarcaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof MarcaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof MarcaFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Marca>, schemaOptions: { partial: true })
 * @export
 * @interface MarcaPartial
 */
export interface MarcaPartial {
    /**
     * 
     * @type {number}
     * @memberof MarcaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MarcaPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MarcaPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof MarcaPartial
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarcaPartial
     */
    'logo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarcaPartial
     */
    'sitioWeb'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarcaPartial
     */
    'paisOrigen'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarcaPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarcaPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarcaPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MarcaPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof MarcaPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: MarcaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface MarcaWithRelations
 */
export interface MarcaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof MarcaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MarcaWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof MarcaWithRelations
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof MarcaWithRelations
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarcaWithRelations
     */
    'logo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarcaWithRelations
     */
    'sitioWeb'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarcaWithRelations
     */
    'paisOrigen'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarcaWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarcaWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarcaWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MarcaWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof MarcaWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Marketplace
 */
export interface Marketplace {
    /**
     * 
     * @type {number}
     * @memberof Marketplace
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Marketplace
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof Marketplace
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof Marketplace
     */
    'tipo': string;
    /**
     * 
     * @type {string}
     * @memberof Marketplace
     */
    'urlApi'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Marketplace
     */
    'credencialesApi'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Marketplace
     */
    'configuracion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Marketplace
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Marketplace
     */
    'ultimaSincronizacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Marketplace
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Marketplace
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Marketplace
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Marketplace
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface MarketplaceFilter
 */
export interface MarketplaceFilter {
    /**
     * 
     * @type {number}
     * @memberof MarketplaceFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof MarketplaceFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof MarketplaceFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof MarketplaceFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof MarketplaceFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface MarketplaceFilter1
 */
export interface MarketplaceFilter1 {
    /**
     * 
     * @type {number}
     * @memberof MarketplaceFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof MarketplaceFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof MarketplaceFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof MarketplaceFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof MarketplaceFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof MarketplaceFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Marketplace>, schemaOptions: { partial: true })
 * @export
 * @interface MarketplacePartial
 */
export interface MarketplacePartial {
    /**
     * 
     * @type {number}
     * @memberof MarketplacePartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MarketplacePartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MarketplacePartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof MarketplacePartial
     */
    'tipo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MarketplacePartial
     */
    'urlApi'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarketplacePartial
     */
    'credencialesApi'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarketplacePartial
     */
    'configuracion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarketplacePartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarketplacePartial
     */
    'ultimaSincronizacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarketplacePartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarketplacePartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MarketplacePartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof MarketplacePartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: MarketplaceWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface MarketplaceWithRelations
 */
export interface MarketplaceWithRelations {
    /**
     * 
     * @type {number}
     * @memberof MarketplaceWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MarketplaceWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof MarketplaceWithRelations
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof MarketplaceWithRelations
     */
    'tipo': string;
    /**
     * 
     * @type {string}
     * @memberof MarketplaceWithRelations
     */
    'urlApi'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarketplaceWithRelations
     */
    'credencialesApi'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarketplaceWithRelations
     */
    'configuracion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarketplaceWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarketplaceWithRelations
     */
    'ultimaSincronizacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarketplaceWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MarketplaceWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MarketplaceWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof MarketplaceWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface MensajePlantilla
 */
export interface MensajePlantilla {
    /**
     * 
     * @type {number}
     * @memberof MensajePlantilla
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantilla
     */
    'mensajePlantillaCategoriaId': number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantilla
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantilla
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantilla
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantilla
     */
    'textoCuerpo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantilla
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantilla
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantilla
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantilla
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface MensajePlantillaCategoria
 */
export interface MensajePlantillaCategoria {
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaCategoria
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaCategoria
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantillaCategoria
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantillaCategoria
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantillaCategoria
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaCategoria
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaCategoria
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface MensajePlantillaCategoriaFilter
 */
export interface MensajePlantillaCategoriaFilter {
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaCategoriaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaCategoriaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaCategoriaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof MensajePlantillaCategoriaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof MensajePlantillaCategoriaFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface MensajePlantillaCategoriaFilter1
 */
export interface MensajePlantillaCategoriaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaCategoriaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaCategoriaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaCategoriaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof MensajePlantillaCategoriaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof MensajePlantillaCategoriaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof MensajePlantillaCategoriaFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<MensajePlantillaCategoria>, schemaOptions: { partial: true })
 * @export
 * @interface MensajePlantillaCategoriaPartial
 */
export interface MensajePlantillaCategoriaPartial {
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaCategoriaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaCategoriaPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantillaCategoriaPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantillaCategoriaPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantillaCategoriaPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaCategoriaPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaCategoriaPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: MensajePlantillaCategoriaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface MensajePlantillaCategoriaWithRelations
 */
export interface MensajePlantillaCategoriaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaCategoriaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaCategoriaWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantillaCategoriaWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantillaCategoriaWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantillaCategoriaWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaCategoriaWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaCategoriaWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface MensajePlantillaFilter
 */
export interface MensajePlantillaFilter {
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof MensajePlantillaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof MensajePlantillaFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface MensajePlantillaFilter1
 */
export interface MensajePlantillaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof MensajePlantillaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof MensajePlantillaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof MensajePlantillaFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<MensajePlantilla>, schemaOptions: { partial: true })
 * @export
 * @interface MensajePlantillaPartial
 */
export interface MensajePlantillaPartial {
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaPartial
     */
    'mensajePlantillaCategoriaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaPartial
     */
    'idiomaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantillaPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantillaPartial
     */
    'textoCuerpo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantillaPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantillaPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: MensajePlantillaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface MensajePlantillaWithRelations
 */
export interface MensajePlantillaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaWithRelations
     */
    'mensajePlantillaCategoriaId': number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaWithRelations
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantillaWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantillaWithRelations
     */
    'textoCuerpo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantillaWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajePlantillaWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof MensajePlantillaWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface MensajeTipo
 */
export interface MensajeTipo {
    /**
     * 
     * @type {number}
     * @memberof MensajeTipo
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajeTipo
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof MensajeTipo
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajeTipo
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajeTipo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajeTipo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MensajeTipo
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof MensajeTipo
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MensajeTipo
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MensajeTipo
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface MensajeTipoFilter
 */
export interface MensajeTipoFilter {
    /**
     * 
     * @type {number}
     * @memberof MensajeTipoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajeTipoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajeTipoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof MensajeTipoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof MensajeTipoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface MensajeTipoFilter1
 */
export interface MensajeTipoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof MensajeTipoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajeTipoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajeTipoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof MensajeTipoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof MensajeTipoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof MensajeTipoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<MensajeTipo>, schemaOptions: { partial: true })
 * @export
 * @interface MensajeTipoPartial
 */
export interface MensajeTipoPartial {
    /**
     * 
     * @type {number}
     * @memberof MensajeTipoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajeTipoPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MensajeTipoPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajeTipoPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajeTipoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajeTipoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MensajeTipoPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajeTipoPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MensajeTipoPartial
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MensajeTipoPartial
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: MensajeTipoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface MensajeTipoWithRelations
 */
export interface MensajeTipoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof MensajeTipoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MensajeTipoWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof MensajeTipoWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajeTipoWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajeTipoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MensajeTipoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MensajeTipoWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof MensajeTipoWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MensajeTipoWithRelations
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MensajeTipoWithRelations
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface Multimedia
 */
export interface Multimedia {
    /**
     * 
     * @type {number}
     * @memberof Multimedia
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Multimedia
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof Multimedia
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof Multimedia
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Multimedia
     */
    'tipo': string;
    /**
     * 
     * @type {string}
     * @memberof Multimedia
     */
    'formato'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Multimedia
     */
    'archivoOriginal': string;
    /**
     * 
     * @type {string}
     * @memberof Multimedia
     */
    'archivoThumbnail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Multimedia
     */
    'archivoMedio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Multimedia
     */
    'archivoGrande'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Multimedia
     */
    'tamanoBytes'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Multimedia
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Multimedia
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Multimedia
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Multimedia
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Multimedia
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface MultimediaFilter
 */
export interface MultimediaFilter {
    /**
     * 
     * @type {number}
     * @memberof MultimediaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof MultimediaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof MultimediaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof MultimediaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof MultimediaFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface MultimediaFilter1
 */
export interface MultimediaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof MultimediaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof MultimediaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof MultimediaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof MultimediaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof MultimediaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof MultimediaFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Multimedia>, schemaOptions: { partial: true })
 * @export
 * @interface MultimediaPartial
 */
export interface MultimediaPartial {
    /**
     * 
     * @type {number}
     * @memberof MultimediaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MultimediaPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MultimediaPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof MultimediaPartial
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultimediaPartial
     */
    'tipo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MultimediaPartial
     */
    'formato'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultimediaPartial
     */
    'archivoOriginal'?: string;
    /**
     * 
     * @type {string}
     * @memberof MultimediaPartial
     */
    'archivoThumbnail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultimediaPartial
     */
    'archivoMedio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultimediaPartial
     */
    'archivoGrande'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MultimediaPartial
     */
    'tamanoBytes'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MultimediaPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultimediaPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultimediaPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MultimediaPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof MultimediaPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: MultimediaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface MultimediaWithRelations
 */
export interface MultimediaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof MultimediaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MultimediaWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof MultimediaWithRelations
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof MultimediaWithRelations
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultimediaWithRelations
     */
    'tipo': string;
    /**
     * 
     * @type {string}
     * @memberof MultimediaWithRelations
     */
    'formato'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultimediaWithRelations
     */
    'archivoOriginal': string;
    /**
     * 
     * @type {string}
     * @memberof MultimediaWithRelations
     */
    'archivoThumbnail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultimediaWithRelations
     */
    'archivoMedio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultimediaWithRelations
     */
    'archivoGrande'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MultimediaWithRelations
     */
    'tamanoBytes'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MultimediaWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultimediaWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MultimediaWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MultimediaWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof MultimediaWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<Archivo, \'id\'>, schemaOptions: { title: \'NewArchivo\', exclude: [ \'id\' ] })
 * @export
 * @interface NewArchivo
 */
export interface NewArchivo {
    /**
     * 
     * @type {number}
     * @memberof NewArchivo
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewArchivo
     */
    'tipoArchivoId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'tabla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewArchivo
     */
    'idTabla'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'pantalla'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewArchivo
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewArchivo
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<Atributo, \'id\'>, schemaOptions: { title: \'NewAtributo\', exclude: [ \'id\' ] })
 * @export
 * @interface NewAtributo
 */
export interface NewAtributo {
    /**
     * 
     * @type {number}
     * @memberof NewAtributo
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewAtributo
     */
    'grupoAtributoId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewAtributo
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof NewAtributo
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewAtributo
     */
    'tipoDato': string;
    /**
     * 
     * @type {string}
     * @memberof NewAtributo
     */
    'unidadMedida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewAtributo
     */
    'obligatorioSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewAtributo
     */
    'multivalorSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewAtributo
     */
    'valoresPermitidos'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewAtributo
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewAtributo
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewAtributo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewAtributo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewAtributo
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewAtributo
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<Auditoria, \'id\'>, schemaOptions: { title: \'NewAuditoria\', exclude: [ \'id\' ] })
 * @export
 * @interface NewAuditoria
 */
export interface NewAuditoria {
    /**
     * 
     * @type {number}
     * @memberof NewAuditoria
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewAuditoria
     */
    'tablaAfectada': string;
    /**
     * 
     * @type {number}
     * @memberof NewAuditoria
     */
    'idRegistro': number;
    /**
     * 
     * @type {string}
     * @memberof NewAuditoria
     */
    'accion': string;
    /**
     * 
     * @type {number}
     * @memberof NewAuditoria
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof NewAuditoria
     */
    'ipAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewAuditoria
     */
    'userAgent'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewAuditoria
     */
    'valoresAnteriores'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewAuditoria
     */
    'valoresNuevos'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewAuditoria
     */
    'fechaAccion'?: string | null;
}
/**
 * (tsType: Omit<CalendariosDisponibilidad, \'id\'>, schemaOptions: { title: \'NewCalendariosDisponibilidad\', exclude: [ \'id\' ] })
 * @export
 * @interface NewCalendariosDisponibilidad
 */
export interface NewCalendariosDisponibilidad {
    /**
     * 
     * @type {number}
     * @memberof NewCalendariosDisponibilidad
     */
    'usuarioId': number;
    /**
     * 
     * @type {number}
     * @memberof NewCalendariosDisponibilidad
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewCalendariosDisponibilidad
     */
    'dia'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCalendariosDisponibilidad
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCalendariosDisponibilidad
     */
    'observaciones'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCalendariosDisponibilidad
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCalendariosDisponibilidad
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewCalendariosDisponibilidad
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewCalendariosDisponibilidad
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<CampoDinamico, \'id\'>, schemaOptions: { title: \'NewCampoDinamico\', exclude: [ \'id\' ] })
 * @export
 * @interface NewCampoDinamico
 */
export interface NewCampoDinamico {
    /**
     * 
     * @type {number}
     * @memberof NewCampoDinamico
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewCampoDinamico
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof NewCampoDinamico
     */
    'etiqueta': string;
    /**
     * 
     * @type {string}
     * @memberof NewCampoDinamico
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCampoDinamico
     */
    'tipoCampo': string;
    /**
     * 
     * @type {string}
     * @memberof NewCampoDinamico
     */
    'opciones'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCampoDinamico
     */
    'obligatorioSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCampoDinamico
     */
    'grupo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewCampoDinamico
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewCampoDinamico
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCampoDinamico
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCampoDinamico
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewCampoDinamico
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewCampoDinamico
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<Catalogo, \'id\'>, schemaOptions: { title: \'NewCatalogo\', exclude: [ \'id\' ] })
 * @export
 * @interface NewCatalogo
 */
export interface NewCatalogo {
    /**
     * 
     * @type {number}
     * @memberof NewCatalogo
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewCatalogo
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof NewCatalogo
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCatalogo
     */
    'tipo': string;
    /**
     * 
     * @type {string}
     * @memberof NewCatalogo
     */
    'estado': string;
    /**
     * 
     * @type {string}
     * @memberof NewCatalogo
     */
    'fechaPublicacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCatalogo
     */
    'fechaVencimiento'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCatalogo
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCatalogo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCatalogo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewCatalogo
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewCatalogo
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<CatalogoProducto, \'id\'>, schemaOptions: { title: \'NewCatalogoProducto\', exclude: [ \'id\' ] })
 * @export
 * @interface NewCatalogoProducto
 */
export interface NewCatalogoProducto {
    /**
     * 
     * @type {number}
     * @memberof NewCatalogoProducto
     */
    'catalogoId': number;
    /**
     * 
     * @type {number}
     * @memberof NewCatalogoProducto
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof NewCatalogoProducto
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewCatalogoProducto
     */
    'fechaInclusion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCatalogoProducto
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCatalogoProducto
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewCatalogoProducto
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewCatalogoProducto
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<Categoria, \'id\'>, schemaOptions: { title: \'NewCategoria\', exclude: [ \'id\' ] })
 * @export
 * @interface NewCategoria
 */
export interface NewCategoria {
    /**
     * 
     * @type {number}
     * @memberof NewCategoria
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewCategoria
     */
    'categoriaPadreId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewCategoria
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof NewCategoria
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCategoria
     */
    'imagen'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCategoria
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewCategoria
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewCategoria
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCategoria
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewCategoria
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewCategoria
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<CategoriaGrupoAtributo, \'id\'>, schemaOptions: { title: \'NewCategoriaGrupoAtributo\', exclude: [ \'id\' ] })
 * @export
 * @interface NewCategoriaGrupoAtributo
 */
export interface NewCategoriaGrupoAtributo {
    /**
     * 
     * @type {number}
     * @memberof NewCategoriaGrupoAtributo
     */
    'categoriaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewCategoriaGrupoAtributo
     */
    'grupoAtributoId': number;
    /**
     * 
     * @type {string}
     * @memberof NewCategoriaGrupoAtributo
     */
    'obligatorioSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCategoriaGrupoAtributo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewCategoriaGrupoAtributo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewCategoriaGrupoAtributo
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewCategoriaGrupoAtributo
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<ConfiguracionDiseno, \'id\'>, schemaOptions: { title: \'NewConfiguracionDiseno\', exclude: [ \'id\' ] })
 * @export
 * @interface NewConfiguracionDiseno
 */
export interface NewConfiguracionDiseno {
    /**
     * 
     * @type {number}
     * @memberof NewConfiguracionDiseno
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewConfiguracionDiseno
     */
    'colorPrimario'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewConfiguracionDiseno
     */
    'colorSecundario'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewConfiguracionDiseno
     */
    'colorAcento'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewConfiguracionDiseno
     */
    'logotipo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewConfiguracionDiseno
     */
    'favicon'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewConfiguracionDiseno
     */
    'fuentePrincipal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewConfiguracionDiseno
     */
    'configuracionPersonalizada'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewConfiguracionDiseno
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewConfiguracionDiseno
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewConfiguracionDiseno
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewConfiguracionDiseno
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewConfiguracionDiseno
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<Empresa, \'id\'>, schemaOptions: { title: \'NewEmpresa\', exclude: [ \'id\' ] })
 * @export
 * @interface NewEmpresa
 */
export interface NewEmpresa {
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'codigo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewEmpresa
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewEmpresa
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewEmpresa
     */
    'tiempoInactividad'?: number;
}
/**
 * (tsType: Omit<GrupoAtributo, \'id\'>, schemaOptions: { title: \'NewGrupoAtributo\', exclude: [ \'id\' ] })
 * @export
 * @interface NewGrupoAtributo
 */
export interface NewGrupoAtributo {
    /**
     * 
     * @type {number}
     * @memberof NewGrupoAtributo
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewGrupoAtributo
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof NewGrupoAtributo
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewGrupoAtributo
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewGrupoAtributo
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewGrupoAtributo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewGrupoAtributo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewGrupoAtributo
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewGrupoAtributo
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<Icono, \'id\'>, schemaOptions: { title: \'NewIcono\', exclude: [ \'id\' ] })
 * @export
 * @interface NewIcono
 */
export interface NewIcono {
    /**
     * 
     * @type {number}
     * @memberof NewIcono
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewIcono
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof NewIcono
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewIcono
     */
    'archivo': string;
    /**
     * 
     * @type {string}
     * @memberof NewIcono
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewIcono
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewIcono
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewIcono
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewIcono
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewIcono
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<Idioma, \'id\'>, schemaOptions: { title: \'NewIdioma\', exclude: [ \'id\' ] })
 * @export
 * @interface NewIdioma
 */
export interface NewIdioma {
    /**
     * 
     * @type {string}
     * @memberof NewIdioma
     */
    'iso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewIdioma
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewIdioma
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewIdioma
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewIdioma
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewIdioma
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewIdioma
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewIdioma
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewIdioma
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: Omit<LogAcceso, \'id\'>, schemaOptions: { title: \'NewLogAcceso\', exclude: [ \'id\' ] })
 * @export
 * @interface NewLogAcceso
 */
export interface NewLogAcceso {
    /**
     * 
     * @type {number}
     * @memberof NewLogAcceso
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewLogAcceso
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof NewLogAcceso
     */
    'ipAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogAcceso
     */
    'userAgent'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogAcceso
     */
    'navegador'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogAcceso
     */
    'sistemaOperativo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogAcceso
     */
    'dispositivo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogAcceso
     */
    'resultado': string;
    /**
     * 
     * @type {string}
     * @memberof NewLogAcceso
     */
    'motivoFallo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogAcceso
     */
    'fechaAcceso'?: string | null;
}
/**
 * (tsType: Omit<LogExportacion, \'id\'>, schemaOptions: { title: \'NewLogExportacion\', exclude: [ \'id\' ] })
 * @export
 * @interface NewLogExportacion
 */
export interface NewLogExportacion {
    /**
     * 
     * @type {number}
     * @memberof NewLogExportacion
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewLogExportacion
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof NewLogExportacion
     */
    'tablaOrigen': string;
    /**
     * 
     * @type {string}
     * @memberof NewLogExportacion
     */
    'nombreArchivo': string;
    /**
     * 
     * @type {string}
     * @memberof NewLogExportacion
     */
    'rutaArchivo': string;
    /**
     * 
     * @type {string}
     * @memberof NewLogExportacion
     */
    'filtrosAplicados'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogExportacion
     */
    'camposExportados'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogExportacion
     */
    'estado': string;
    /**
     * 
     * @type {number}
     * @memberof NewLogExportacion
     */
    'totalRegistros'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewLogExportacion
     */
    'registrosExportados'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogExportacion
     */
    'mensajeResultado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogExportacion
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogExportacion
     */
    'fechaFin'?: string | null;
}
/**
 * (tsType: Omit<LogImportacion, \'id\'>, schemaOptions: { title: \'NewLogImportacion\', exclude: [ \'id\' ] })
 * @export
 * @interface NewLogImportacion
 */
export interface NewLogImportacion {
    /**
     * 
     * @type {number}
     * @memberof NewLogImportacion
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewLogImportacion
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof NewLogImportacion
     */
    'tablaDestino': string;
    /**
     * 
     * @type {string}
     * @memberof NewLogImportacion
     */
    'nombreArchivo': string;
    /**
     * 
     * @type {string}
     * @memberof NewLogImportacion
     */
    'rutaArchivo': string;
    /**
     * 
     * @type {string}
     * @memberof NewLogImportacion
     */
    'estado': string;
    /**
     * 
     * @type {number}
     * @memberof NewLogImportacion
     */
    'totalRegistros'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewLogImportacion
     */
    'registrosProcesados'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewLogImportacion
     */
    'registrosInsertados'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewLogImportacion
     */
    'registrosActualizados'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewLogImportacion
     */
    'registrosConError'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogImportacion
     */
    'archivoErrores'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogImportacion
     */
    'mensajeResultado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogImportacion
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogImportacion
     */
    'fechaFin'?: string | null;
}
/**
 * (tsType: Omit<LogSincronizacion, \'id\'>, schemaOptions: { title: \'NewLogSincronizacion\', exclude: [ \'id\' ] })
 * @export
 * @interface NewLogSincronizacion
 */
export interface NewLogSincronizacion {
    /**
     * 
     * @type {number}
     * @memberof NewLogSincronizacion
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewLogSincronizacion
     */
    'sistemaExterno': string;
    /**
     * 
     * @type {string}
     * @memberof NewLogSincronizacion
     */
    'tipoSincronizacion': string;
    /**
     * 
     * @type {string}
     * @memberof NewLogSincronizacion
     */
    'estado': string;
    /**
     * 
     * @type {number}
     * @memberof NewLogSincronizacion
     */
    'registrosProcesados'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewLogSincronizacion
     */
    'registrosExitosos'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewLogSincronizacion
     */
    'registrosConError'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogSincronizacion
     */
    'mensajeResultado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogSincronizacion
     */
    'archivoLog'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewLogSincronizacion
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogSincronizacion
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogSincronizacion
     */
    'fechaFin'?: string | null;
}
/**
 * (tsType: Omit<Marca, \'id\'>, schemaOptions: { title: \'NewMarca\', exclude: [ \'id\' ] })
 * @export
 * @interface NewMarca
 */
export interface NewMarca {
    /**
     * 
     * @type {number}
     * @memberof NewMarca
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewMarca
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof NewMarca
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMarca
     */
    'logo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMarca
     */
    'sitioWeb'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMarca
     */
    'paisOrigen'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMarca
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMarca
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMarca
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewMarca
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewMarca
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<Marketplace, \'id\'>, schemaOptions: { title: \'NewMarketplace\', exclude: [ \'id\' ] })
 * @export
 * @interface NewMarketplace
 */
export interface NewMarketplace {
    /**
     * 
     * @type {number}
     * @memberof NewMarketplace
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewMarketplace
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof NewMarketplace
     */
    'tipo': string;
    /**
     * 
     * @type {string}
     * @memberof NewMarketplace
     */
    'urlApi'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMarketplace
     */
    'credencialesApi'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMarketplace
     */
    'configuracion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMarketplace
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMarketplace
     */
    'ultimaSincronizacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMarketplace
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMarketplace
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewMarketplace
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewMarketplace
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<MensajePlantilla, \'id\'>, schemaOptions: { title: \'NewMensajePlantilla\', exclude: [ \'id\' ] })
 * @export
 * @interface NewMensajePlantilla
 */
export interface NewMensajePlantilla {
    /**
     * 
     * @type {number}
     * @memberof NewMensajePlantilla
     */
    'mensajePlantillaCategoriaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewMensajePlantilla
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewMensajePlantilla
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewMensajePlantilla
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMensajePlantilla
     */
    'textoCuerpo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMensajePlantilla
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMensajePlantilla
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewMensajePlantilla
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewMensajePlantilla
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<MensajePlantillaCategoria, \'id\'>, schemaOptions: { title: \'NewMensajePlantillaCategoria\', exclude: [ \'id\' ] })
 * @export
 * @interface NewMensajePlantillaCategoria
 */
export interface NewMensajePlantillaCategoria {
    /**
     * 
     * @type {number}
     * @memberof NewMensajePlantillaCategoria
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewMensajePlantillaCategoria
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMensajePlantillaCategoria
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMensajePlantillaCategoria
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewMensajePlantillaCategoria
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewMensajePlantillaCategoria
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<MensajeTipo, \'id\'>, schemaOptions: { title: \'NewMensajeTipo\', exclude: [ \'id\' ] })
 * @export
 * @interface NewMensajeTipo
 */
export interface NewMensajeTipo {
    /**
     * 
     * @type {number}
     * @memberof NewMensajeTipo
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewMensajeTipo
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMensajeTipo
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMensajeTipo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMensajeTipo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewMensajeTipo
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewMensajeTipo
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewMensajeTipo
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewMensajeTipo
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: Omit<Multimedia, \'id\'>, schemaOptions: { title: \'NewMultimedia\', exclude: [ \'id\' ] })
 * @export
 * @interface NewMultimedia
 */
export interface NewMultimedia {
    /**
     * 
     * @type {number}
     * @memberof NewMultimedia
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewMultimedia
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof NewMultimedia
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMultimedia
     */
    'tipo': string;
    /**
     * 
     * @type {string}
     * @memberof NewMultimedia
     */
    'formato'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMultimedia
     */
    'archivoOriginal': string;
    /**
     * 
     * @type {string}
     * @memberof NewMultimedia
     */
    'archivoThumbnail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMultimedia
     */
    'archivoMedio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMultimedia
     */
    'archivoGrande'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewMultimedia
     */
    'tamanoBytes'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewMultimedia
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMultimedia
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewMultimedia
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewMultimedia
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewMultimedia
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<Notificacion, \'id\'>, schemaOptions: { title: \'NewNotificacion\', exclude: [ \'id\' ] })
 * @export
 * @interface NewNotificacion
 */
export interface NewNotificacion {
    /**
     * 
     * @type {number}
     * @memberof NewNotificacion
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewNotificacion
     */
    'usuarioDestinatarioId': number;
    /**
     * 
     * @type {number}
     * @memberof NewNotificacion
     */
    'usuarioRemitenteId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewNotificacion
     */
    'titulo': string;
    /**
     * 
     * @type {string}
     * @memberof NewNotificacion
     */
    'mensaje': string;
    /**
     * 
     * @type {string}
     * @memberof NewNotificacion
     */
    'tipo': string;
    /**
     * 
     * @type {string}
     * @memberof NewNotificacion
     */
    'estado': string;
    /**
     * 
     * @type {string}
     * @memberof NewNotificacion
     */
    'fechaEnvio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewNotificacion
     */
    'fechaLectura'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewNotificacion
     */
    'referenciaTabla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewNotificacion
     */
    'referenciaId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewNotificacion
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewNotificacion
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewNotificacion
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewNotificacion
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewNotificacion
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<ParametroGlobal, \'id\'>, schemaOptions: { title: \'NewParametroGlobal\', exclude: [ \'id\' ] })
 * @export
 * @interface NewParametroGlobal
 */
export interface NewParametroGlobal {
    /**
     * 
     * @type {string}
     * @memberof NewParametroGlobal
     */
    'clave': string;
    /**
     * 
     * @type {string}
     * @memberof NewParametroGlobal
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewParametroGlobal
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewParametroGlobal
     */
    'tipoDato': string;
    /**
     * 
     * @type {string}
     * @memberof NewParametroGlobal
     */
    'modificable'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewParametroGlobal
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewParametroGlobal
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewParametroGlobal
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewParametroGlobal
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<Permiso, \'id\'>, schemaOptions: { title: \'NewPermiso\', exclude: [ \'id\' ] })
 * @export
 * @interface NewPermiso
 */
export interface NewPermiso {
    /**
     * 
     * @type {number}
     * @memberof NewPermiso
     */
    'rolId': number;
    /**
     * 
     * @type {string}
     * @memberof NewPermiso
     */
    'modulo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPermiso
     */
    'controlador'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPermiso
     */
    'accion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPermiso
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPermiso
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewPermiso
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewPermiso
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<PlantillaEmail, \'id\'>, schemaOptions: { title: \'NewPlantillaEmail\', exclude: [ \'id\' ] })
 * @export
 * @interface NewPlantillaEmail
 */
export interface NewPlantillaEmail {
    /**
     * 
     * @type {number}
     * @memberof NewPlantillaEmail
     */
    'idiomaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewPlantillaEmail
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewPlantillaEmail
     */
    'nombrePlantilla': string;
    /**
     * 
     * @type {string}
     * @memberof NewPlantillaEmail
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPlantillaEmail
     */
    'titulo'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof NewPlantillaEmail
     */
    'cuerpo'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof NewPlantillaEmail
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPlantillaEmail
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewPlantillaEmail
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewPlantillaEmail
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewPlantillaEmail
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewPlantillaEmail
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: Omit<Producto, \'id\'>, schemaOptions: { title: \'NewProducto\', exclude: [ \'id\' ] })
 * @export
 * @interface NewProducto
 */
export interface NewProducto {
    /**
     * 
     * @type {number}
     * @memberof NewProducto
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewProducto
     */
    'categoriaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewProducto
     */
    'marcaId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewProducto
     */
    'sku': string;
    /**
     * 
     * @type {string}
     * @memberof NewProducto
     */
    'ean'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProducto
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof NewProducto
     */
    'descripcionCorta'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProducto
     */
    'descripcionLarga'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProducto
     */
    'tituloSeo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProducto
     */
    'palabrasClave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProducto
     */
    'puntosClave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProducto
     */
    'estado': string;
    /**
     * 
     * @type {string}
     * @memberof NewProducto
     */
    'finalizadoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProducto
     */
    'imagenPrincipal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProducto
     */
    'ordenAtributos'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProducto
     */
    'dimensiones'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProducto
     */
    'color'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewProducto
     */
    'peso'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewProducto
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProducto
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProducto
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewProducto
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewProducto
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<ProductoAtributo, \'id\'>, schemaOptions: { title: \'NewProductoAtributo\', exclude: [ \'id\' ] })
 * @export
 * @interface NewProductoAtributo
 */
export interface NewProductoAtributo {
    /**
     * 
     * @type {number}
     * @memberof NewProductoAtributo
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof NewProductoAtributo
     */
    'atributoId': number;
    /**
     * 
     * @type {string}
     * @memberof NewProductoAtributo
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProductoAtributo
     */
    'unidad'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewProductoAtributo
     */
    'ordenEnGrupo'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewProductoAtributo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProductoAtributo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewProductoAtributo
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewProductoAtributo
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<ProductoCampoDinamico, \'id\'>, schemaOptions: { title: \'NewProductoCampoDinamico\', exclude: [ \'id\' ] })
 * @export
 * @interface NewProductoCampoDinamico
 */
export interface NewProductoCampoDinamico {
    /**
     * 
     * @type {number}
     * @memberof NewProductoCampoDinamico
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof NewProductoCampoDinamico
     */
    'campoDinamicoId': number;
    /**
     * 
     * @type {string}
     * @memberof NewProductoCampoDinamico
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProductoCampoDinamico
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProductoCampoDinamico
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewProductoCampoDinamico
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewProductoCampoDinamico
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<ProductoIcono, \'id\'>, schemaOptions: { title: \'NewProductoIcono\', exclude: [ \'id\' ] })
 * @export
 * @interface NewProductoIcono
 */
export interface NewProductoIcono {
    /**
     * 
     * @type {number}
     * @memberof NewProductoIcono
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof NewProductoIcono
     */
    'iconoId': number;
    /**
     * 
     * @type {string}
     * @memberof NewProductoIcono
     */
    'textoAsociado'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewProductoIcono
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewProductoIcono
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProductoIcono
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewProductoIcono
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewProductoIcono
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<ProductoMarketplace, \'id\'>, schemaOptions: { title: \'NewProductoMarketplace\', exclude: [ \'id\' ] })
 * @export
 * @interface NewProductoMarketplace
 */
export interface NewProductoMarketplace {
    /**
     * 
     * @type {number}
     * @memberof NewProductoMarketplace
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof NewProductoMarketplace
     */
    'marketplaceId': number;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMarketplace
     */
    'tituloPersonalizado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMarketplace
     */
    'descripcionPersonalizada'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMarketplace
     */
    'palabrasClavePersonalizadas'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMarketplace
     */
    'activoEnMarketplace'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMarketplace
     */
    'fechaUltimaSincronizacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMarketplace
     */
    'estadoSincronizacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMarketplace
     */
    'mensajeError'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMarketplace
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMarketplace
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewProductoMarketplace
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewProductoMarketplace
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<ProductoMultimedia, \'id\'>, schemaOptions: { title: \'NewProductoMultimedia\', exclude: [ \'id\' ] })
 * @export
 * @interface NewProductoMultimedia
 */
export interface NewProductoMultimedia {
    /**
     * 
     * @type {number}
     * @memberof NewProductoMultimedia
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof NewProductoMultimedia
     */
    'multimediaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMultimedia
     */
    'tipoUso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMultimedia
     */
    'esPrincipal'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewProductoMultimedia
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMultimedia
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMultimedia
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewProductoMultimedia
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewProductoMultimedia
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<RefrescarToken, \'id\'>, schemaOptions: { title: \'NewRefrescarToken\', exclude: [ \'id\' ] })
 * @export
 * @interface NewRefrescarToken
 */
export interface NewRefrescarToken {
    /**
     * 
     * @type {number}
     * @memberof NewRefrescarToken
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewRefrescarToken
     */
    'refreshToken'?: string | null;
}
/**
 * (tsType: Omit<Rol, \'id\'>, schemaOptions: { title: \'NewRol\', exclude: [ \'id\' ] })
 * @export
 * @interface NewRol
 */
export interface NewRol {
    /**
     * 
     * @type {number}
     * @memberof NewRol
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'muestraEmpresa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'dashboardUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewRol
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewRol
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewRol
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: Omit<Seccion, \'id\'>, schemaOptions: { title: \'NewSeccion\', exclude: [ \'id\' ] })
 * @export
 * @interface NewSeccion
 */
export interface NewSeccion {
    /**
     * 
     * @type {string}
     * @memberof NewSeccion
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewSeccion
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewSeccion
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewSeccion
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewSeccion
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<Tarea, \'id\'>, schemaOptions: { title: \'NewTarea\', exclude: [ \'id\' ] })
 * @export
 * @interface NewTarea
 */
export interface NewTarea {
    /**
     * 
     * @type {number}
     * @memberof NewTarea
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewTarea
     */
    'productoId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewTarea
     */
    'usuarioAsignadoId': number;
    /**
     * 
     * @type {string}
     * @memberof NewTarea
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof NewTarea
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTarea
     */
    'tipoTarea'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTarea
     */
    'estado': string;
    /**
     * 
     * @type {string}
     * @memberof NewTarea
     */
    'prioridad': string;
    /**
     * 
     * @type {string}
     * @memberof NewTarea
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTarea
     */
    'fechaFin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTarea
     */
    'fechaCompletada'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewTarea
     */
    'diasAviso'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewTarea
     */
    'tipoNotificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewTarea
     */
    'tareaDependienteId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewTarea
     */
    'notificacionesEnviadas'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewTarea
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTarea
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTarea
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewTarea
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewTarea
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<TipoArchivo, \'id\'>, schemaOptions: { title: \'NewTipoArchivo\', exclude: [ \'id\' ] })
 * @export
 * @interface NewTipoArchivo
 */
export interface NewTipoArchivo {
    /**
     * 
     * @type {number}
     * @memberof NewTipoArchivo
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewTipoArchivo
     */
    'seccionId': number;
    /**
     * 
     * @type {string}
     * @memberof NewTipoArchivo
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTipoArchivo
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewTipoArchivo
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewTipoArchivo
     */
    'multiple'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTipoArchivo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTipoArchivo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewTipoArchivo
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewTipoArchivo
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewTipoArchivo
     */
    'activoSn'?: string | null;
}
/**
 * (tsType: Omit<TipoUsuario, \'id\'>, schemaOptions: { title: \'NewTipoUsuario\', exclude: [ \'id\' ] })
 * @export
 * @interface NewTipoUsuario
 */
export interface NewTipoUsuario {
    /**
     * 
     * @type {string}
     * @memberof NewTipoUsuario
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTipoUsuario
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTipoUsuario
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewTipoUsuario
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewTipoUsuario
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<TipoUsuarioUsuario, \'id\'>, schemaOptions: { title: \'NewTipoUsuarioUsuario\', exclude: [ \'id\' ] })
 * @export
 * @interface NewTipoUsuarioUsuario
 */
export interface NewTipoUsuarioUsuario {
    /**
     * 
     * @type {number}
     * @memberof NewTipoUsuarioUsuario
     */
    'usuarioId'?: number;
    /**
     * 
     * @type {number}
     * @memberof NewTipoUsuarioUsuario
     */
    'tipoUsuarioId'?: number;
}
/**
 * (tsType: Omit<Traduccion, \'id\'>, schemaOptions: { title: \'NewTraduccion\', exclude: [ \'id\' ] })
 * @export
 * @interface NewTraduccion
 */
export interface NewTraduccion {
    /**
     * 
     * @type {number}
     * @memberof NewTraduccion
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccion
     */
    'clave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccion
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccion
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccion
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewTraduccion
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewTraduccion
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<TraduccionContenido, \'id\'>, schemaOptions: { title: \'NewTraduccionContenido\', exclude: [ \'id\' ] })
 * @export
 * @interface NewTraduccionContenido
 */
export interface NewTraduccionContenido {
    /**
     * 
     * @type {string}
     * @memberof NewTraduccionContenido
     */
    'tablaReferencia': string;
    /**
     * 
     * @type {number}
     * @memberof NewTraduccionContenido
     */
    'idReferencia': number;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccionContenido
     */
    'campo': string;
    /**
     * 
     * @type {number}
     * @memberof NewTraduccionContenido
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccionContenido
     */
    'valor': string;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccionContenido
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccionContenido
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewTraduccionContenido
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewTraduccionContenido
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<TraduccionLiteral, \'id\'>, schemaOptions: { title: \'NewTraduccionLiteral\', exclude: [ \'id\' ] })
 * @export
 * @interface NewTraduccionLiteral
 */
export interface NewTraduccionLiteral {
    /**
     * 
     * @type {string}
     * @memberof NewTraduccionLiteral
     */
    'clave': string;
    /**
     * 
     * @type {number}
     * @memberof NewTraduccionLiteral
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccionLiteral
     */
    'valor': string;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccionLiteral
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccionLiteral
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewTraduccionLiteral
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewTraduccionLiteral
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Omit<Usuario, \'id\'>, schemaOptions: { title: \'NewUsuario\', exclude: [ \'id\' ] })
 * @export
 * @interface NewUsuario
 */
export interface NewUsuario {
    /**
     * 
     * @type {number}
     * @memberof NewUsuario
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewUsuario
     */
    'rolId': number;
    /**
     * 
     * @type {number}
     * @memberof NewUsuario
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'mail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'telefono'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'avatar'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewUsuario
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewUsuario
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewUsuario
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: Omit<UsuarioCredenciales, \'id\'>, schemaOptions: { title: \'NewUsuarioCredenciales\', exclude: [ \'id\' ] })
 * @export
 * @interface NewUsuarioCredenciales
 */
export interface NewUsuarioCredenciales {
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioCredenciales
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof NewUsuarioCredenciales
     */
    'usuarioId'?: number;
}
/**
 * (tsType: Omit<UsuarioPasswordHistorico, \'id\'>, schemaOptions: { title: \'NewUsuarioPasswordHistorico\', exclude: [ \'id\' ] })
 * @export
 * @interface NewUsuarioPasswordHistorico
 */
export interface NewUsuarioPasswordHistorico {
    /**
     * 
     * @type {number}
     * @memberof NewUsuarioPasswordHistorico
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioPasswordHistorico
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioPasswordHistorico
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioPasswordHistorico
     */
    'fechaFin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioPasswordHistorico
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioPasswordHistorico
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewUsuarioPasswordHistorico
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewUsuarioPasswordHistorico
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Notificacion
 */
export interface Notificacion {
    /**
     * 
     * @type {number}
     * @memberof Notificacion
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Notificacion
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof Notificacion
     */
    'usuarioDestinatarioId': number;
    /**
     * 
     * @type {number}
     * @memberof Notificacion
     */
    'usuarioRemitenteId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Notificacion
     */
    'titulo': string;
    /**
     * 
     * @type {string}
     * @memberof Notificacion
     */
    'mensaje': string;
    /**
     * 
     * @type {string}
     * @memberof Notificacion
     */
    'tipo': string;
    /**
     * 
     * @type {string}
     * @memberof Notificacion
     */
    'estado': string;
    /**
     * 
     * @type {string}
     * @memberof Notificacion
     */
    'fechaEnvio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Notificacion
     */
    'fechaLectura'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Notificacion
     */
    'referenciaTabla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Notificacion
     */
    'referenciaId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Notificacion
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Notificacion
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Notificacion
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Notificacion
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Notificacion
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface NotificacionFilter
 */
export interface NotificacionFilter {
    /**
     * 
     * @type {number}
     * @memberof NotificacionFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificacionFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificacionFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof NotificacionFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof NotificacionFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface NotificacionFilter1
 */
export interface NotificacionFilter1 {
    /**
     * 
     * @type {number}
     * @memberof NotificacionFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificacionFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificacionFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof NotificacionFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof NotificacionFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof NotificacionFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Notificacion>, schemaOptions: { partial: true })
 * @export
 * @interface NotificacionPartial
 */
export interface NotificacionPartial {
    /**
     * 
     * @type {number}
     * @memberof NotificacionPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificacionPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificacionPartial
     */
    'usuarioDestinatarioId'?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificacionPartial
     */
    'usuarioRemitenteId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NotificacionPartial
     */
    'titulo'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificacionPartial
     */
    'mensaje'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificacionPartial
     */
    'tipo'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificacionPartial
     */
    'estado'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificacionPartial
     */
    'fechaEnvio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NotificacionPartial
     */
    'fechaLectura'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NotificacionPartial
     */
    'referenciaTabla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NotificacionPartial
     */
    'referenciaId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NotificacionPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NotificacionPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NotificacionPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NotificacionPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificacionPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: NotificacionWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface NotificacionWithRelations
 */
export interface NotificacionWithRelations {
    /**
     * 
     * @type {number}
     * @memberof NotificacionWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificacionWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NotificacionWithRelations
     */
    'usuarioDestinatarioId': number;
    /**
     * 
     * @type {number}
     * @memberof NotificacionWithRelations
     */
    'usuarioRemitenteId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NotificacionWithRelations
     */
    'titulo': string;
    /**
     * 
     * @type {string}
     * @memberof NotificacionWithRelations
     */
    'mensaje': string;
    /**
     * 
     * @type {string}
     * @memberof NotificacionWithRelations
     */
    'tipo': string;
    /**
     * 
     * @type {string}
     * @memberof NotificacionWithRelations
     */
    'estado': string;
    /**
     * 
     * @type {string}
     * @memberof NotificacionWithRelations
     */
    'fechaEnvio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NotificacionWithRelations
     */
    'fechaLectura'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NotificacionWithRelations
     */
    'referenciaTabla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NotificacionWithRelations
     */
    'referenciaId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NotificacionWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NotificacionWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NotificacionWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NotificacionWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NotificacionWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface ParametroGlobal
 */
export interface ParametroGlobal {
    /**
     * 
     * @type {number}
     * @memberof ParametroGlobal
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobal
     */
    'clave': string;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobal
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobal
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobal
     */
    'tipoDato': string;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobal
     */
    'modificable'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobal
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobal
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ParametroGlobal
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof ParametroGlobal
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface ParametroGlobalFilter
 */
export interface ParametroGlobalFilter {
    /**
     * 
     * @type {number}
     * @memberof ParametroGlobalFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParametroGlobalFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParametroGlobalFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ParametroGlobalFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ParametroGlobalFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ParametroGlobalFilter1
 */
export interface ParametroGlobalFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ParametroGlobalFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParametroGlobalFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParametroGlobalFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ParametroGlobalFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ParametroGlobalFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ParametroGlobalFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<ParametroGlobal>, schemaOptions: { partial: true })
 * @export
 * @interface ParametroGlobalPartial
 */
export interface ParametroGlobalPartial {
    /**
     * 
     * @type {number}
     * @memberof ParametroGlobalPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobalPartial
     */
    'clave'?: string;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobalPartial
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobalPartial
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobalPartial
     */
    'tipoDato'?: string;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobalPartial
     */
    'modificable'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobalPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobalPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ParametroGlobalPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParametroGlobalPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: ParametroGlobalWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ParametroGlobalWithRelations
 */
export interface ParametroGlobalWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ParametroGlobalWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobalWithRelations
     */
    'clave': string;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobalWithRelations
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobalWithRelations
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobalWithRelations
     */
    'tipoDato': string;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobalWithRelations
     */
    'modificable'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobalWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametroGlobalWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ParametroGlobalWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof ParametroGlobalWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Permiso
 */
export interface Permiso {
    /**
     * 
     * @type {number}
     * @memberof Permiso
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Permiso
     */
    'rolId': number;
    /**
     * 
     * @type {string}
     * @memberof Permiso
     */
    'modulo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Permiso
     */
    'controlador'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Permiso
     */
    'accion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Permiso
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Permiso
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Permiso
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Permiso
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface PermisoFilter
 */
export interface PermisoFilter {
    /**
     * 
     * @type {number}
     * @memberof PermisoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PermisoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PermisoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface PermisoFilter1
 */
export interface PermisoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof PermisoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PermisoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PermisoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PermisoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Permiso>, schemaOptions: { partial: true })
 * @export
 * @interface PermisoPartial
 */
export interface PermisoPartial {
    /**
     * 
     * @type {number}
     * @memberof PermisoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoPartial
     */
    'rolId'?: number;
    /**
     * 
     * @type {string}
     * @memberof PermisoPartial
     */
    'modulo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoPartial
     */
    'controlador'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoPartial
     */
    'accion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PermisoPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: PermisoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface PermisoWithRelations
 */
export interface PermisoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof PermisoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoWithRelations
     */
    'rolId': number;
    /**
     * 
     * @type {string}
     * @memberof PermisoWithRelations
     */
    'modulo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoWithRelations
     */
    'controlador'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoWithRelations
     */
    'accion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PermisoWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof PermisoWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface PingResponse
 */
export interface PingResponse {
    /**
     * 
     * @type {string}
     * @memberof PingResponse
     */
    'greeting'?: string;
    /**
     * 
     * @type {string}
     * @memberof PingResponse
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof PingResponse
     */
    'url'?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PingResponse
     */
    'headers'?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface PlantillaEmail
 */
export interface PlantillaEmail {
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmail
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmail
     */
    'idiomaId': number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmail
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmail
     */
    'nombrePlantilla': string;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmail
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmail
     */
    'titulo'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof PlantillaEmail
     */
    'cuerpo'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmail
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmail
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmail
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmail
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmail
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmail
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface PlantillaEmailFilter
 */
export interface PlantillaEmailFilter {
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PlantillaEmailFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PlantillaEmailFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface PlantillaEmailFilter1
 */
export interface PlantillaEmailFilter1 {
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PlantillaEmailFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PlantillaEmailFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PlantillaEmailFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<PlantillaEmail>, schemaOptions: { partial: true })
 * @export
 * @interface PlantillaEmailPartial
 */
export interface PlantillaEmailPartial {
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailPartial
     */
    'idiomaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailPartial
     */
    'nombrePlantilla'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailPartial
     */
    'titulo'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof PlantillaEmailPartial
     */
    'cuerpo'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailPartial
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailPartial
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: PlantillaEmailWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface PlantillaEmailWithRelations
 */
export interface PlantillaEmailWithRelations {
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailWithRelations
     */
    'idiomaId': number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailWithRelations
     */
    'nombrePlantilla': string;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailWithRelations
     */
    'titulo'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof PlantillaEmailWithRelations
     */
    'cuerpo'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailWithRelations
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailWithRelations
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface Producto
 */
export interface Producto {
    /**
     * 
     * @type {number}
     * @memberof Producto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Producto
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof Producto
     */
    'categoriaId': number;
    /**
     * 
     * @type {number}
     * @memberof Producto
     */
    'marcaId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Producto
     */
    'sku': string;
    /**
     * 
     * @type {string}
     * @memberof Producto
     */
    'ean'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Producto
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof Producto
     */
    'descripcionCorta'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Producto
     */
    'descripcionLarga'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Producto
     */
    'tituloSeo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Producto
     */
    'palabrasClave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Producto
     */
    'puntosClave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Producto
     */
    'estado': string;
    /**
     * 
     * @type {string}
     * @memberof Producto
     */
    'finalizadoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Producto
     */
    'imagenPrincipal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Producto
     */
    'ordenAtributos'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Producto
     */
    'dimensiones'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Producto
     */
    'color'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Producto
     */
    'peso'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Producto
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Producto
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Producto
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Producto
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Producto
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface ProductoAtributo
 */
export interface ProductoAtributo {
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributo
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributo
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributo
     */
    'atributoId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributo
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributo
     */
    'unidad'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributo
     */
    'ordenEnGrupo'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributo
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributo
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface ProductoAtributoFilter
 */
export interface ProductoAtributoFilter {
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductoAtributoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductoAtributoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ProductoAtributoFilter1
 */
export interface ProductoAtributoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductoAtributoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ProductoAtributoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductoAtributoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<ProductoAtributo>, schemaOptions: { partial: true })
 * @export
 * @interface ProductoAtributoPartial
 */
export interface ProductoAtributoPartial {
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributoPartial
     */
    'productoId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributoPartial
     */
    'atributoId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributoPartial
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributoPartial
     */
    'unidad'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributoPartial
     */
    'ordenEnGrupo'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributoPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributoPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: ProductoAtributoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ProductoAtributoWithRelations
 */
export interface ProductoAtributoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributoWithRelations
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributoWithRelations
     */
    'atributoId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributoWithRelations
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributoWithRelations
     */
    'unidad'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributoWithRelations
     */
    'ordenEnGrupo'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributoWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributoWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface ProductoCampoDinamico
 */
export interface ProductoCampoDinamico {
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamico
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamico
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamico
     */
    'campoDinamicoId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductoCampoDinamico
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoCampoDinamico
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoCampoDinamico
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamico
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamico
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface ProductoCampoDinamicoFilter
 */
export interface ProductoCampoDinamicoFilter {
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamicoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamicoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamicoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductoCampoDinamicoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductoCampoDinamicoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ProductoCampoDinamicoFilter1
 */
export interface ProductoCampoDinamicoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamicoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamicoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamicoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductoCampoDinamicoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ProductoCampoDinamicoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductoCampoDinamicoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<ProductoCampoDinamico>, schemaOptions: { partial: true })
 * @export
 * @interface ProductoCampoDinamicoPartial
 */
export interface ProductoCampoDinamicoPartial {
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamicoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamicoPartial
     */
    'productoId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamicoPartial
     */
    'campoDinamicoId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductoCampoDinamicoPartial
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoCampoDinamicoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoCampoDinamicoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamicoPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamicoPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: ProductoCampoDinamicoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ProductoCampoDinamicoWithRelations
 */
export interface ProductoCampoDinamicoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamicoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamicoWithRelations
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamicoWithRelations
     */
    'campoDinamicoId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductoCampoDinamicoWithRelations
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoCampoDinamicoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoCampoDinamicoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamicoWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoCampoDinamicoWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface ProductoFilter
 */
export interface ProductoFilter {
    /**
     * 
     * @type {number}
     * @memberof ProductoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ProductoFilter1
 */
export interface ProductoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ProductoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ProductoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ProductoIcono
 */
export interface ProductoIcono {
    /**
     * 
     * @type {number}
     * @memberof ProductoIcono
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoIcono
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoIcono
     */
    'iconoId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductoIcono
     */
    'textoAsociado'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoIcono
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoIcono
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoIcono
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoIcono
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoIcono
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface ProductoIconoFilter
 */
export interface ProductoIconoFilter {
    /**
     * 
     * @type {number}
     * @memberof ProductoIconoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoIconoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoIconoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductoIconoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductoIconoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ProductoIconoFilter1
 */
export interface ProductoIconoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ProductoIconoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoIconoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoIconoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductoIconoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ProductoIconoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductoIconoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<ProductoIcono>, schemaOptions: { partial: true })
 * @export
 * @interface ProductoIconoPartial
 */
export interface ProductoIconoPartial {
    /**
     * 
     * @type {number}
     * @memberof ProductoIconoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoIconoPartial
     */
    'productoId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoIconoPartial
     */
    'iconoId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductoIconoPartial
     */
    'textoAsociado'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoIconoPartial
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoIconoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoIconoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoIconoPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoIconoPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: ProductoIconoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ProductoIconoWithRelations
 */
export interface ProductoIconoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ProductoIconoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoIconoWithRelations
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoIconoWithRelations
     */
    'iconoId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductoIconoWithRelations
     */
    'textoAsociado'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoIconoWithRelations
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoIconoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoIconoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoIconoWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoIconoWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface ProductoMarketplace
 */
export interface ProductoMarketplace {
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplace
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplace
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplace
     */
    'marketplaceId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplace
     */
    'tituloPersonalizado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplace
     */
    'descripcionPersonalizada'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplace
     */
    'palabrasClavePersonalizadas'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplace
     */
    'activoEnMarketplace'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplace
     */
    'fechaUltimaSincronizacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplace
     */
    'estadoSincronizacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplace
     */
    'mensajeError'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplace
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplace
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplace
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplace
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface ProductoMarketplaceFilter
 */
export interface ProductoMarketplaceFilter {
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplaceFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplaceFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplaceFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductoMarketplaceFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductoMarketplaceFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ProductoMarketplaceFilter1
 */
export interface ProductoMarketplaceFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplaceFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplaceFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplaceFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductoMarketplaceFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ProductoMarketplaceFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductoMarketplaceFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<ProductoMarketplace>, schemaOptions: { partial: true })
 * @export
 * @interface ProductoMarketplacePartial
 */
export interface ProductoMarketplacePartial {
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplacePartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplacePartial
     */
    'productoId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplacePartial
     */
    'marketplaceId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplacePartial
     */
    'tituloPersonalizado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplacePartial
     */
    'descripcionPersonalizada'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplacePartial
     */
    'palabrasClavePersonalizadas'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplacePartial
     */
    'activoEnMarketplace'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplacePartial
     */
    'fechaUltimaSincronizacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplacePartial
     */
    'estadoSincronizacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplacePartial
     */
    'mensajeError'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplacePartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplacePartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplacePartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplacePartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: ProductoMarketplaceWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ProductoMarketplaceWithRelations
 */
export interface ProductoMarketplaceWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplaceWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplaceWithRelations
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplaceWithRelations
     */
    'marketplaceId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplaceWithRelations
     */
    'tituloPersonalizado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplaceWithRelations
     */
    'descripcionPersonalizada'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplaceWithRelations
     */
    'palabrasClavePersonalizadas'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplaceWithRelations
     */
    'activoEnMarketplace'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplaceWithRelations
     */
    'fechaUltimaSincronizacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplaceWithRelations
     */
    'estadoSincronizacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplaceWithRelations
     */
    'mensajeError'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplaceWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMarketplaceWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplaceWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMarketplaceWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface ProductoMultimedia
 */
export interface ProductoMultimedia {
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimedia
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimedia
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimedia
     */
    'multimediaId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimedia
     */
    'tipoUso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimedia
     */
    'esPrincipal'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimedia
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimedia
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimedia
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimedia
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimedia
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface ProductoMultimediaFilter
 */
export interface ProductoMultimediaFilter {
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductoMultimediaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductoMultimediaFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ProductoMultimediaFilter1
 */
export interface ProductoMultimediaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductoMultimediaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ProductoMultimediaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductoMultimediaFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<ProductoMultimedia>, schemaOptions: { partial: true })
 * @export
 * @interface ProductoMultimediaPartial
 */
export interface ProductoMultimediaPartial {
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaPartial
     */
    'productoId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaPartial
     */
    'multimediaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaPartial
     */
    'tipoUso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaPartial
     */
    'esPrincipal'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaPartial
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: ProductoMultimediaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ProductoMultimediaWithRelations
 */
export interface ProductoMultimediaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaWithRelations
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaWithRelations
     */
    'multimediaId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaWithRelations
     */
    'tipoUso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaWithRelations
     */
    'esPrincipal'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaWithRelations
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Partial<Producto>, schemaOptions: { partial: true })
 * @export
 * @interface ProductoPartial
 */
export interface ProductoPartial {
    /**
     * 
     * @type {number}
     * @memberof ProductoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoPartial
     */
    'categoriaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoPartial
     */
    'marcaId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoPartial
     */
    'sku'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoPartial
     */
    'ean'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoPartial
     */
    'descripcionCorta'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoPartial
     */
    'descripcionLarga'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoPartial
     */
    'tituloSeo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoPartial
     */
    'palabrasClave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoPartial
     */
    'puntosClave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoPartial
     */
    'estado'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoPartial
     */
    'finalizadoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoPartial
     */
    'imagenPrincipal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoPartial
     */
    'ordenAtributos'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoPartial
     */
    'dimensiones'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoPartial
     */
    'color'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoPartial
     */
    'peso'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: ProductoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ProductoWithRelations
 */
export interface ProductoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ProductoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoWithRelations
     */
    'categoriaId': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoWithRelations
     */
    'marcaId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoWithRelations
     */
    'sku': string;
    /**
     * 
     * @type {string}
     * @memberof ProductoWithRelations
     */
    'ean'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoWithRelations
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof ProductoWithRelations
     */
    'descripcionCorta'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoWithRelations
     */
    'descripcionLarga'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoWithRelations
     */
    'tituloSeo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoWithRelations
     */
    'palabrasClave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoWithRelations
     */
    'puntosClave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoWithRelations
     */
    'estado': string;
    /**
     * 
     * @type {string}
     * @memberof ProductoWithRelations
     */
    'finalizadoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoWithRelations
     */
    'imagenPrincipal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoWithRelations
     */
    'ordenAtributos'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoWithRelations
     */
    'dimensiones'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoWithRelations
     */
    'color'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoWithRelations
     */
    'peso'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductoWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface RefrescarToken
 */
export interface RefrescarToken {
    /**
     * 
     * @type {number}
     * @memberof RefrescarToken
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarToken
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof RefrescarToken
     */
    'refreshToken'?: string | null;
}
/**
 * 
 * @export
 * @interface RefrescarTokenFilter
 */
export interface RefrescarTokenFilter {
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof RefrescarTokenFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof RefrescarTokenFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface RefrescarTokenFilter1
 */
export interface RefrescarTokenFilter1 {
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof RefrescarTokenFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof RefrescarTokenFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof RefrescarTokenFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<RefrescarToken>, schemaOptions: { partial: true })
 * @export
 * @interface RefrescarTokenPartial
 */
export interface RefrescarTokenPartial {
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenPartial
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof RefrescarTokenPartial
     */
    'refreshToken'?: string | null;
}
/**
 * (tsType: RefrescarTokenWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface RefrescarTokenWithRelations
 */
export interface RefrescarTokenWithRelations {
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenWithRelations
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof RefrescarTokenWithRelations
     */
    'refreshToken'?: string | null;
}
/**
 * 
 * @export
 * @interface Rol
 */
export interface Rol {
    /**
     * 
     * @type {number}
     * @memberof Rol
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Rol
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'muestraEmpresa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'dashboardUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Rol
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Rol
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Rol
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface RolFilter
 */
export interface RolFilter {
    /**
     * 
     * @type {number}
     * @memberof RolFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof RolFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof RolFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface RolFilter1
 */
export interface RolFilter1 {
    /**
     * 
     * @type {number}
     * @memberof RolFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof RolFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof RolFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof RolFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Rol>, schemaOptions: { partial: true })
 * @export
 * @interface RolPartial
 */
export interface RolPartial {
    /**
     * 
     * @type {number}
     * @memberof RolPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'muestraEmpresa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'dashboardUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RolPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RolPartial
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: RolWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface RolWithRelations
 */
export interface RolWithRelations {
    /**
     * 
     * @type {number}
     * @memberof RolWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'muestraEmpresa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'dashboardUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RolWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof RolWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RolWithRelations
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface Seccion
 */
export interface Seccion {
    /**
     * 
     * @type {number}
     * @memberof Seccion
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Seccion
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Seccion
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Seccion
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Seccion
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Seccion
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface SeccionFilter
 */
export interface SeccionFilter {
    /**
     * 
     * @type {number}
     * @memberof SeccionFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeccionFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeccionFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof SeccionFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof SeccionFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface SeccionFilter1
 */
export interface SeccionFilter1 {
    /**
     * 
     * @type {number}
     * @memberof SeccionFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeccionFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeccionFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof SeccionFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof SeccionFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof SeccionFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Seccion>, schemaOptions: { partial: true })
 * @export
 * @interface SeccionPartial
 */
export interface SeccionPartial {
    /**
     * 
     * @type {number}
     * @memberof SeccionPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SeccionPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SeccionPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SeccionPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SeccionPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeccionPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: SeccionWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface SeccionWithRelations
 */
export interface SeccionWithRelations {
    /**
     * 
     * @type {number}
     * @memberof SeccionWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SeccionWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SeccionWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SeccionWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SeccionWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof SeccionWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Tarea
 */
export interface Tarea {
    /**
     * 
     * @type {number}
     * @memberof Tarea
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Tarea
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof Tarea
     */
    'productoId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Tarea
     */
    'usuarioAsignadoId': number;
    /**
     * 
     * @type {string}
     * @memberof Tarea
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof Tarea
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Tarea
     */
    'tipoTarea'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Tarea
     */
    'estado': string;
    /**
     * 
     * @type {string}
     * @memberof Tarea
     */
    'prioridad': string;
    /**
     * 
     * @type {string}
     * @memberof Tarea
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Tarea
     */
    'fechaFin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Tarea
     */
    'fechaCompletada'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Tarea
     */
    'diasAviso'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Tarea
     */
    'tipoNotificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Tarea
     */
    'tareaDependienteId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Tarea
     */
    'notificacionesEnviadas'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Tarea
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Tarea
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Tarea
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Tarea
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Tarea
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface TareaFilter
 */
export interface TareaFilter {
    /**
     * 
     * @type {number}
     * @memberof TareaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TareaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TareaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TareaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TareaFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface TareaFilter1
 */
export interface TareaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof TareaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TareaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TareaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TareaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof TareaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TareaFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Tarea>, schemaOptions: { partial: true })
 * @export
 * @interface TareaPartial
 */
export interface TareaPartial {
    /**
     * 
     * @type {number}
     * @memberof TareaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TareaPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof TareaPartial
     */
    'productoId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TareaPartial
     */
    'usuarioAsignadoId'?: number;
    /**
     * 
     * @type {string}
     * @memberof TareaPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof TareaPartial
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TareaPartial
     */
    'tipoTarea'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TareaPartial
     */
    'estado'?: string;
    /**
     * 
     * @type {string}
     * @memberof TareaPartial
     */
    'prioridad'?: string;
    /**
     * 
     * @type {string}
     * @memberof TareaPartial
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TareaPartial
     */
    'fechaFin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TareaPartial
     */
    'fechaCompletada'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TareaPartial
     */
    'diasAviso'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TareaPartial
     */
    'tipoNotificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TareaPartial
     */
    'tareaDependienteId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TareaPartial
     */
    'notificacionesEnviadas'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TareaPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TareaPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TareaPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TareaPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof TareaPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: TareaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface TareaWithRelations
 */
export interface TareaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof TareaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TareaWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof TareaWithRelations
     */
    'productoId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TareaWithRelations
     */
    'usuarioAsignadoId': number;
    /**
     * 
     * @type {string}
     * @memberof TareaWithRelations
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof TareaWithRelations
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TareaWithRelations
     */
    'tipoTarea'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TareaWithRelations
     */
    'estado': string;
    /**
     * 
     * @type {string}
     * @memberof TareaWithRelations
     */
    'prioridad': string;
    /**
     * 
     * @type {string}
     * @memberof TareaWithRelations
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TareaWithRelations
     */
    'fechaFin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TareaWithRelations
     */
    'fechaCompletada'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TareaWithRelations
     */
    'diasAviso'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TareaWithRelations
     */
    'tipoNotificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TareaWithRelations
     */
    'tareaDependienteId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TareaWithRelations
     */
    'notificacionesEnviadas'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TareaWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TareaWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TareaWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TareaWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof TareaWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface TipoArchivo
 */
export interface TipoArchivo {
    /**
     * 
     * @type {number}
     * @memberof TipoArchivo
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivo
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivo
     */
    'seccionId': number;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivo
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivo
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivo
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivo
     */
    'multiple'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivo
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivo
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivo
     */
    'activoSn'?: string | null;
}
/**
 * 
 * @export
 * @interface TipoArchivoFilter
 */
export interface TipoArchivoFilter {
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TipoArchivoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TipoArchivoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface TipoArchivoFilter1
 */
export interface TipoArchivoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TipoArchivoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof TipoArchivoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TipoArchivoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<TipoArchivo>, schemaOptions: { partial: true })
 * @export
 * @interface TipoArchivoPartial
 */
export interface TipoArchivoPartial {
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoPartial
     */
    'seccionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoPartial
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoPartial
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoPartial
     */
    'multiple'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoPartial
     */
    'activoSn'?: string | null;
}
/**
 * (tsType: TipoArchivoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface TipoArchivoWithRelations
 */
export interface TipoArchivoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoWithRelations
     */
    'seccionId': number;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoWithRelations
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoWithRelations
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoWithRelations
     */
    'multiple'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoWithRelations
     */
    'activoSn'?: string | null;
}
/**
 * 
 * @export
 * @interface TipoUsuario
 */
export interface TipoUsuario {
    /**
     * 
     * @type {number}
     * @memberof TipoUsuario
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TipoUsuario
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoUsuario
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoUsuario
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuario
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuario
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface TipoUsuarioFilter
 */
export interface TipoUsuarioFilter {
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TipoUsuarioFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TipoUsuarioFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface TipoUsuarioFilter1
 */
export interface TipoUsuarioFilter1 {
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TipoUsuarioFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof TipoUsuarioFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TipoUsuarioFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<TipoUsuario>, schemaOptions: { partial: true })
 * @export
 * @interface TipoUsuarioPartial
 */
export interface TipoUsuarioPartial {
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TipoUsuarioPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoUsuarioPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoUsuarioPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface TipoUsuarioUsuario
 */
export interface TipoUsuarioUsuario {
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioUsuario
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioUsuario
     */
    'usuarioId'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioUsuario
     */
    'tipoUsuarioId'?: number;
}
/**
 * 
 * @export
 * @interface TipoUsuarioUsuarioFilter
 */
export interface TipoUsuarioUsuarioFilter {
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioUsuarioFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioUsuarioFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioUsuarioFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TipoUsuarioUsuarioFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TipoUsuarioUsuarioFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface TipoUsuarioUsuarioFilter1
 */
export interface TipoUsuarioUsuarioFilter1 {
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioUsuarioFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioUsuarioFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioUsuarioFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TipoUsuarioUsuarioFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof TipoUsuarioUsuarioFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TipoUsuarioUsuarioFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<TipoUsuarioUsuario>, schemaOptions: { partial: true })
 * @export
 * @interface TipoUsuarioUsuarioPartial
 */
export interface TipoUsuarioUsuarioPartial {
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioUsuarioPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioUsuarioPartial
     */
    'usuarioId'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioUsuarioPartial
     */
    'tipoUsuarioId'?: number;
}
/**
 * (tsType: TipoUsuarioUsuarioWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface TipoUsuarioUsuarioWithRelations
 */
export interface TipoUsuarioUsuarioWithRelations {
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioUsuarioWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioUsuarioWithRelations
     */
    'usuarioId'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioUsuarioWithRelations
     */
    'tipoUsuarioId'?: number;
}
/**
 * (tsType: TipoUsuarioWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface TipoUsuarioWithRelations
 */
export interface TipoUsuarioWithRelations {
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TipoUsuarioWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoUsuarioWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoUsuarioWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof TipoUsuarioWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Traduccion
 */
export interface Traduccion {
    /**
     * 
     * @type {number}
     * @memberof Traduccion
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Traduccion
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof Traduccion
     */
    'clave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Traduccion
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Traduccion
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Traduccion
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Traduccion
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Traduccion
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface TraduccionContenido
 */
export interface TraduccionContenido {
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenido
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionContenido
     */
    'tablaReferencia': string;
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenido
     */
    'idReferencia': number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionContenido
     */
    'campo': string;
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenido
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionContenido
     */
    'valor': string;
    /**
     * 
     * @type {string}
     * @memberof TraduccionContenido
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionContenido
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenido
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenido
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface TraduccionContenidoFilter
 */
export interface TraduccionContenidoFilter {
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenidoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenidoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenidoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TraduccionContenidoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TraduccionContenidoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface TraduccionContenidoFilter1
 */
export interface TraduccionContenidoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenidoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenidoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenidoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TraduccionContenidoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof TraduccionContenidoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TraduccionContenidoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<TraduccionContenido>, schemaOptions: { partial: true })
 * @export
 * @interface TraduccionContenidoPartial
 */
export interface TraduccionContenidoPartial {
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenidoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionContenidoPartial
     */
    'tablaReferencia'?: string;
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenidoPartial
     */
    'idReferencia'?: number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionContenidoPartial
     */
    'campo'?: string;
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenidoPartial
     */
    'idiomaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionContenidoPartial
     */
    'valor'?: string;
    /**
     * 
     * @type {string}
     * @memberof TraduccionContenidoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionContenidoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenidoPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenidoPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: TraduccionContenidoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface TraduccionContenidoWithRelations
 */
export interface TraduccionContenidoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenidoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionContenidoWithRelations
     */
    'tablaReferencia': string;
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenidoWithRelations
     */
    'idReferencia': number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionContenidoWithRelations
     */
    'campo': string;
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenidoWithRelations
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionContenidoWithRelations
     */
    'valor': string;
    /**
     * 
     * @type {string}
     * @memberof TraduccionContenidoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionContenidoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenidoWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionContenidoWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface TraduccionFilter
 */
export interface TraduccionFilter {
    /**
     * 
     * @type {number}
     * @memberof TraduccionFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TraduccionFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TraduccionFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface TraduccionFilter1
 */
export interface TraduccionFilter1 {
    /**
     * 
     * @type {number}
     * @memberof TraduccionFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TraduccionFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof TraduccionFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TraduccionFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface TraduccionLiteral
 */
export interface TraduccionLiteral {
    /**
     * 
     * @type {number}
     * @memberof TraduccionLiteral
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionLiteral
     */
    'clave': string;
    /**
     * 
     * @type {number}
     * @memberof TraduccionLiteral
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionLiteral
     */
    'valor': string;
    /**
     * 
     * @type {string}
     * @memberof TraduccionLiteral
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionLiteral
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TraduccionLiteral
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionLiteral
     */
    'usuarioModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface TraduccionLiteralFilter
 */
export interface TraduccionLiteralFilter {
    /**
     * 
     * @type {number}
     * @memberof TraduccionLiteralFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionLiteralFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionLiteralFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TraduccionLiteralFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TraduccionLiteralFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface TraduccionLiteralFilter1
 */
export interface TraduccionLiteralFilter1 {
    /**
     * 
     * @type {number}
     * @memberof TraduccionLiteralFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionLiteralFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionLiteralFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TraduccionLiteralFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof TraduccionLiteralFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TraduccionLiteralFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<TraduccionLiteral>, schemaOptions: { partial: true })
 * @export
 * @interface TraduccionLiteralPartial
 */
export interface TraduccionLiteralPartial {
    /**
     * 
     * @type {number}
     * @memberof TraduccionLiteralPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionLiteralPartial
     */
    'clave'?: string;
    /**
     * 
     * @type {number}
     * @memberof TraduccionLiteralPartial
     */
    'idiomaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionLiteralPartial
     */
    'valor'?: string;
    /**
     * 
     * @type {string}
     * @memberof TraduccionLiteralPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionLiteralPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TraduccionLiteralPartial
     */
    'usuarioCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionLiteralPartial
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: TraduccionLiteralWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface TraduccionLiteralWithRelations
 */
export interface TraduccionLiteralWithRelations {
    /**
     * 
     * @type {number}
     * @memberof TraduccionLiteralWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionLiteralWithRelations
     */
    'clave': string;
    /**
     * 
     * @type {number}
     * @memberof TraduccionLiteralWithRelations
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionLiteralWithRelations
     */
    'valor': string;
    /**
     * 
     * @type {string}
     * @memberof TraduccionLiteralWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionLiteralWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TraduccionLiteralWithRelations
     */
    'usuarioCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionLiteralWithRelations
     */
    'usuarioModificacion'?: number | null;
}
/**
 * (tsType: Partial<Traduccion>, schemaOptions: { partial: true })
 * @export
 * @interface TraduccionPartial
 */
export interface TraduccionPartial {
    /**
     * 
     * @type {number}
     * @memberof TraduccionPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionPartial
     */
    'idiomaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionPartial
     */
    'clave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionPartial
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TraduccionPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: TraduccionWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface TraduccionWithRelations
 */
export interface TraduccionWithRelations {
    /**
     * 
     * @type {number}
     * @memberof TraduccionWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionWithRelations
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionWithRelations
     */
    'clave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionWithRelations
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TraduccionWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Usuario
 */
export interface Usuario {
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'rolId': number;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'mail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'telefono'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'avatar'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface UsuarioCredenciales
 */
export interface UsuarioCredenciales {
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredenciales
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioCredenciales
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredenciales
     */
    'usuarioId'?: number;
}
/**
 * 
 * @export
 * @interface UsuarioCredencialesFilter
 */
export interface UsuarioCredencialesFilter {
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioCredencialesFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioCredencialesFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface UsuarioCredencialesFilter1
 */
export interface UsuarioCredencialesFilter1 {
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioCredencialesFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof UsuarioCredencialesFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioCredencialesFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<UsuarioCredenciales>, schemaOptions: { partial: true })
 * @export
 * @interface UsuarioCredencialesPartial
 */
export interface UsuarioCredencialesPartial {
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioCredencialesPartial
     */
    'password'?: string;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesPartial
     */
    'usuarioId'?: number;
}
/**
 * (tsType: UsuarioCredencialesWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface UsuarioCredencialesWithRelations
 */
export interface UsuarioCredencialesWithRelations {
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioCredencialesWithRelations
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesWithRelations
     */
    'usuarioId'?: number;
}
/**
 * 
 * @export
 * @interface UsuarioFilter
 */
export interface UsuarioFilter {
    /**
     * 
     * @type {number}
     * @memberof UsuarioFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioFilter
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<UsuarioIncludeFilterItems | string>}
     * @memberof UsuarioFilter
     */
    'include'?: Array<UsuarioIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface UsuarioFilter1
 */
export interface UsuarioFilter1 {
    /**
     * 
     * @type {number}
     * @memberof UsuarioFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof UsuarioFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioFilter1
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<UsuarioIncludeFilterItems | string>}
     * @memberof UsuarioFilter1
     */
    'include'?: Array<UsuarioIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface UsuarioIncludeFilterItems
 */
export interface UsuarioIncludeFilterItems {
    /**
     * 
     * @type {string}
     * @memberof UsuarioIncludeFilterItems
     */
    'relation'?: UsuarioIncludeFilterItemsRelationEnum;
    /**
     * 
     * @type {UsuarioScopeFilter}
     * @memberof UsuarioIncludeFilterItems
     */
    'scope'?: UsuarioScopeFilter;
}

/**
    * @export
    * @enum {string}
    */
export enum UsuarioIncludeFilterItemsRelationEnum {
    UserCredentials = 'userCredentials'
}

/**
 * (tsType: Partial<Usuario>, schemaOptions: { partial: true })
 * @export
 * @interface UsuarioPartial
 */
export interface UsuarioPartial {
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'rolId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'idiomaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'mail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'telefono'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'avatar'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface UsuarioPasswordHistorico
 */
export interface UsuarioPasswordHistorico {
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistorico
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistorico
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistorico
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistorico
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistorico
     */
    'fechaFin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistorico
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistorico
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistorico
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistorico
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface UsuarioPasswordHistoricoFilter
 */
export interface UsuarioPasswordHistoricoFilter {
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioPasswordHistoricoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioPasswordHistoricoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface UsuarioPasswordHistoricoFilter1
 */
export interface UsuarioPasswordHistoricoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioPasswordHistoricoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof UsuarioPasswordHistoricoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioPasswordHistoricoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<UsuarioPasswordHistorico>, schemaOptions: { partial: true })
 * @export
 * @interface UsuarioPasswordHistoricoPartial
 */
export interface UsuarioPasswordHistoricoPartial {
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'usuarioId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'fechaFin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: UsuarioPasswordHistoricoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface UsuarioPasswordHistoricoWithRelations
 */
export interface UsuarioPasswordHistoricoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'fechaFin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface UsuarioScopeFilter
 */
export interface UsuarioScopeFilter {
    /**
     * 
     * @type {number}
     * @memberof UsuarioScopeFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioScopeFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioScopeFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioScopeFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof UsuarioScopeFilter
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {any | Set<string>}
     * @memberof UsuarioScopeFilter
     */
    'fields'?: any | Set<string>;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof UsuarioScopeFilter
     */
    'include'?: Array<{ [key: string]: object; }>;
}
/**
 * (tsType: UsuarioWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface UsuarioWithRelations
 */
export interface UsuarioWithRelations {
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'rolId': number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'mail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'telefono'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'avatar'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'usuInactivo'?: number | null;
    /**
     * 
     * @type {UsuarioCredencialesWithRelations}
     * @memberof UsuarioWithRelations
     */
    'userCredentials'?: UsuarioCredencialesWithRelations;
}

/**
 * ArchivoControllerApi - axios parameter creator
 * @export
 */
export const ArchivoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/archivos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewArchivo} [newArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerCreate: async (newArchivo?: NewArchivo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/archivos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newArchivo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('archivoControllerDeleteById', 'id', id)
            const localVarPath = `/archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerFind: async (filter?: ArchivoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/archivos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ArchivoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerFindById: async (id: number, filter?: ArchivoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('archivoControllerFindById', 'id', id)
            const localVarPath = `/archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Archivo} [archivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerReplaceById: async (id: number, archivo?: Archivo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('archivoControllerReplaceById', 'id', id)
            const localVarPath = `/archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(archivo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ArchivoPartial} [archivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerUpdateAll: async (where?: { [key: string]: object; }, archivoPartial?: ArchivoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/archivos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(archivoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ArchivoPartial} [archivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerUpdateById: async (id: number, archivoPartial?: ArchivoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('archivoControllerUpdateById', 'id', id)
            const localVarPath = `/archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(archivoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerVistaArchivoEmpresa: async (filter?: ArchivoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaArchivoEmpresa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerVistaArchivoEmpresaCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaArchivoEmpresaCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArchivoControllerApi - functional programming interface
 * @export
 */
export const ArchivoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArchivoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewArchivo} [newArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerCreate(newArchivo?: NewArchivo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Archivo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerCreate(newArchivo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerFind(filter?: ArchivoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArchivoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ArchivoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerFindById(id: number, filter?: ArchivoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArchivoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Archivo} [archivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerReplaceById(id: number, archivo?: Archivo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerReplaceById(id, archivo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ArchivoPartial} [archivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerUpdateAll(where?: { [key: string]: object; }, archivoPartial?: ArchivoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerUpdateAll(where, archivoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ArchivoPartial} [archivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerUpdateById(id: number, archivoPartial?: ArchivoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerUpdateById(id, archivoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerVistaArchivoEmpresa(filter?: ArchivoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerVistaArchivoEmpresa(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerVistaArchivoEmpresaCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerVistaArchivoEmpresaCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ArchivoControllerApi - factory interface
 * @export
 */
export const ArchivoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArchivoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.archivoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewArchivo} [newArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerCreate(newArchivo?: NewArchivo, options?: any): AxiosPromise<Archivo> {
            return localVarFp.archivoControllerCreate(newArchivo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.archivoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerFind(filter?: ArchivoFilter1, options?: any): AxiosPromise<Array<ArchivoWithRelations>> {
            return localVarFp.archivoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ArchivoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerFindById(id: number, filter?: ArchivoFilter, options?: any): AxiosPromise<ArchivoWithRelations> {
            return localVarFp.archivoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Archivo} [archivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerReplaceById(id: number, archivo?: Archivo, options?: any): AxiosPromise<any> {
            return localVarFp.archivoControllerReplaceById(id, archivo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ArchivoPartial} [archivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerUpdateAll(where?: { [key: string]: object; }, archivoPartial?: ArchivoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.archivoControllerUpdateAll(where, archivoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ArchivoPartial} [archivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerUpdateById(id: number, archivoPartial?: ArchivoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.archivoControllerUpdateById(id, archivoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerVistaArchivoEmpresa(filter?: ArchivoFilter1, options?: any): AxiosPromise<object> {
            return localVarFp.archivoControllerVistaArchivoEmpresa(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerVistaArchivoEmpresaCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<object> {
            return localVarFp.archivoControllerVistaArchivoEmpresaCount(where, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArchivoControllerApi - object-oriented interface
 * @export
 * @class ArchivoControllerApi
 * @extends {BaseAPI}
 */
export class ArchivoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewArchivo} [newArchivo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerCreate(newArchivo?: NewArchivo, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerCreate(newArchivo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ArchivoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerFind(filter?: ArchivoFilter1, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ArchivoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerFindById(id: number, filter?: ArchivoFilter, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Archivo} [archivo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerReplaceById(id: number, archivo?: Archivo, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerReplaceById(id, archivo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ArchivoPartial} [archivoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerUpdateAll(where?: { [key: string]: object; }, archivoPartial?: ArchivoPartial, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerUpdateAll(where, archivoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ArchivoPartial} [archivoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerUpdateById(id: number, archivoPartial?: ArchivoPartial, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerUpdateById(id, archivoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ArchivoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerVistaArchivoEmpresa(filter?: ArchivoFilter1, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerVistaArchivoEmpresa(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerVistaArchivoEmpresaCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerVistaArchivoEmpresaCount(where, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AtributoControllerApi - axios parameter creator
 * @export
 */
export const AtributoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/atributos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewAtributo} [newAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributoControllerCreate: async (newAtributo?: NewAtributo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newAtributo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('atributoControllerDeleteById', 'id', id)
            const localVarPath = `/atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AtributoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributoControllerFind: async (filter?: AtributoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AtributoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributoControllerFindById: async (id: number, filter?: AtributoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('atributoControllerFindById', 'id', id)
            const localVarPath = `/atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Atributo} [atributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributoControllerReplaceById: async (id: number, atributo?: Atributo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('atributoControllerReplaceById', 'id', id)
            const localVarPath = `/atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(atributo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {AtributoPartial} [atributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributoControllerUpdateAll: async (where?: { [key: string]: object; }, atributoPartial?: AtributoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(atributoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AtributoPartial} [atributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributoControllerUpdateById: async (id: number, atributoPartial?: AtributoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('atributoControllerUpdateById', 'id', id)
            const localVarPath = `/atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(atributoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AtributoControllerApi - functional programming interface
 * @export
 */
export const AtributoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AtributoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atributoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atributoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewAtributo} [newAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atributoControllerCreate(newAtributo?: NewAtributo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Atributo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atributoControllerCreate(newAtributo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atributoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atributoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AtributoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atributoControllerFind(filter?: AtributoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AtributoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atributoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {AtributoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atributoControllerFindById(id: number, filter?: AtributoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AtributoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atributoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Atributo} [atributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atributoControllerReplaceById(id: number, atributo?: Atributo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atributoControllerReplaceById(id, atributo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {AtributoPartial} [atributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atributoControllerUpdateAll(where?: { [key: string]: object; }, atributoPartial?: AtributoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atributoControllerUpdateAll(where, atributoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {AtributoPartial} [atributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atributoControllerUpdateById(id: number, atributoPartial?: AtributoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atributoControllerUpdateById(id, atributoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AtributoControllerApi - factory interface
 * @export
 */
export const AtributoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AtributoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.atributoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewAtributo} [newAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributoControllerCreate(newAtributo?: NewAtributo, options?: any): AxiosPromise<Atributo> {
            return localVarFp.atributoControllerCreate(newAtributo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.atributoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AtributoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributoControllerFind(filter?: AtributoFilter1, options?: any): AxiosPromise<Array<AtributoWithRelations>> {
            return localVarFp.atributoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {AtributoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributoControllerFindById(id: number, filter?: AtributoFilter, options?: any): AxiosPromise<AtributoWithRelations> {
            return localVarFp.atributoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Atributo} [atributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributoControllerReplaceById(id: number, atributo?: Atributo, options?: any): AxiosPromise<any> {
            return localVarFp.atributoControllerReplaceById(id, atributo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {AtributoPartial} [atributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributoControllerUpdateAll(where?: { [key: string]: object; }, atributoPartial?: AtributoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.atributoControllerUpdateAll(where, atributoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {AtributoPartial} [atributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributoControllerUpdateById(id: number, atributoPartial?: AtributoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.atributoControllerUpdateById(id, atributoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AtributoControllerApi - object-oriented interface
 * @export
 * @class AtributoControllerApi
 * @extends {BaseAPI}
 */
export class AtributoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtributoControllerApi
     */
    public atributoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return AtributoControllerApiFp(this.configuration).atributoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewAtributo} [newAtributo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtributoControllerApi
     */
    public atributoControllerCreate(newAtributo?: NewAtributo, options?: AxiosRequestConfig) {
        return AtributoControllerApiFp(this.configuration).atributoControllerCreate(newAtributo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtributoControllerApi
     */
    public atributoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return AtributoControllerApiFp(this.configuration).atributoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AtributoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtributoControllerApi
     */
    public atributoControllerFind(filter?: AtributoFilter1, options?: AxiosRequestConfig) {
        return AtributoControllerApiFp(this.configuration).atributoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {AtributoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtributoControllerApi
     */
    public atributoControllerFindById(id: number, filter?: AtributoFilter, options?: AxiosRequestConfig) {
        return AtributoControllerApiFp(this.configuration).atributoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Atributo} [atributo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtributoControllerApi
     */
    public atributoControllerReplaceById(id: number, atributo?: Atributo, options?: AxiosRequestConfig) {
        return AtributoControllerApiFp(this.configuration).atributoControllerReplaceById(id, atributo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {AtributoPartial} [atributoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtributoControllerApi
     */
    public atributoControllerUpdateAll(where?: { [key: string]: object; }, atributoPartial?: AtributoPartial, options?: AxiosRequestConfig) {
        return AtributoControllerApiFp(this.configuration).atributoControllerUpdateAll(where, atributoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {AtributoPartial} [atributoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtributoControllerApi
     */
    public atributoControllerUpdateById(id: number, atributoPartial?: AtributoPartial, options?: AxiosRequestConfig) {
        return AtributoControllerApiFp(this.configuration).atributoControllerUpdateById(id, atributoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuditoriaControllerApi - axios parameter creator
 * @export
 */
export const AuditoriaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditoriaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auditorias/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewAuditoria} [newAuditoria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditoriaControllerCreate: async (newAuditoria?: NewAuditoria, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auditorias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newAuditoria, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditoriaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('auditoriaControllerDeleteById', 'id', id)
            const localVarPath = `/auditorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuditoriaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditoriaControllerFind: async (filter?: AuditoriaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auditorias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AuditoriaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditoriaControllerFindById: async (id: number, filter?: AuditoriaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('auditoriaControllerFindById', 'id', id)
            const localVarPath = `/auditorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Auditoria} [auditoria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditoriaControllerReplaceById: async (id: number, auditoria?: Auditoria, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('auditoriaControllerReplaceById', 'id', id)
            const localVarPath = `/auditorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(auditoria, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {AuditoriaPartial} [auditoriaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditoriaControllerUpdateAll: async (where?: { [key: string]: object; }, auditoriaPartial?: AuditoriaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auditorias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(auditoriaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AuditoriaPartial} [auditoriaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditoriaControllerUpdateById: async (id: number, auditoriaPartial?: AuditoriaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('auditoriaControllerUpdateById', 'id', id)
            const localVarPath = `/auditorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(auditoriaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuditoriaControllerApi - functional programming interface
 * @export
 */
export const AuditoriaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuditoriaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditoriaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditoriaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewAuditoria} [newAuditoria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditoriaControllerCreate(newAuditoria?: NewAuditoria, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Auditoria>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditoriaControllerCreate(newAuditoria, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditoriaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditoriaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AuditoriaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditoriaControllerFind(filter?: AuditoriaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditoriaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditoriaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {AuditoriaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditoriaControllerFindById(id: number, filter?: AuditoriaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditoriaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditoriaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Auditoria} [auditoria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditoriaControllerReplaceById(id: number, auditoria?: Auditoria, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditoriaControllerReplaceById(id, auditoria, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {AuditoriaPartial} [auditoriaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditoriaControllerUpdateAll(where?: { [key: string]: object; }, auditoriaPartial?: AuditoriaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditoriaControllerUpdateAll(where, auditoriaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {AuditoriaPartial} [auditoriaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditoriaControllerUpdateById(id: number, auditoriaPartial?: AuditoriaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditoriaControllerUpdateById(id, auditoriaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuditoriaControllerApi - factory interface
 * @export
 */
export const AuditoriaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuditoriaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditoriaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.auditoriaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewAuditoria} [newAuditoria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditoriaControllerCreate(newAuditoria?: NewAuditoria, options?: any): AxiosPromise<Auditoria> {
            return localVarFp.auditoriaControllerCreate(newAuditoria, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditoriaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.auditoriaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuditoriaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditoriaControllerFind(filter?: AuditoriaFilter1, options?: any): AxiosPromise<Array<AuditoriaWithRelations>> {
            return localVarFp.auditoriaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {AuditoriaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditoriaControllerFindById(id: number, filter?: AuditoriaFilter, options?: any): AxiosPromise<AuditoriaWithRelations> {
            return localVarFp.auditoriaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Auditoria} [auditoria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditoriaControllerReplaceById(id: number, auditoria?: Auditoria, options?: any): AxiosPromise<any> {
            return localVarFp.auditoriaControllerReplaceById(id, auditoria, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {AuditoriaPartial} [auditoriaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditoriaControllerUpdateAll(where?: { [key: string]: object; }, auditoriaPartial?: AuditoriaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.auditoriaControllerUpdateAll(where, auditoriaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {AuditoriaPartial} [auditoriaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditoriaControllerUpdateById(id: number, auditoriaPartial?: AuditoriaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.auditoriaControllerUpdateById(id, auditoriaPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuditoriaControllerApi - object-oriented interface
 * @export
 * @class AuditoriaControllerApi
 * @extends {BaseAPI}
 */
export class AuditoriaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditoriaControllerApi
     */
    public auditoriaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return AuditoriaControllerApiFp(this.configuration).auditoriaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewAuditoria} [newAuditoria] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditoriaControllerApi
     */
    public auditoriaControllerCreate(newAuditoria?: NewAuditoria, options?: AxiosRequestConfig) {
        return AuditoriaControllerApiFp(this.configuration).auditoriaControllerCreate(newAuditoria, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditoriaControllerApi
     */
    public auditoriaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return AuditoriaControllerApiFp(this.configuration).auditoriaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuditoriaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditoriaControllerApi
     */
    public auditoriaControllerFind(filter?: AuditoriaFilter1, options?: AxiosRequestConfig) {
        return AuditoriaControllerApiFp(this.configuration).auditoriaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {AuditoriaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditoriaControllerApi
     */
    public auditoriaControllerFindById(id: number, filter?: AuditoriaFilter, options?: AxiosRequestConfig) {
        return AuditoriaControllerApiFp(this.configuration).auditoriaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Auditoria} [auditoria] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditoriaControllerApi
     */
    public auditoriaControllerReplaceById(id: number, auditoria?: Auditoria, options?: AxiosRequestConfig) {
        return AuditoriaControllerApiFp(this.configuration).auditoriaControllerReplaceById(id, auditoria, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {AuditoriaPartial} [auditoriaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditoriaControllerApi
     */
    public auditoriaControllerUpdateAll(where?: { [key: string]: object; }, auditoriaPartial?: AuditoriaPartial, options?: AxiosRequestConfig) {
        return AuditoriaControllerApiFp(this.configuration).auditoriaControllerUpdateAll(where, auditoriaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {AuditoriaPartial} [auditoriaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditoriaControllerApi
     */
    public auditoriaControllerUpdateById(id: number, auditoriaPartial?: AuditoriaPartial, options?: AxiosRequestConfig) {
        return AuditoriaControllerApiFp(this.configuration).auditoriaControllerUpdateById(id, auditoriaPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CalendariosDisponibilidadControllerApi - axios parameter creator
 * @export
 */
export const CalendariosDisponibilidadControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendariosDisponibilidadControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/calendarios-disponibilidades/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewCalendariosDisponibilidad} [newCalendariosDisponibilidad] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendariosDisponibilidadControllerCreate: async (newCalendariosDisponibilidad?: NewCalendariosDisponibilidad, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/calendarios-disponibilidades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newCalendariosDisponibilidad, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendariosDisponibilidadControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('calendariosDisponibilidadControllerDeleteById', 'id', id)
            const localVarPath = `/calendarios-disponibilidades/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CalendariosDisponibilidadFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendariosDisponibilidadControllerFind: async (filter?: CalendariosDisponibilidadFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/calendarios-disponibilidades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CalendariosDisponibilidadFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendariosDisponibilidadControllerFindById: async (id: number, filter?: CalendariosDisponibilidadFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('calendariosDisponibilidadControllerFindById', 'id', id)
            const localVarPath = `/calendarios-disponibilidades/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CalendariosDisponibilidad} [calendariosDisponibilidad] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendariosDisponibilidadControllerReplaceById: async (id: number, calendariosDisponibilidad?: CalendariosDisponibilidad, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('calendariosDisponibilidadControllerReplaceById', 'id', id)
            const localVarPath = `/calendarios-disponibilidades/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(calendariosDisponibilidad, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CalendariosDisponibilidadPartial} [calendariosDisponibilidadPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendariosDisponibilidadControllerUpdateAll: async (where?: { [key: string]: object; }, calendariosDisponibilidadPartial?: CalendariosDisponibilidadPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/calendarios-disponibilidades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(calendariosDisponibilidadPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CalendariosDisponibilidadPartial} [calendariosDisponibilidadPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendariosDisponibilidadControllerUpdateById: async (id: number, calendariosDisponibilidadPartial?: CalendariosDisponibilidadPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('calendariosDisponibilidadControllerUpdateById', 'id', id)
            const localVarPath = `/calendarios-disponibilidades/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(calendariosDisponibilidadPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CalendariosDisponibilidadControllerApi - functional programming interface
 * @export
 */
export const CalendariosDisponibilidadControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CalendariosDisponibilidadControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calendariosDisponibilidadControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.calendariosDisponibilidadControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewCalendariosDisponibilidad} [newCalendariosDisponibilidad] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calendariosDisponibilidadControllerCreate(newCalendariosDisponibilidad?: NewCalendariosDisponibilidad, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalendariosDisponibilidad>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.calendariosDisponibilidadControllerCreate(newCalendariosDisponibilidad, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calendariosDisponibilidadControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.calendariosDisponibilidadControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CalendariosDisponibilidadFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calendariosDisponibilidadControllerFind(filter?: CalendariosDisponibilidadFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CalendariosDisponibilidadWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.calendariosDisponibilidadControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CalendariosDisponibilidadFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calendariosDisponibilidadControllerFindById(id: number, filter?: CalendariosDisponibilidadFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalendariosDisponibilidadWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.calendariosDisponibilidadControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CalendariosDisponibilidad} [calendariosDisponibilidad] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calendariosDisponibilidadControllerReplaceById(id: number, calendariosDisponibilidad?: CalendariosDisponibilidad, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.calendariosDisponibilidadControllerReplaceById(id, calendariosDisponibilidad, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CalendariosDisponibilidadPartial} [calendariosDisponibilidadPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calendariosDisponibilidadControllerUpdateAll(where?: { [key: string]: object; }, calendariosDisponibilidadPartial?: CalendariosDisponibilidadPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.calendariosDisponibilidadControllerUpdateAll(where, calendariosDisponibilidadPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CalendariosDisponibilidadPartial} [calendariosDisponibilidadPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calendariosDisponibilidadControllerUpdateById(id: number, calendariosDisponibilidadPartial?: CalendariosDisponibilidadPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.calendariosDisponibilidadControllerUpdateById(id, calendariosDisponibilidadPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CalendariosDisponibilidadControllerApi - factory interface
 * @export
 */
export const CalendariosDisponibilidadControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CalendariosDisponibilidadControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendariosDisponibilidadControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.calendariosDisponibilidadControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewCalendariosDisponibilidad} [newCalendariosDisponibilidad] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendariosDisponibilidadControllerCreate(newCalendariosDisponibilidad?: NewCalendariosDisponibilidad, options?: any): AxiosPromise<CalendariosDisponibilidad> {
            return localVarFp.calendariosDisponibilidadControllerCreate(newCalendariosDisponibilidad, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendariosDisponibilidadControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.calendariosDisponibilidadControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CalendariosDisponibilidadFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendariosDisponibilidadControllerFind(filter?: CalendariosDisponibilidadFilter1, options?: any): AxiosPromise<Array<CalendariosDisponibilidadWithRelations>> {
            return localVarFp.calendariosDisponibilidadControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CalendariosDisponibilidadFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendariosDisponibilidadControllerFindById(id: number, filter?: CalendariosDisponibilidadFilter, options?: any): AxiosPromise<CalendariosDisponibilidadWithRelations> {
            return localVarFp.calendariosDisponibilidadControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CalendariosDisponibilidad} [calendariosDisponibilidad] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendariosDisponibilidadControllerReplaceById(id: number, calendariosDisponibilidad?: CalendariosDisponibilidad, options?: any): AxiosPromise<any> {
            return localVarFp.calendariosDisponibilidadControllerReplaceById(id, calendariosDisponibilidad, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CalendariosDisponibilidadPartial} [calendariosDisponibilidadPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendariosDisponibilidadControllerUpdateAll(where?: { [key: string]: object; }, calendariosDisponibilidadPartial?: CalendariosDisponibilidadPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.calendariosDisponibilidadControllerUpdateAll(where, calendariosDisponibilidadPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CalendariosDisponibilidadPartial} [calendariosDisponibilidadPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendariosDisponibilidadControllerUpdateById(id: number, calendariosDisponibilidadPartial?: CalendariosDisponibilidadPartial, options?: any): AxiosPromise<any> {
            return localVarFp.calendariosDisponibilidadControllerUpdateById(id, calendariosDisponibilidadPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CalendariosDisponibilidadControllerApi - object-oriented interface
 * @export
 * @class CalendariosDisponibilidadControllerApi
 * @extends {BaseAPI}
 */
export class CalendariosDisponibilidadControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendariosDisponibilidadControllerApi
     */
    public calendariosDisponibilidadControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return CalendariosDisponibilidadControllerApiFp(this.configuration).calendariosDisponibilidadControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewCalendariosDisponibilidad} [newCalendariosDisponibilidad] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendariosDisponibilidadControllerApi
     */
    public calendariosDisponibilidadControllerCreate(newCalendariosDisponibilidad?: NewCalendariosDisponibilidad, options?: AxiosRequestConfig) {
        return CalendariosDisponibilidadControllerApiFp(this.configuration).calendariosDisponibilidadControllerCreate(newCalendariosDisponibilidad, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendariosDisponibilidadControllerApi
     */
    public calendariosDisponibilidadControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return CalendariosDisponibilidadControllerApiFp(this.configuration).calendariosDisponibilidadControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CalendariosDisponibilidadFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendariosDisponibilidadControllerApi
     */
    public calendariosDisponibilidadControllerFind(filter?: CalendariosDisponibilidadFilter1, options?: AxiosRequestConfig) {
        return CalendariosDisponibilidadControllerApiFp(this.configuration).calendariosDisponibilidadControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CalendariosDisponibilidadFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendariosDisponibilidadControllerApi
     */
    public calendariosDisponibilidadControllerFindById(id: number, filter?: CalendariosDisponibilidadFilter, options?: AxiosRequestConfig) {
        return CalendariosDisponibilidadControllerApiFp(this.configuration).calendariosDisponibilidadControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CalendariosDisponibilidad} [calendariosDisponibilidad] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendariosDisponibilidadControllerApi
     */
    public calendariosDisponibilidadControllerReplaceById(id: number, calendariosDisponibilidad?: CalendariosDisponibilidad, options?: AxiosRequestConfig) {
        return CalendariosDisponibilidadControllerApiFp(this.configuration).calendariosDisponibilidadControllerReplaceById(id, calendariosDisponibilidad, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {CalendariosDisponibilidadPartial} [calendariosDisponibilidadPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendariosDisponibilidadControllerApi
     */
    public calendariosDisponibilidadControllerUpdateAll(where?: { [key: string]: object; }, calendariosDisponibilidadPartial?: CalendariosDisponibilidadPartial, options?: AxiosRequestConfig) {
        return CalendariosDisponibilidadControllerApiFp(this.configuration).calendariosDisponibilidadControllerUpdateAll(where, calendariosDisponibilidadPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CalendariosDisponibilidadPartial} [calendariosDisponibilidadPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendariosDisponibilidadControllerApi
     */
    public calendariosDisponibilidadControllerUpdateById(id: number, calendariosDisponibilidadPartial?: CalendariosDisponibilidadPartial, options?: AxiosRequestConfig) {
        return CalendariosDisponibilidadControllerApiFp(this.configuration).calendariosDisponibilidadControllerUpdateById(id, calendariosDisponibilidadPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CampoDinamicoControllerApi - axios parameter creator
 * @export
 */
export const CampoDinamicoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campoDinamicoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/campo-dinamicos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewCampoDinamico} [newCampoDinamico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campoDinamicoControllerCreate: async (newCampoDinamico?: NewCampoDinamico, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/campo-dinamicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newCampoDinamico, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campoDinamicoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('campoDinamicoControllerDeleteById', 'id', id)
            const localVarPath = `/campo-dinamicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CampoDinamicoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campoDinamicoControllerFind: async (filter?: CampoDinamicoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/campo-dinamicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CampoDinamicoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campoDinamicoControllerFindById: async (id: number, filter?: CampoDinamicoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('campoDinamicoControllerFindById', 'id', id)
            const localVarPath = `/campo-dinamicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CampoDinamico} [campoDinamico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campoDinamicoControllerReplaceById: async (id: number, campoDinamico?: CampoDinamico, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('campoDinamicoControllerReplaceById', 'id', id)
            const localVarPath = `/campo-dinamicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(campoDinamico, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CampoDinamicoPartial} [campoDinamicoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campoDinamicoControllerUpdateAll: async (where?: { [key: string]: object; }, campoDinamicoPartial?: CampoDinamicoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/campo-dinamicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(campoDinamicoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CampoDinamicoPartial} [campoDinamicoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campoDinamicoControllerUpdateById: async (id: number, campoDinamicoPartial?: CampoDinamicoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('campoDinamicoControllerUpdateById', 'id', id)
            const localVarPath = `/campo-dinamicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(campoDinamicoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampoDinamicoControllerApi - functional programming interface
 * @export
 */
export const CampoDinamicoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CampoDinamicoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async campoDinamicoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.campoDinamicoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewCampoDinamico} [newCampoDinamico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async campoDinamicoControllerCreate(newCampoDinamico?: NewCampoDinamico, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampoDinamico>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.campoDinamicoControllerCreate(newCampoDinamico, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async campoDinamicoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.campoDinamicoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CampoDinamicoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async campoDinamicoControllerFind(filter?: CampoDinamicoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampoDinamicoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.campoDinamicoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CampoDinamicoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async campoDinamicoControllerFindById(id: number, filter?: CampoDinamicoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampoDinamicoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.campoDinamicoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CampoDinamico} [campoDinamico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async campoDinamicoControllerReplaceById(id: number, campoDinamico?: CampoDinamico, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.campoDinamicoControllerReplaceById(id, campoDinamico, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CampoDinamicoPartial} [campoDinamicoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async campoDinamicoControllerUpdateAll(where?: { [key: string]: object; }, campoDinamicoPartial?: CampoDinamicoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.campoDinamicoControllerUpdateAll(where, campoDinamicoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CampoDinamicoPartial} [campoDinamicoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async campoDinamicoControllerUpdateById(id: number, campoDinamicoPartial?: CampoDinamicoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.campoDinamicoControllerUpdateById(id, campoDinamicoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CampoDinamicoControllerApi - factory interface
 * @export
 */
export const CampoDinamicoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CampoDinamicoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campoDinamicoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.campoDinamicoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewCampoDinamico} [newCampoDinamico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campoDinamicoControllerCreate(newCampoDinamico?: NewCampoDinamico, options?: any): AxiosPromise<CampoDinamico> {
            return localVarFp.campoDinamicoControllerCreate(newCampoDinamico, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campoDinamicoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.campoDinamicoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CampoDinamicoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campoDinamicoControllerFind(filter?: CampoDinamicoFilter1, options?: any): AxiosPromise<Array<CampoDinamicoWithRelations>> {
            return localVarFp.campoDinamicoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CampoDinamicoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campoDinamicoControllerFindById(id: number, filter?: CampoDinamicoFilter, options?: any): AxiosPromise<CampoDinamicoWithRelations> {
            return localVarFp.campoDinamicoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CampoDinamico} [campoDinamico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campoDinamicoControllerReplaceById(id: number, campoDinamico?: CampoDinamico, options?: any): AxiosPromise<any> {
            return localVarFp.campoDinamicoControllerReplaceById(id, campoDinamico, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CampoDinamicoPartial} [campoDinamicoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campoDinamicoControllerUpdateAll(where?: { [key: string]: object; }, campoDinamicoPartial?: CampoDinamicoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.campoDinamicoControllerUpdateAll(where, campoDinamicoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CampoDinamicoPartial} [campoDinamicoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campoDinamicoControllerUpdateById(id: number, campoDinamicoPartial?: CampoDinamicoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.campoDinamicoControllerUpdateById(id, campoDinamicoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CampoDinamicoControllerApi - object-oriented interface
 * @export
 * @class CampoDinamicoControllerApi
 * @extends {BaseAPI}
 */
export class CampoDinamicoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampoDinamicoControllerApi
     */
    public campoDinamicoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return CampoDinamicoControllerApiFp(this.configuration).campoDinamicoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewCampoDinamico} [newCampoDinamico] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampoDinamicoControllerApi
     */
    public campoDinamicoControllerCreate(newCampoDinamico?: NewCampoDinamico, options?: AxiosRequestConfig) {
        return CampoDinamicoControllerApiFp(this.configuration).campoDinamicoControllerCreate(newCampoDinamico, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampoDinamicoControllerApi
     */
    public campoDinamicoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return CampoDinamicoControllerApiFp(this.configuration).campoDinamicoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CampoDinamicoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampoDinamicoControllerApi
     */
    public campoDinamicoControllerFind(filter?: CampoDinamicoFilter1, options?: AxiosRequestConfig) {
        return CampoDinamicoControllerApiFp(this.configuration).campoDinamicoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CampoDinamicoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampoDinamicoControllerApi
     */
    public campoDinamicoControllerFindById(id: number, filter?: CampoDinamicoFilter, options?: AxiosRequestConfig) {
        return CampoDinamicoControllerApiFp(this.configuration).campoDinamicoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CampoDinamico} [campoDinamico] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampoDinamicoControllerApi
     */
    public campoDinamicoControllerReplaceById(id: number, campoDinamico?: CampoDinamico, options?: AxiosRequestConfig) {
        return CampoDinamicoControllerApiFp(this.configuration).campoDinamicoControllerReplaceById(id, campoDinamico, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {CampoDinamicoPartial} [campoDinamicoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampoDinamicoControllerApi
     */
    public campoDinamicoControllerUpdateAll(where?: { [key: string]: object; }, campoDinamicoPartial?: CampoDinamicoPartial, options?: AxiosRequestConfig) {
        return CampoDinamicoControllerApiFp(this.configuration).campoDinamicoControllerUpdateAll(where, campoDinamicoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CampoDinamicoPartial} [campoDinamicoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampoDinamicoControllerApi
     */
    public campoDinamicoControllerUpdateById(id: number, campoDinamicoPartial?: CampoDinamicoPartial, options?: AxiosRequestConfig) {
        return CampoDinamicoControllerApiFp(this.configuration).campoDinamicoControllerUpdateById(id, campoDinamicoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CatalogoControllerApi - axios parameter creator
 * @export
 */
export const CatalogoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/catalogos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewCatalogo} [newCatalogo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoControllerCreate: async (newCatalogo?: NewCatalogo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/catalogos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newCatalogo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('catalogoControllerDeleteById', 'id', id)
            const localVarPath = `/catalogos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CatalogoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoControllerFind: async (filter?: CatalogoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/catalogos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CatalogoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoControllerFindById: async (id: number, filter?: CatalogoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('catalogoControllerFindById', 'id', id)
            const localVarPath = `/catalogos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Catalogo} [catalogo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoControllerReplaceById: async (id: number, catalogo?: Catalogo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('catalogoControllerReplaceById', 'id', id)
            const localVarPath = `/catalogos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CatalogoPartial} [catalogoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoControllerUpdateAll: async (where?: { [key: string]: object; }, catalogoPartial?: CatalogoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/catalogos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CatalogoPartial} [catalogoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoControllerUpdateById: async (id: number, catalogoPartial?: CatalogoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('catalogoControllerUpdateById', 'id', id)
            const localVarPath = `/catalogos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogoControllerApi - functional programming interface
 * @export
 */
export const CatalogoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewCatalogo} [newCatalogo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogoControllerCreate(newCatalogo?: NewCatalogo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Catalogo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogoControllerCreate(newCatalogo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CatalogoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogoControllerFind(filter?: CatalogoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CatalogoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogoControllerFindById(id: number, filter?: CatalogoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Catalogo} [catalogo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogoControllerReplaceById(id: number, catalogo?: Catalogo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogoControllerReplaceById(id, catalogo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CatalogoPartial} [catalogoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogoControllerUpdateAll(where?: { [key: string]: object; }, catalogoPartial?: CatalogoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogoControllerUpdateAll(where, catalogoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CatalogoPartial} [catalogoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogoControllerUpdateById(id: number, catalogoPartial?: CatalogoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogoControllerUpdateById(id, catalogoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CatalogoControllerApi - factory interface
 * @export
 */
export const CatalogoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.catalogoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewCatalogo} [newCatalogo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoControllerCreate(newCatalogo?: NewCatalogo, options?: any): AxiosPromise<Catalogo> {
            return localVarFp.catalogoControllerCreate(newCatalogo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.catalogoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CatalogoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoControllerFind(filter?: CatalogoFilter1, options?: any): AxiosPromise<Array<CatalogoWithRelations>> {
            return localVarFp.catalogoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CatalogoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoControllerFindById(id: number, filter?: CatalogoFilter, options?: any): AxiosPromise<CatalogoWithRelations> {
            return localVarFp.catalogoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Catalogo} [catalogo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoControllerReplaceById(id: number, catalogo?: Catalogo, options?: any): AxiosPromise<any> {
            return localVarFp.catalogoControllerReplaceById(id, catalogo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CatalogoPartial} [catalogoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoControllerUpdateAll(where?: { [key: string]: object; }, catalogoPartial?: CatalogoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.catalogoControllerUpdateAll(where, catalogoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CatalogoPartial} [catalogoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoControllerUpdateById(id: number, catalogoPartial?: CatalogoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.catalogoControllerUpdateById(id, catalogoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CatalogoControllerApi - object-oriented interface
 * @export
 * @class CatalogoControllerApi
 * @extends {BaseAPI}
 */
export class CatalogoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogoControllerApi
     */
    public catalogoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return CatalogoControllerApiFp(this.configuration).catalogoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewCatalogo} [newCatalogo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogoControllerApi
     */
    public catalogoControllerCreate(newCatalogo?: NewCatalogo, options?: AxiosRequestConfig) {
        return CatalogoControllerApiFp(this.configuration).catalogoControllerCreate(newCatalogo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogoControllerApi
     */
    public catalogoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return CatalogoControllerApiFp(this.configuration).catalogoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CatalogoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogoControllerApi
     */
    public catalogoControllerFind(filter?: CatalogoFilter1, options?: AxiosRequestConfig) {
        return CatalogoControllerApiFp(this.configuration).catalogoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CatalogoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogoControllerApi
     */
    public catalogoControllerFindById(id: number, filter?: CatalogoFilter, options?: AxiosRequestConfig) {
        return CatalogoControllerApiFp(this.configuration).catalogoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Catalogo} [catalogo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogoControllerApi
     */
    public catalogoControllerReplaceById(id: number, catalogo?: Catalogo, options?: AxiosRequestConfig) {
        return CatalogoControllerApiFp(this.configuration).catalogoControllerReplaceById(id, catalogo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {CatalogoPartial} [catalogoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogoControllerApi
     */
    public catalogoControllerUpdateAll(where?: { [key: string]: object; }, catalogoPartial?: CatalogoPartial, options?: AxiosRequestConfig) {
        return CatalogoControllerApiFp(this.configuration).catalogoControllerUpdateAll(where, catalogoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CatalogoPartial} [catalogoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogoControllerApi
     */
    public catalogoControllerUpdateById(id: number, catalogoPartial?: CatalogoPartial, options?: AxiosRequestConfig) {
        return CatalogoControllerApiFp(this.configuration).catalogoControllerUpdateById(id, catalogoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CatalogoProductoControllerApi - axios parameter creator
 * @export
 */
export const CatalogoProductoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoProductoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/catalogo-productos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewCatalogoProducto} [newCatalogoProducto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoProductoControllerCreate: async (newCatalogoProducto?: NewCatalogoProducto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/catalogo-productos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newCatalogoProducto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoProductoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('catalogoProductoControllerDeleteById', 'id', id)
            const localVarPath = `/catalogo-productos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CatalogoProductoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoProductoControllerFind: async (filter?: CatalogoProductoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/catalogo-productos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CatalogoProductoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoProductoControllerFindById: async (id: number, filter?: CatalogoProductoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('catalogoProductoControllerFindById', 'id', id)
            const localVarPath = `/catalogo-productos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CatalogoProducto} [catalogoProducto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoProductoControllerReplaceById: async (id: number, catalogoProducto?: CatalogoProducto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('catalogoProductoControllerReplaceById', 'id', id)
            const localVarPath = `/catalogo-productos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogoProducto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CatalogoProductoPartial} [catalogoProductoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoProductoControllerUpdateAll: async (where?: { [key: string]: object; }, catalogoProductoPartial?: CatalogoProductoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/catalogo-productos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogoProductoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CatalogoProductoPartial} [catalogoProductoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoProductoControllerUpdateById: async (id: number, catalogoProductoPartial?: CatalogoProductoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('catalogoProductoControllerUpdateById', 'id', id)
            const localVarPath = `/catalogo-productos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogoProductoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogoProductoControllerApi - functional programming interface
 * @export
 */
export const CatalogoProductoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogoProductoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogoProductoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogoProductoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewCatalogoProducto} [newCatalogoProducto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogoProductoControllerCreate(newCatalogoProducto?: NewCatalogoProducto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogoProducto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogoProductoControllerCreate(newCatalogoProducto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogoProductoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogoProductoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CatalogoProductoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogoProductoControllerFind(filter?: CatalogoProductoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogoProductoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogoProductoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CatalogoProductoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogoProductoControllerFindById(id: number, filter?: CatalogoProductoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogoProductoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogoProductoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CatalogoProducto} [catalogoProducto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogoProductoControllerReplaceById(id: number, catalogoProducto?: CatalogoProducto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogoProductoControllerReplaceById(id, catalogoProducto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CatalogoProductoPartial} [catalogoProductoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogoProductoControllerUpdateAll(where?: { [key: string]: object; }, catalogoProductoPartial?: CatalogoProductoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogoProductoControllerUpdateAll(where, catalogoProductoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CatalogoProductoPartial} [catalogoProductoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogoProductoControllerUpdateById(id: number, catalogoProductoPartial?: CatalogoProductoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogoProductoControllerUpdateById(id, catalogoProductoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CatalogoProductoControllerApi - factory interface
 * @export
 */
export const CatalogoProductoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogoProductoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoProductoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.catalogoProductoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewCatalogoProducto} [newCatalogoProducto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoProductoControllerCreate(newCatalogoProducto?: NewCatalogoProducto, options?: any): AxiosPromise<CatalogoProducto> {
            return localVarFp.catalogoProductoControllerCreate(newCatalogoProducto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoProductoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.catalogoProductoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CatalogoProductoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoProductoControllerFind(filter?: CatalogoProductoFilter1, options?: any): AxiosPromise<Array<CatalogoProductoWithRelations>> {
            return localVarFp.catalogoProductoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CatalogoProductoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoProductoControllerFindById(id: number, filter?: CatalogoProductoFilter, options?: any): AxiosPromise<CatalogoProductoWithRelations> {
            return localVarFp.catalogoProductoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CatalogoProducto} [catalogoProducto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoProductoControllerReplaceById(id: number, catalogoProducto?: CatalogoProducto, options?: any): AxiosPromise<any> {
            return localVarFp.catalogoProductoControllerReplaceById(id, catalogoProducto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CatalogoProductoPartial} [catalogoProductoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoProductoControllerUpdateAll(where?: { [key: string]: object; }, catalogoProductoPartial?: CatalogoProductoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.catalogoProductoControllerUpdateAll(where, catalogoProductoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CatalogoProductoPartial} [catalogoProductoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogoProductoControllerUpdateById(id: number, catalogoProductoPartial?: CatalogoProductoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.catalogoProductoControllerUpdateById(id, catalogoProductoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CatalogoProductoControllerApi - object-oriented interface
 * @export
 * @class CatalogoProductoControllerApi
 * @extends {BaseAPI}
 */
export class CatalogoProductoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogoProductoControllerApi
     */
    public catalogoProductoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return CatalogoProductoControllerApiFp(this.configuration).catalogoProductoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewCatalogoProducto} [newCatalogoProducto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogoProductoControllerApi
     */
    public catalogoProductoControllerCreate(newCatalogoProducto?: NewCatalogoProducto, options?: AxiosRequestConfig) {
        return CatalogoProductoControllerApiFp(this.configuration).catalogoProductoControllerCreate(newCatalogoProducto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogoProductoControllerApi
     */
    public catalogoProductoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return CatalogoProductoControllerApiFp(this.configuration).catalogoProductoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CatalogoProductoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogoProductoControllerApi
     */
    public catalogoProductoControllerFind(filter?: CatalogoProductoFilter1, options?: AxiosRequestConfig) {
        return CatalogoProductoControllerApiFp(this.configuration).catalogoProductoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CatalogoProductoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogoProductoControllerApi
     */
    public catalogoProductoControllerFindById(id: number, filter?: CatalogoProductoFilter, options?: AxiosRequestConfig) {
        return CatalogoProductoControllerApiFp(this.configuration).catalogoProductoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CatalogoProducto} [catalogoProducto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogoProductoControllerApi
     */
    public catalogoProductoControllerReplaceById(id: number, catalogoProducto?: CatalogoProducto, options?: AxiosRequestConfig) {
        return CatalogoProductoControllerApiFp(this.configuration).catalogoProductoControllerReplaceById(id, catalogoProducto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {CatalogoProductoPartial} [catalogoProductoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogoProductoControllerApi
     */
    public catalogoProductoControllerUpdateAll(where?: { [key: string]: object; }, catalogoProductoPartial?: CatalogoProductoPartial, options?: AxiosRequestConfig) {
        return CatalogoProductoControllerApiFp(this.configuration).catalogoProductoControllerUpdateAll(where, catalogoProductoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CatalogoProductoPartial} [catalogoProductoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogoProductoControllerApi
     */
    public catalogoProductoControllerUpdateById(id: number, catalogoProductoPartial?: CatalogoProductoPartial, options?: AxiosRequestConfig) {
        return CatalogoProductoControllerApiFp(this.configuration).catalogoProductoControllerUpdateById(id, catalogoProductoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoriaControllerApi - axios parameter creator
 * @export
 */
export const CategoriaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categorias/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewCategoria} [newCategoria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaControllerCreate: async (newCategoria?: NewCategoria, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categorias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newCategoria, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoriaControllerDeleteById', 'id', id)
            const localVarPath = `/categorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CategoriaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaControllerFind: async (filter?: CategoriaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categorias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaControllerFindById: async (id: number, filter?: CategoriaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoriaControllerFindById', 'id', id)
            const localVarPath = `/categorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Categoria} [categoria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaControllerReplaceById: async (id: number, categoria?: Categoria, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoriaControllerReplaceById', 'id', id)
            const localVarPath = `/categorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoria, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CategoriaPartial} [categoriaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaControllerUpdateAll: async (where?: { [key: string]: object; }, categoriaPartial?: CategoriaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categorias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoriaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriaPartial} [categoriaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaControllerUpdateById: async (id: number, categoriaPartial?: CategoriaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoriaControllerUpdateById', 'id', id)
            const localVarPath = `/categorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoriaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriaControllerApi - functional programming interface
 * @export
 */
export const CategoriaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewCategoria} [newCategoria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriaControllerCreate(newCategoria?: NewCategoria, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Categoria>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriaControllerCreate(newCategoria, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CategoriaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriaControllerFind(filter?: CategoriaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoriaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriaControllerFindById(id: number, filter?: CategoriaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Categoria} [categoria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriaControllerReplaceById(id: number, categoria?: Categoria, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriaControllerReplaceById(id, categoria, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CategoriaPartial} [categoriaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriaControllerUpdateAll(where?: { [key: string]: object; }, categoriaPartial?: CategoriaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriaControllerUpdateAll(where, categoriaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriaPartial} [categoriaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriaControllerUpdateById(id: number, categoriaPartial?: CategoriaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriaControllerUpdateById(id, categoriaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriaControllerApi - factory interface
 * @export
 */
export const CategoriaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.categoriaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewCategoria} [newCategoria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaControllerCreate(newCategoria?: NewCategoria, options?: any): AxiosPromise<Categoria> {
            return localVarFp.categoriaControllerCreate(newCategoria, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.categoriaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoriaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaControllerFind(filter?: CategoriaFilter1, options?: any): AxiosPromise<Array<CategoriaWithRelations>> {
            return localVarFp.categoriaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaControllerFindById(id: number, filter?: CategoriaFilter, options?: any): AxiosPromise<CategoriaWithRelations> {
            return localVarFp.categoriaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Categoria} [categoria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaControllerReplaceById(id: number, categoria?: Categoria, options?: any): AxiosPromise<any> {
            return localVarFp.categoriaControllerReplaceById(id, categoria, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CategoriaPartial} [categoriaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaControllerUpdateAll(where?: { [key: string]: object; }, categoriaPartial?: CategoriaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.categoriaControllerUpdateAll(where, categoriaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriaPartial} [categoriaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaControllerUpdateById(id: number, categoriaPartial?: CategoriaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.categoriaControllerUpdateById(id, categoriaPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriaControllerApi - object-oriented interface
 * @export
 * @class CategoriaControllerApi
 * @extends {BaseAPI}
 */
export class CategoriaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaControllerApi
     */
    public categoriaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return CategoriaControllerApiFp(this.configuration).categoriaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewCategoria} [newCategoria] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaControllerApi
     */
    public categoriaControllerCreate(newCategoria?: NewCategoria, options?: AxiosRequestConfig) {
        return CategoriaControllerApiFp(this.configuration).categoriaControllerCreate(newCategoria, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaControllerApi
     */
    public categoriaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return CategoriaControllerApiFp(this.configuration).categoriaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoriaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaControllerApi
     */
    public categoriaControllerFind(filter?: CategoriaFilter1, options?: AxiosRequestConfig) {
        return CategoriaControllerApiFp(this.configuration).categoriaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CategoriaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaControllerApi
     */
    public categoriaControllerFindById(id: number, filter?: CategoriaFilter, options?: AxiosRequestConfig) {
        return CategoriaControllerApiFp(this.configuration).categoriaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Categoria} [categoria] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaControllerApi
     */
    public categoriaControllerReplaceById(id: number, categoria?: Categoria, options?: AxiosRequestConfig) {
        return CategoriaControllerApiFp(this.configuration).categoriaControllerReplaceById(id, categoria, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {CategoriaPartial} [categoriaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaControllerApi
     */
    public categoriaControllerUpdateAll(where?: { [key: string]: object; }, categoriaPartial?: CategoriaPartial, options?: AxiosRequestConfig) {
        return CategoriaControllerApiFp(this.configuration).categoriaControllerUpdateAll(where, categoriaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CategoriaPartial} [categoriaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaControllerApi
     */
    public categoriaControllerUpdateById(id: number, categoriaPartial?: CategoriaPartial, options?: AxiosRequestConfig) {
        return CategoriaControllerApiFp(this.configuration).categoriaControllerUpdateById(id, categoriaPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoriaGrupoAtributoControllerApi - axios parameter creator
 * @export
 */
export const CategoriaGrupoAtributoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaGrupoAtributoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categoria-grupo-atributos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewCategoriaGrupoAtributo} [newCategoriaGrupoAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaGrupoAtributoControllerCreate: async (newCategoriaGrupoAtributo?: NewCategoriaGrupoAtributo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categoria-grupo-atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newCategoriaGrupoAtributo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaGrupoAtributoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoriaGrupoAtributoControllerDeleteById', 'id', id)
            const localVarPath = `/categoria-grupo-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CategoriaGrupoAtributoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaGrupoAtributoControllerFind: async (filter?: CategoriaGrupoAtributoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categoria-grupo-atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriaGrupoAtributoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaGrupoAtributoControllerFindById: async (id: number, filter?: CategoriaGrupoAtributoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoriaGrupoAtributoControllerFindById', 'id', id)
            const localVarPath = `/categoria-grupo-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriaGrupoAtributo} [categoriaGrupoAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaGrupoAtributoControllerReplaceById: async (id: number, categoriaGrupoAtributo?: CategoriaGrupoAtributo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoriaGrupoAtributoControllerReplaceById', 'id', id)
            const localVarPath = `/categoria-grupo-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoriaGrupoAtributo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CategoriaGrupoAtributoPartial} [categoriaGrupoAtributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaGrupoAtributoControllerUpdateAll: async (where?: { [key: string]: object; }, categoriaGrupoAtributoPartial?: CategoriaGrupoAtributoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categoria-grupo-atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoriaGrupoAtributoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriaGrupoAtributoPartial} [categoriaGrupoAtributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaGrupoAtributoControllerUpdateById: async (id: number, categoriaGrupoAtributoPartial?: CategoriaGrupoAtributoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoriaGrupoAtributoControllerUpdateById', 'id', id)
            const localVarPath = `/categoria-grupo-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoriaGrupoAtributoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriaGrupoAtributoControllerApi - functional programming interface
 * @export
 */
export const CategoriaGrupoAtributoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriaGrupoAtributoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriaGrupoAtributoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriaGrupoAtributoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewCategoriaGrupoAtributo} [newCategoriaGrupoAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriaGrupoAtributoControllerCreate(newCategoriaGrupoAtributo?: NewCategoriaGrupoAtributo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriaGrupoAtributo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriaGrupoAtributoControllerCreate(newCategoriaGrupoAtributo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriaGrupoAtributoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriaGrupoAtributoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CategoriaGrupoAtributoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriaGrupoAtributoControllerFind(filter?: CategoriaGrupoAtributoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoriaGrupoAtributoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriaGrupoAtributoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriaGrupoAtributoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriaGrupoAtributoControllerFindById(id: number, filter?: CategoriaGrupoAtributoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriaGrupoAtributoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriaGrupoAtributoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriaGrupoAtributo} [categoriaGrupoAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriaGrupoAtributoControllerReplaceById(id: number, categoriaGrupoAtributo?: CategoriaGrupoAtributo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriaGrupoAtributoControllerReplaceById(id, categoriaGrupoAtributo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CategoriaGrupoAtributoPartial} [categoriaGrupoAtributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriaGrupoAtributoControllerUpdateAll(where?: { [key: string]: object; }, categoriaGrupoAtributoPartial?: CategoriaGrupoAtributoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriaGrupoAtributoControllerUpdateAll(where, categoriaGrupoAtributoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriaGrupoAtributoPartial} [categoriaGrupoAtributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriaGrupoAtributoControllerUpdateById(id: number, categoriaGrupoAtributoPartial?: CategoriaGrupoAtributoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriaGrupoAtributoControllerUpdateById(id, categoriaGrupoAtributoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriaGrupoAtributoControllerApi - factory interface
 * @export
 */
export const CategoriaGrupoAtributoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriaGrupoAtributoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaGrupoAtributoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.categoriaGrupoAtributoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewCategoriaGrupoAtributo} [newCategoriaGrupoAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaGrupoAtributoControllerCreate(newCategoriaGrupoAtributo?: NewCategoriaGrupoAtributo, options?: any): AxiosPromise<CategoriaGrupoAtributo> {
            return localVarFp.categoriaGrupoAtributoControllerCreate(newCategoriaGrupoAtributo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaGrupoAtributoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.categoriaGrupoAtributoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoriaGrupoAtributoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaGrupoAtributoControllerFind(filter?: CategoriaGrupoAtributoFilter1, options?: any): AxiosPromise<Array<CategoriaGrupoAtributoWithRelations>> {
            return localVarFp.categoriaGrupoAtributoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriaGrupoAtributoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaGrupoAtributoControllerFindById(id: number, filter?: CategoriaGrupoAtributoFilter, options?: any): AxiosPromise<CategoriaGrupoAtributoWithRelations> {
            return localVarFp.categoriaGrupoAtributoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriaGrupoAtributo} [categoriaGrupoAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaGrupoAtributoControllerReplaceById(id: number, categoriaGrupoAtributo?: CategoriaGrupoAtributo, options?: any): AxiosPromise<any> {
            return localVarFp.categoriaGrupoAtributoControllerReplaceById(id, categoriaGrupoAtributo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CategoriaGrupoAtributoPartial} [categoriaGrupoAtributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaGrupoAtributoControllerUpdateAll(where?: { [key: string]: object; }, categoriaGrupoAtributoPartial?: CategoriaGrupoAtributoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.categoriaGrupoAtributoControllerUpdateAll(where, categoriaGrupoAtributoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriaGrupoAtributoPartial} [categoriaGrupoAtributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriaGrupoAtributoControllerUpdateById(id: number, categoriaGrupoAtributoPartial?: CategoriaGrupoAtributoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.categoriaGrupoAtributoControllerUpdateById(id, categoriaGrupoAtributoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriaGrupoAtributoControllerApi - object-oriented interface
 * @export
 * @class CategoriaGrupoAtributoControllerApi
 * @extends {BaseAPI}
 */
export class CategoriaGrupoAtributoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaGrupoAtributoControllerApi
     */
    public categoriaGrupoAtributoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return CategoriaGrupoAtributoControllerApiFp(this.configuration).categoriaGrupoAtributoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewCategoriaGrupoAtributo} [newCategoriaGrupoAtributo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaGrupoAtributoControllerApi
     */
    public categoriaGrupoAtributoControllerCreate(newCategoriaGrupoAtributo?: NewCategoriaGrupoAtributo, options?: AxiosRequestConfig) {
        return CategoriaGrupoAtributoControllerApiFp(this.configuration).categoriaGrupoAtributoControllerCreate(newCategoriaGrupoAtributo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaGrupoAtributoControllerApi
     */
    public categoriaGrupoAtributoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return CategoriaGrupoAtributoControllerApiFp(this.configuration).categoriaGrupoAtributoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoriaGrupoAtributoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaGrupoAtributoControllerApi
     */
    public categoriaGrupoAtributoControllerFind(filter?: CategoriaGrupoAtributoFilter1, options?: AxiosRequestConfig) {
        return CategoriaGrupoAtributoControllerApiFp(this.configuration).categoriaGrupoAtributoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CategoriaGrupoAtributoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaGrupoAtributoControllerApi
     */
    public categoriaGrupoAtributoControllerFindById(id: number, filter?: CategoriaGrupoAtributoFilter, options?: AxiosRequestConfig) {
        return CategoriaGrupoAtributoControllerApiFp(this.configuration).categoriaGrupoAtributoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CategoriaGrupoAtributo} [categoriaGrupoAtributo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaGrupoAtributoControllerApi
     */
    public categoriaGrupoAtributoControllerReplaceById(id: number, categoriaGrupoAtributo?: CategoriaGrupoAtributo, options?: AxiosRequestConfig) {
        return CategoriaGrupoAtributoControllerApiFp(this.configuration).categoriaGrupoAtributoControllerReplaceById(id, categoriaGrupoAtributo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {CategoriaGrupoAtributoPartial} [categoriaGrupoAtributoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaGrupoAtributoControllerApi
     */
    public categoriaGrupoAtributoControllerUpdateAll(where?: { [key: string]: object; }, categoriaGrupoAtributoPartial?: CategoriaGrupoAtributoPartial, options?: AxiosRequestConfig) {
        return CategoriaGrupoAtributoControllerApiFp(this.configuration).categoriaGrupoAtributoControllerUpdateAll(where, categoriaGrupoAtributoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CategoriaGrupoAtributoPartial} [categoriaGrupoAtributoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaGrupoAtributoControllerApi
     */
    public categoriaGrupoAtributoControllerUpdateById(id: number, categoriaGrupoAtributoPartial?: CategoriaGrupoAtributoPartial, options?: AxiosRequestConfig) {
        return CategoriaGrupoAtributoControllerApiFp(this.configuration).categoriaGrupoAtributoControllerUpdateById(id, categoriaGrupoAtributoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompruebaImagenControllerApi - axios parameter creator
 * @export
 */
export const CompruebaImagenControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} imagenUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compruebaImagenControllerCompruebaImagenEndpoint: async (imagenUrl: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imagenUrl' is not null or undefined
            assertParamExists('compruebaImagenControllerCompruebaImagenEndpoint', 'imagenUrl', imagenUrl)
            const localVarPath = `/compruebaImagen/{imagenUrl}`
                .replace(`{${"imagenUrl"}}`, encodeURIComponent(String(imagenUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompruebaImagenControllerApi - functional programming interface
 * @export
 */
export const CompruebaImagenControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompruebaImagenControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} imagenUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async compruebaImagenControllerCompruebaImagenEndpoint(imagenUrl: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.compruebaImagenControllerCompruebaImagenEndpoint(imagenUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompruebaImagenControllerApi - factory interface
 * @export
 */
export const CompruebaImagenControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompruebaImagenControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} imagenUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compruebaImagenControllerCompruebaImagenEndpoint(imagenUrl: number, options?: any): AxiosPromise<object> {
            return localVarFp.compruebaImagenControllerCompruebaImagenEndpoint(imagenUrl, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompruebaImagenControllerApi - object-oriented interface
 * @export
 * @class CompruebaImagenControllerApi
 * @extends {BaseAPI}
 */
export class CompruebaImagenControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} imagenUrl 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompruebaImagenControllerApi
     */
    public compruebaImagenControllerCompruebaImagenEndpoint(imagenUrl: number, options?: AxiosRequestConfig) {
        return CompruebaImagenControllerApiFp(this.configuration).compruebaImagenControllerCompruebaImagenEndpoint(imagenUrl, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ConfiguracionDisenoControllerApi - axios parameter creator
 * @export
 */
export const ConfiguracionDisenoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configuracionDisenoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/configuracion-disenos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewConfiguracionDiseno} [newConfiguracionDiseno] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configuracionDisenoControllerCreate: async (newConfiguracionDiseno?: NewConfiguracionDiseno, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/configuracion-disenos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newConfiguracionDiseno, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configuracionDisenoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('configuracionDisenoControllerDeleteById', 'id', id)
            const localVarPath = `/configuracion-disenos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ConfiguracionDisenoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configuracionDisenoControllerFind: async (filter?: ConfiguracionDisenoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/configuracion-disenos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ConfiguracionDisenoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configuracionDisenoControllerFindById: async (id: number, filter?: ConfiguracionDisenoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('configuracionDisenoControllerFindById', 'id', id)
            const localVarPath = `/configuracion-disenos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ConfiguracionDiseno} [configuracionDiseno] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configuracionDisenoControllerReplaceById: async (id: number, configuracionDiseno?: ConfiguracionDiseno, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('configuracionDisenoControllerReplaceById', 'id', id)
            const localVarPath = `/configuracion-disenos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(configuracionDiseno, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ConfiguracionDisenoPartial} [configuracionDisenoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configuracionDisenoControllerUpdateAll: async (where?: { [key: string]: object; }, configuracionDisenoPartial?: ConfiguracionDisenoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/configuracion-disenos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(configuracionDisenoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ConfiguracionDisenoPartial} [configuracionDisenoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configuracionDisenoControllerUpdateById: async (id: number, configuracionDisenoPartial?: ConfiguracionDisenoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('configuracionDisenoControllerUpdateById', 'id', id)
            const localVarPath = `/configuracion-disenos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(configuracionDisenoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfiguracionDisenoControllerApi - functional programming interface
 * @export
 */
export const ConfiguracionDisenoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfiguracionDisenoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configuracionDisenoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configuracionDisenoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewConfiguracionDiseno} [newConfiguracionDiseno] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configuracionDisenoControllerCreate(newConfiguracionDiseno?: NewConfiguracionDiseno, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfiguracionDiseno>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configuracionDisenoControllerCreate(newConfiguracionDiseno, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configuracionDisenoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configuracionDisenoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ConfiguracionDisenoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configuracionDisenoControllerFind(filter?: ConfiguracionDisenoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConfiguracionDisenoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configuracionDisenoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ConfiguracionDisenoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configuracionDisenoControllerFindById(id: number, filter?: ConfiguracionDisenoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfiguracionDisenoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configuracionDisenoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ConfiguracionDiseno} [configuracionDiseno] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configuracionDisenoControllerReplaceById(id: number, configuracionDiseno?: ConfiguracionDiseno, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configuracionDisenoControllerReplaceById(id, configuracionDiseno, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ConfiguracionDisenoPartial} [configuracionDisenoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configuracionDisenoControllerUpdateAll(where?: { [key: string]: object; }, configuracionDisenoPartial?: ConfiguracionDisenoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configuracionDisenoControllerUpdateAll(where, configuracionDisenoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ConfiguracionDisenoPartial} [configuracionDisenoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configuracionDisenoControllerUpdateById(id: number, configuracionDisenoPartial?: ConfiguracionDisenoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configuracionDisenoControllerUpdateById(id, configuracionDisenoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConfiguracionDisenoControllerApi - factory interface
 * @export
 */
export const ConfiguracionDisenoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfiguracionDisenoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configuracionDisenoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.configuracionDisenoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewConfiguracionDiseno} [newConfiguracionDiseno] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configuracionDisenoControllerCreate(newConfiguracionDiseno?: NewConfiguracionDiseno, options?: any): AxiosPromise<ConfiguracionDiseno> {
            return localVarFp.configuracionDisenoControllerCreate(newConfiguracionDiseno, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configuracionDisenoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.configuracionDisenoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ConfiguracionDisenoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configuracionDisenoControllerFind(filter?: ConfiguracionDisenoFilter1, options?: any): AxiosPromise<Array<ConfiguracionDisenoWithRelations>> {
            return localVarFp.configuracionDisenoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ConfiguracionDisenoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configuracionDisenoControllerFindById(id: number, filter?: ConfiguracionDisenoFilter, options?: any): AxiosPromise<ConfiguracionDisenoWithRelations> {
            return localVarFp.configuracionDisenoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ConfiguracionDiseno} [configuracionDiseno] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configuracionDisenoControllerReplaceById(id: number, configuracionDiseno?: ConfiguracionDiseno, options?: any): AxiosPromise<any> {
            return localVarFp.configuracionDisenoControllerReplaceById(id, configuracionDiseno, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ConfiguracionDisenoPartial} [configuracionDisenoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configuracionDisenoControllerUpdateAll(where?: { [key: string]: object; }, configuracionDisenoPartial?: ConfiguracionDisenoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.configuracionDisenoControllerUpdateAll(where, configuracionDisenoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ConfiguracionDisenoPartial} [configuracionDisenoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configuracionDisenoControllerUpdateById(id: number, configuracionDisenoPartial?: ConfiguracionDisenoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.configuracionDisenoControllerUpdateById(id, configuracionDisenoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfiguracionDisenoControllerApi - object-oriented interface
 * @export
 * @class ConfiguracionDisenoControllerApi
 * @extends {BaseAPI}
 */
export class ConfiguracionDisenoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfiguracionDisenoControllerApi
     */
    public configuracionDisenoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ConfiguracionDisenoControllerApiFp(this.configuration).configuracionDisenoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewConfiguracionDiseno} [newConfiguracionDiseno] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfiguracionDisenoControllerApi
     */
    public configuracionDisenoControllerCreate(newConfiguracionDiseno?: NewConfiguracionDiseno, options?: AxiosRequestConfig) {
        return ConfiguracionDisenoControllerApiFp(this.configuration).configuracionDisenoControllerCreate(newConfiguracionDiseno, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfiguracionDisenoControllerApi
     */
    public configuracionDisenoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ConfiguracionDisenoControllerApiFp(this.configuration).configuracionDisenoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ConfiguracionDisenoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfiguracionDisenoControllerApi
     */
    public configuracionDisenoControllerFind(filter?: ConfiguracionDisenoFilter1, options?: AxiosRequestConfig) {
        return ConfiguracionDisenoControllerApiFp(this.configuration).configuracionDisenoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ConfiguracionDisenoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfiguracionDisenoControllerApi
     */
    public configuracionDisenoControllerFindById(id: number, filter?: ConfiguracionDisenoFilter, options?: AxiosRequestConfig) {
        return ConfiguracionDisenoControllerApiFp(this.configuration).configuracionDisenoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ConfiguracionDiseno} [configuracionDiseno] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfiguracionDisenoControllerApi
     */
    public configuracionDisenoControllerReplaceById(id: number, configuracionDiseno?: ConfiguracionDiseno, options?: AxiosRequestConfig) {
        return ConfiguracionDisenoControllerApiFp(this.configuration).configuracionDisenoControllerReplaceById(id, configuracionDiseno, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ConfiguracionDisenoPartial} [configuracionDisenoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfiguracionDisenoControllerApi
     */
    public configuracionDisenoControllerUpdateAll(where?: { [key: string]: object; }, configuracionDisenoPartial?: ConfiguracionDisenoPartial, options?: AxiosRequestConfig) {
        return ConfiguracionDisenoControllerApiFp(this.configuration).configuracionDisenoControllerUpdateAll(where, configuracionDisenoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ConfiguracionDisenoPartial} [configuracionDisenoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfiguracionDisenoControllerApi
     */
    public configuracionDisenoControllerUpdateById(id: number, configuracionDisenoPartial?: ConfiguracionDisenoPartial, options?: AxiosRequestConfig) {
        return ConfiguracionDisenoControllerApiFp(this.configuration).configuracionDisenoControllerUpdateById(id, configuracionDisenoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EmpresaControllerApi - axios parameter creator
 * @export
 */
export const EmpresaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/empresas/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewEmpresa} [newEmpresa] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerCreate: async (newEmpresa?: NewEmpresa, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/empresas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newEmpresa, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('empresaControllerDeleteById', 'id', id)
            const localVarPath = `/empresas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmpresaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerFind: async (filter?: EmpresaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/empresas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerFindById: async (id: number, filter?: EmpresaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('empresaControllerFindById', 'id', id)
            const localVarPath = `/empresas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Empresa} [empresa] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerReplaceById: async (id: number, empresa?: Empresa, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('empresaControllerReplaceById', 'id', id)
            const localVarPath = `/empresas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(empresa, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EmpresaPartial} [empresaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerUpdateAll: async (where?: { [key: string]: object; }, empresaPartial?: EmpresaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/empresas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(empresaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresaPartial} [empresaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerUpdateById: async (id: number, empresaPartial?: EmpresaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('empresaControllerUpdateById', 'id', id)
            const localVarPath = `/empresas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(empresaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmpresaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerVistaEmpresaMoneda: async (filter?: EmpresaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaEmpresaMoneda`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerVistaEmpresaMonedaCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaEmpresaMonedaCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmpresaControllerApi - functional programming interface
 * @export
 */
export const EmpresaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmpresaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewEmpresa} [newEmpresa] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerCreate(newEmpresa?: NewEmpresa, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Empresa>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerCreate(newEmpresa, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EmpresaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerFind(filter?: EmpresaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmpresaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerFindById(id: number, filter?: EmpresaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmpresaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Empresa} [empresa] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerReplaceById(id: number, empresa?: Empresa, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerReplaceById(id, empresa, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EmpresaPartial} [empresaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerUpdateAll(where?: { [key: string]: object; }, empresaPartial?: EmpresaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerUpdateAll(where, empresaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresaPartial} [empresaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerUpdateById(id: number, empresaPartial?: EmpresaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerUpdateById(id, empresaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EmpresaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerVistaEmpresaMoneda(filter?: EmpresaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerVistaEmpresaMoneda(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerVistaEmpresaMonedaCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerVistaEmpresaMonedaCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmpresaControllerApi - factory interface
 * @export
 */
export const EmpresaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmpresaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.empresaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewEmpresa} [newEmpresa] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerCreate(newEmpresa?: NewEmpresa, options?: any): AxiosPromise<Empresa> {
            return localVarFp.empresaControllerCreate(newEmpresa, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.empresaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmpresaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerFind(filter?: EmpresaFilter1, options?: any): AxiosPromise<Array<EmpresaWithRelations>> {
            return localVarFp.empresaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerFindById(id: number, filter?: EmpresaFilter, options?: any): AxiosPromise<EmpresaWithRelations> {
            return localVarFp.empresaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Empresa} [empresa] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerReplaceById(id: number, empresa?: Empresa, options?: any): AxiosPromise<any> {
            return localVarFp.empresaControllerReplaceById(id, empresa, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EmpresaPartial} [empresaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerUpdateAll(where?: { [key: string]: object; }, empresaPartial?: EmpresaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.empresaControllerUpdateAll(where, empresaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresaPartial} [empresaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerUpdateById(id: number, empresaPartial?: EmpresaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.empresaControllerUpdateById(id, empresaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmpresaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerVistaEmpresaMoneda(filter?: EmpresaFilter1, options?: any): AxiosPromise<object> {
            return localVarFp.empresaControllerVistaEmpresaMoneda(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerVistaEmpresaMonedaCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<object> {
            return localVarFp.empresaControllerVistaEmpresaMonedaCount(where, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmpresaControllerApi - object-oriented interface
 * @export
 * @class EmpresaControllerApi
 * @extends {BaseAPI}
 */
export class EmpresaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewEmpresa} [newEmpresa] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerCreate(newEmpresa?: NewEmpresa, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerCreate(newEmpresa, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EmpresaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerFind(filter?: EmpresaFilter1, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EmpresaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerFindById(id: number, filter?: EmpresaFilter, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Empresa} [empresa] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerReplaceById(id: number, empresa?: Empresa, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerReplaceById(id, empresa, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {EmpresaPartial} [empresaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerUpdateAll(where?: { [key: string]: object; }, empresaPartial?: EmpresaPartial, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerUpdateAll(where, empresaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EmpresaPartial} [empresaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerUpdateById(id: number, empresaPartial?: EmpresaPartial, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerUpdateById(id, empresaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EmpresaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerVistaEmpresaMoneda(filter?: EmpresaFilter1, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerVistaEmpresaMoneda(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerVistaEmpresaMonedaCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerVistaEmpresaMonedaCount(where, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FileUploadControllerApi - axios parameter creator
 * @export
 */
export const FileUploadControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerAvatarUpload: async (folderPathDir: string, fileName: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderPathDir' is not null or undefined
            assertParamExists('fileUploadControllerAvatarUpload', 'folderPathDir', folderPathDir)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('fileUploadControllerAvatarUpload', 'fileName', fileName)
            const localVarPath = `/avatar-upload/{folderPathDir}/{fileName}`
                .replace(`{${"folderPathDir"}}`, encodeURIComponent(String(folderPathDir)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} imagen 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerDeleteFileByName: async (imagen: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imagen' is not null or undefined
            assertParamExists('fileUploadControllerDeleteFileByName', 'imagen', imagen)
            const localVarPath = `/files/{imagen}`
                .replace(`{${"imagen"}}`, encodeURIComponent(String(imagen)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerFileUpload: async (folderPathDir: string, fileName: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderPathDir' is not null or undefined
            assertParamExists('fileUploadControllerFileUpload', 'folderPathDir', folderPathDir)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('fileUploadControllerFileUpload', 'fileName', fileName)
            const localVarPath = `/files-upload/{folderPathDir}/{fileName}`
                .replace(`{${"folderPathDir"}}`, encodeURIComponent(String(folderPathDir)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerImageUpload: async (folderPathDir: string, fileName: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderPathDir' is not null or undefined
            assertParamExists('fileUploadControllerImageUpload', 'folderPathDir', folderPathDir)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('fileUploadControllerImageUpload', 'fileName', fileName)
            const localVarPath = `/images-upload/{folderPathDir}/{fileName}`
                .replace(`{${"folderPathDir"}}`, encodeURIComponent(String(folderPathDir)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileUploadControllerApi - functional programming interface
 * @export
 */
export const FileUploadControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileUploadControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUploadControllerAvatarUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileUploadControllerAvatarUpload(folderPathDir, fileName, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} imagen 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUploadControllerDeleteFileByName(imagen: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileUploadControllerDeleteFileByName(imagen, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUploadControllerFileUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileUploadControllerFileUpload(folderPathDir, fileName, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUploadControllerImageUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileUploadControllerImageUpload(folderPathDir, fileName, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileUploadControllerApi - factory interface
 * @export
 */
export const FileUploadControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileUploadControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerAvatarUpload(folderPathDir: string, fileName: string, file?: any, options?: any): AxiosPromise<object> {
            return localVarFp.fileUploadControllerAvatarUpload(folderPathDir, fileName, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} imagen 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerDeleteFileByName(imagen: string, options?: any): AxiosPromise<any> {
            return localVarFp.fileUploadControllerDeleteFileByName(imagen, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerFileUpload(folderPathDir: string, fileName: string, file?: any, options?: any): AxiosPromise<object> {
            return localVarFp.fileUploadControllerFileUpload(folderPathDir, fileName, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerImageUpload(folderPathDir: string, fileName: string, file?: any, options?: any): AxiosPromise<object> {
            return localVarFp.fileUploadControllerImageUpload(folderPathDir, fileName, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileUploadControllerApi - object-oriented interface
 * @export
 * @class FileUploadControllerApi
 * @extends {BaseAPI}
 */
export class FileUploadControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} folderPathDir 
     * @param {string} fileName 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadControllerApi
     */
    public fileUploadControllerAvatarUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig) {
        return FileUploadControllerApiFp(this.configuration).fileUploadControllerAvatarUpload(folderPathDir, fileName, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} imagen 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadControllerApi
     */
    public fileUploadControllerDeleteFileByName(imagen: string, options?: AxiosRequestConfig) {
        return FileUploadControllerApiFp(this.configuration).fileUploadControllerDeleteFileByName(imagen, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} folderPathDir 
     * @param {string} fileName 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadControllerApi
     */
    public fileUploadControllerFileUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig) {
        return FileUploadControllerApiFp(this.configuration).fileUploadControllerFileUpload(folderPathDir, fileName, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} folderPathDir 
     * @param {string} fileName 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadControllerApi
     */
    public fileUploadControllerImageUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig) {
        return FileUploadControllerApiFp(this.configuration).fileUploadControllerImageUpload(folderPathDir, fileName, file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GrupoAtributoControllerApi - axios parameter creator
 * @export
 */
export const GrupoAtributoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grupoAtributoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/grupo-atributos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewGrupoAtributo} [newGrupoAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grupoAtributoControllerCreate: async (newGrupoAtributo?: NewGrupoAtributo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/grupo-atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newGrupoAtributo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grupoAtributoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('grupoAtributoControllerDeleteById', 'id', id)
            const localVarPath = `/grupo-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrupoAtributoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grupoAtributoControllerFind: async (filter?: GrupoAtributoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/grupo-atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {GrupoAtributoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grupoAtributoControllerFindById: async (id: number, filter?: GrupoAtributoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('grupoAtributoControllerFindById', 'id', id)
            const localVarPath = `/grupo-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {GrupoAtributo} [grupoAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grupoAtributoControllerReplaceById: async (id: number, grupoAtributo?: GrupoAtributo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('grupoAtributoControllerReplaceById', 'id', id)
            const localVarPath = `/grupo-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(grupoAtributo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {GrupoAtributoPartial} [grupoAtributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grupoAtributoControllerUpdateAll: async (where?: { [key: string]: object; }, grupoAtributoPartial?: GrupoAtributoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/grupo-atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(grupoAtributoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {GrupoAtributoPartial} [grupoAtributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grupoAtributoControllerUpdateById: async (id: number, grupoAtributoPartial?: GrupoAtributoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('grupoAtributoControllerUpdateById', 'id', id)
            const localVarPath = `/grupo-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(grupoAtributoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GrupoAtributoControllerApi - functional programming interface
 * @export
 */
export const GrupoAtributoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GrupoAtributoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grupoAtributoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grupoAtributoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewGrupoAtributo} [newGrupoAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grupoAtributoControllerCreate(newGrupoAtributo?: NewGrupoAtributo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrupoAtributo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grupoAtributoControllerCreate(newGrupoAtributo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grupoAtributoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grupoAtributoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrupoAtributoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grupoAtributoControllerFind(filter?: GrupoAtributoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GrupoAtributoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grupoAtributoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {GrupoAtributoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grupoAtributoControllerFindById(id: number, filter?: GrupoAtributoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrupoAtributoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grupoAtributoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {GrupoAtributo} [grupoAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grupoAtributoControllerReplaceById(id: number, grupoAtributo?: GrupoAtributo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grupoAtributoControllerReplaceById(id, grupoAtributo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {GrupoAtributoPartial} [grupoAtributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grupoAtributoControllerUpdateAll(where?: { [key: string]: object; }, grupoAtributoPartial?: GrupoAtributoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grupoAtributoControllerUpdateAll(where, grupoAtributoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {GrupoAtributoPartial} [grupoAtributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grupoAtributoControllerUpdateById(id: number, grupoAtributoPartial?: GrupoAtributoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grupoAtributoControllerUpdateById(id, grupoAtributoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GrupoAtributoControllerApi - factory interface
 * @export
 */
export const GrupoAtributoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GrupoAtributoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grupoAtributoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.grupoAtributoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewGrupoAtributo} [newGrupoAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grupoAtributoControllerCreate(newGrupoAtributo?: NewGrupoAtributo, options?: any): AxiosPromise<GrupoAtributo> {
            return localVarFp.grupoAtributoControllerCreate(newGrupoAtributo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grupoAtributoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.grupoAtributoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrupoAtributoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grupoAtributoControllerFind(filter?: GrupoAtributoFilter1, options?: any): AxiosPromise<Array<GrupoAtributoWithRelations>> {
            return localVarFp.grupoAtributoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {GrupoAtributoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grupoAtributoControllerFindById(id: number, filter?: GrupoAtributoFilter, options?: any): AxiosPromise<GrupoAtributoWithRelations> {
            return localVarFp.grupoAtributoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {GrupoAtributo} [grupoAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grupoAtributoControllerReplaceById(id: number, grupoAtributo?: GrupoAtributo, options?: any): AxiosPromise<any> {
            return localVarFp.grupoAtributoControllerReplaceById(id, grupoAtributo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {GrupoAtributoPartial} [grupoAtributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grupoAtributoControllerUpdateAll(where?: { [key: string]: object; }, grupoAtributoPartial?: GrupoAtributoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.grupoAtributoControllerUpdateAll(where, grupoAtributoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {GrupoAtributoPartial} [grupoAtributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grupoAtributoControllerUpdateById(id: number, grupoAtributoPartial?: GrupoAtributoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.grupoAtributoControllerUpdateById(id, grupoAtributoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GrupoAtributoControllerApi - object-oriented interface
 * @export
 * @class GrupoAtributoControllerApi
 * @extends {BaseAPI}
 */
export class GrupoAtributoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrupoAtributoControllerApi
     */
    public grupoAtributoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return GrupoAtributoControllerApiFp(this.configuration).grupoAtributoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewGrupoAtributo} [newGrupoAtributo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrupoAtributoControllerApi
     */
    public grupoAtributoControllerCreate(newGrupoAtributo?: NewGrupoAtributo, options?: AxiosRequestConfig) {
        return GrupoAtributoControllerApiFp(this.configuration).grupoAtributoControllerCreate(newGrupoAtributo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrupoAtributoControllerApi
     */
    public grupoAtributoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return GrupoAtributoControllerApiFp(this.configuration).grupoAtributoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrupoAtributoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrupoAtributoControllerApi
     */
    public grupoAtributoControllerFind(filter?: GrupoAtributoFilter1, options?: AxiosRequestConfig) {
        return GrupoAtributoControllerApiFp(this.configuration).grupoAtributoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {GrupoAtributoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrupoAtributoControllerApi
     */
    public grupoAtributoControllerFindById(id: number, filter?: GrupoAtributoFilter, options?: AxiosRequestConfig) {
        return GrupoAtributoControllerApiFp(this.configuration).grupoAtributoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {GrupoAtributo} [grupoAtributo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrupoAtributoControllerApi
     */
    public grupoAtributoControllerReplaceById(id: number, grupoAtributo?: GrupoAtributo, options?: AxiosRequestConfig) {
        return GrupoAtributoControllerApiFp(this.configuration).grupoAtributoControllerReplaceById(id, grupoAtributo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {GrupoAtributoPartial} [grupoAtributoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrupoAtributoControllerApi
     */
    public grupoAtributoControllerUpdateAll(where?: { [key: string]: object; }, grupoAtributoPartial?: GrupoAtributoPartial, options?: AxiosRequestConfig) {
        return GrupoAtributoControllerApiFp(this.configuration).grupoAtributoControllerUpdateAll(where, grupoAtributoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {GrupoAtributoPartial} [grupoAtributoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrupoAtributoControllerApi
     */
    public grupoAtributoControllerUpdateById(id: number, grupoAtributoPartial?: GrupoAtributoPartial, options?: AxiosRequestConfig) {
        return GrupoAtributoControllerApiFp(this.configuration).grupoAtributoControllerUpdateById(id, grupoAtributoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IconoControllerApi - axios parameter creator
 * @export
 */
export const IconoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iconoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/iconos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewIcono} [newIcono] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iconoControllerCreate: async (newIcono?: NewIcono, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/iconos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newIcono, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iconoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('iconoControllerDeleteById', 'id', id)
            const localVarPath = `/iconos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IconoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iconoControllerFind: async (filter?: IconoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/iconos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IconoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iconoControllerFindById: async (id: number, filter?: IconoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('iconoControllerFindById', 'id', id)
            const localVarPath = `/iconos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Icono} [icono] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iconoControllerReplaceById: async (id: number, icono?: Icono, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('iconoControllerReplaceById', 'id', id)
            const localVarPath = `/iconos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(icono, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IconoPartial} [iconoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iconoControllerUpdateAll: async (where?: { [key: string]: object; }, iconoPartial?: IconoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/iconos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iconoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IconoPartial} [iconoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iconoControllerUpdateById: async (id: number, iconoPartial?: IconoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('iconoControllerUpdateById', 'id', id)
            const localVarPath = `/iconos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iconoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IconoControllerApi - functional programming interface
 * @export
 */
export const IconoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IconoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iconoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iconoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewIcono} [newIcono] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iconoControllerCreate(newIcono?: NewIcono, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Icono>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iconoControllerCreate(newIcono, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iconoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iconoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IconoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iconoControllerFind(filter?: IconoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IconoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iconoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IconoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iconoControllerFindById(id: number, filter?: IconoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IconoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iconoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Icono} [icono] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iconoControllerReplaceById(id: number, icono?: Icono, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iconoControllerReplaceById(id, icono, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IconoPartial} [iconoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iconoControllerUpdateAll(where?: { [key: string]: object; }, iconoPartial?: IconoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iconoControllerUpdateAll(where, iconoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IconoPartial} [iconoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iconoControllerUpdateById(id: number, iconoPartial?: IconoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iconoControllerUpdateById(id, iconoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IconoControllerApi - factory interface
 * @export
 */
export const IconoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IconoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iconoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.iconoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewIcono} [newIcono] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iconoControllerCreate(newIcono?: NewIcono, options?: any): AxiosPromise<Icono> {
            return localVarFp.iconoControllerCreate(newIcono, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iconoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.iconoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IconoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iconoControllerFind(filter?: IconoFilter1, options?: any): AxiosPromise<Array<IconoWithRelations>> {
            return localVarFp.iconoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IconoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iconoControllerFindById(id: number, filter?: IconoFilter, options?: any): AxiosPromise<IconoWithRelations> {
            return localVarFp.iconoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Icono} [icono] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iconoControllerReplaceById(id: number, icono?: Icono, options?: any): AxiosPromise<any> {
            return localVarFp.iconoControllerReplaceById(id, icono, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IconoPartial} [iconoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iconoControllerUpdateAll(where?: { [key: string]: object; }, iconoPartial?: IconoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.iconoControllerUpdateAll(where, iconoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IconoPartial} [iconoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iconoControllerUpdateById(id: number, iconoPartial?: IconoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.iconoControllerUpdateById(id, iconoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IconoControllerApi - object-oriented interface
 * @export
 * @class IconoControllerApi
 * @extends {BaseAPI}
 */
export class IconoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IconoControllerApi
     */
    public iconoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return IconoControllerApiFp(this.configuration).iconoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewIcono} [newIcono] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IconoControllerApi
     */
    public iconoControllerCreate(newIcono?: NewIcono, options?: AxiosRequestConfig) {
        return IconoControllerApiFp(this.configuration).iconoControllerCreate(newIcono, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IconoControllerApi
     */
    public iconoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return IconoControllerApiFp(this.configuration).iconoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IconoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IconoControllerApi
     */
    public iconoControllerFind(filter?: IconoFilter1, options?: AxiosRequestConfig) {
        return IconoControllerApiFp(this.configuration).iconoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {IconoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IconoControllerApi
     */
    public iconoControllerFindById(id: number, filter?: IconoFilter, options?: AxiosRequestConfig) {
        return IconoControllerApiFp(this.configuration).iconoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Icono} [icono] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IconoControllerApi
     */
    public iconoControllerReplaceById(id: number, icono?: Icono, options?: AxiosRequestConfig) {
        return IconoControllerApiFp(this.configuration).iconoControllerReplaceById(id, icono, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {IconoPartial} [iconoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IconoControllerApi
     */
    public iconoControllerUpdateAll(where?: { [key: string]: object; }, iconoPartial?: IconoPartial, options?: AxiosRequestConfig) {
        return IconoControllerApiFp(this.configuration).iconoControllerUpdateAll(where, iconoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {IconoPartial} [iconoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IconoControllerApi
     */
    public iconoControllerUpdateById(id: number, iconoPartial?: IconoPartial, options?: AxiosRequestConfig) {
        return IconoControllerApiFp(this.configuration).iconoControllerUpdateById(id, iconoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IdiomaControllerApi - axios parameter creator
 * @export
 */
export const IdiomaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/idiomas/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewIdioma} [newIdioma] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerCreate: async (newIdioma?: NewIdioma, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/idiomas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newIdioma, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('idiomaControllerDeleteById', 'id', id)
            const localVarPath = `/idiomas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IdiomaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerFind: async (filter?: IdiomaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/idiomas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerFindById: async (id: number, filter?: IdiomaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('idiomaControllerFindById', 'id', id)
            const localVarPath = `/idiomas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Idioma} [idioma] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerReplaceById: async (id: number, idioma?: Idioma, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('idiomaControllerReplaceById', 'id', id)
            const localVarPath = `/idiomas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idioma, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IdiomaPartial} [idiomaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerUpdateAll: async (where?: { [key: string]: object; }, idiomaPartial?: IdiomaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/idiomas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiomaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomaPartial} [idiomaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerUpdateById: async (id: number, idiomaPartial?: IdiomaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('idiomaControllerUpdateById', 'id', id)
            const localVarPath = `/idiomas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiomaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdiomaControllerApi - functional programming interface
 * @export
 */
export const IdiomaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdiomaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewIdioma} [newIdioma] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerCreate(newIdioma?: NewIdioma, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Idioma>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerCreate(newIdioma, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IdiomaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerFind(filter?: IdiomaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdiomaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerFindById(id: number, filter?: IdiomaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdiomaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Idioma} [idioma] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerReplaceById(id: number, idioma?: Idioma, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerReplaceById(id, idioma, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IdiomaPartial} [idiomaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerUpdateAll(where?: { [key: string]: object; }, idiomaPartial?: IdiomaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerUpdateAll(where, idiomaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomaPartial} [idiomaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerUpdateById(id: number, idiomaPartial?: IdiomaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerUpdateById(id, idiomaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IdiomaControllerApi - factory interface
 * @export
 */
export const IdiomaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdiomaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.idiomaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewIdioma} [newIdioma] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerCreate(newIdioma?: NewIdioma, options?: any): AxiosPromise<Idioma> {
            return localVarFp.idiomaControllerCreate(newIdioma, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.idiomaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IdiomaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerFind(filter?: IdiomaFilter1, options?: any): AxiosPromise<Array<IdiomaWithRelations>> {
            return localVarFp.idiomaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerFindById(id: number, filter?: IdiomaFilter, options?: any): AxiosPromise<IdiomaWithRelations> {
            return localVarFp.idiomaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Idioma} [idioma] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerReplaceById(id: number, idioma?: Idioma, options?: any): AxiosPromise<any> {
            return localVarFp.idiomaControllerReplaceById(id, idioma, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IdiomaPartial} [idiomaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerUpdateAll(where?: { [key: string]: object; }, idiomaPartial?: IdiomaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.idiomaControllerUpdateAll(where, idiomaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomaPartial} [idiomaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerUpdateById(id: number, idiomaPartial?: IdiomaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.idiomaControllerUpdateById(id, idiomaPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdiomaControllerApi - object-oriented interface
 * @export
 * @class IdiomaControllerApi
 * @extends {BaseAPI}
 */
export class IdiomaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewIdioma} [newIdioma] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerCreate(newIdioma?: NewIdioma, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerCreate(newIdioma, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdiomaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerFind(filter?: IdiomaFilter1, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {IdiomaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerFindById(id: number, filter?: IdiomaFilter, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Idioma} [idioma] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerReplaceById(id: number, idioma?: Idioma, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerReplaceById(id, idioma, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {IdiomaPartial} [idiomaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerUpdateAll(where?: { [key: string]: object; }, idiomaPartial?: IdiomaPartial, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerUpdateAll(where, idiomaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {IdiomaPartial} [idiomaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerUpdateById(id: number, idiomaPartial?: IdiomaPartial, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerUpdateById(id, idiomaPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LogAccesoControllerApi - axios parameter creator
 * @export
 */
export const LogAccesoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logAccesoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-accesos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewLogAcceso} [newLogAcceso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logAccesoControllerCreate: async (newLogAcceso?: NewLogAcceso, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-accesos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newLogAcceso, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logAccesoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logAccesoControllerDeleteById', 'id', id)
            const localVarPath = `/log-accesos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LogAccesoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logAccesoControllerFind: async (filter?: LogAccesoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-accesos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogAccesoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logAccesoControllerFindById: async (id: number, filter?: LogAccesoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logAccesoControllerFindById', 'id', id)
            const localVarPath = `/log-accesos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogAcceso} [logAcceso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logAccesoControllerReplaceById: async (id: number, logAcceso?: LogAcceso, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logAccesoControllerReplaceById', 'id', id)
            const localVarPath = `/log-accesos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logAcceso, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {LogAccesoPartial} [logAccesoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logAccesoControllerUpdateAll: async (where?: { [key: string]: object; }, logAccesoPartial?: LogAccesoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-accesos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logAccesoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogAccesoPartial} [logAccesoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logAccesoControllerUpdateById: async (id: number, logAccesoPartial?: LogAccesoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logAccesoControllerUpdateById', 'id', id)
            const localVarPath = `/log-accesos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logAccesoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogAccesoControllerApi - functional programming interface
 * @export
 */
export const LogAccesoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogAccesoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logAccesoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logAccesoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewLogAcceso} [newLogAcceso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logAccesoControllerCreate(newLogAcceso?: NewLogAcceso, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogAcceso>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logAccesoControllerCreate(newLogAcceso, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logAccesoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logAccesoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LogAccesoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logAccesoControllerFind(filter?: LogAccesoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LogAccesoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logAccesoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogAccesoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logAccesoControllerFindById(id: number, filter?: LogAccesoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogAccesoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logAccesoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogAcceso} [logAcceso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logAccesoControllerReplaceById(id: number, logAcceso?: LogAcceso, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logAccesoControllerReplaceById(id, logAcceso, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {LogAccesoPartial} [logAccesoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logAccesoControllerUpdateAll(where?: { [key: string]: object; }, logAccesoPartial?: LogAccesoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logAccesoControllerUpdateAll(where, logAccesoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogAccesoPartial} [logAccesoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logAccesoControllerUpdateById(id: number, logAccesoPartial?: LogAccesoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logAccesoControllerUpdateById(id, logAccesoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogAccesoControllerApi - factory interface
 * @export
 */
export const LogAccesoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogAccesoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logAccesoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.logAccesoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewLogAcceso} [newLogAcceso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logAccesoControllerCreate(newLogAcceso?: NewLogAcceso, options?: any): AxiosPromise<LogAcceso> {
            return localVarFp.logAccesoControllerCreate(newLogAcceso, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logAccesoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.logAccesoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LogAccesoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logAccesoControllerFind(filter?: LogAccesoFilter1, options?: any): AxiosPromise<Array<LogAccesoWithRelations>> {
            return localVarFp.logAccesoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LogAccesoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logAccesoControllerFindById(id: number, filter?: LogAccesoFilter, options?: any): AxiosPromise<LogAccesoWithRelations> {
            return localVarFp.logAccesoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LogAcceso} [logAcceso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logAccesoControllerReplaceById(id: number, logAcceso?: LogAcceso, options?: any): AxiosPromise<any> {
            return localVarFp.logAccesoControllerReplaceById(id, logAcceso, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {LogAccesoPartial} [logAccesoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logAccesoControllerUpdateAll(where?: { [key: string]: object; }, logAccesoPartial?: LogAccesoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.logAccesoControllerUpdateAll(where, logAccesoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LogAccesoPartial} [logAccesoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logAccesoControllerUpdateById(id: number, logAccesoPartial?: LogAccesoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.logAccesoControllerUpdateById(id, logAccesoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogAccesoControllerApi - object-oriented interface
 * @export
 * @class LogAccesoControllerApi
 * @extends {BaseAPI}
 */
export class LogAccesoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogAccesoControllerApi
     */
    public logAccesoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return LogAccesoControllerApiFp(this.configuration).logAccesoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewLogAcceso} [newLogAcceso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogAccesoControllerApi
     */
    public logAccesoControllerCreate(newLogAcceso?: NewLogAcceso, options?: AxiosRequestConfig) {
        return LogAccesoControllerApiFp(this.configuration).logAccesoControllerCreate(newLogAcceso, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogAccesoControllerApi
     */
    public logAccesoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return LogAccesoControllerApiFp(this.configuration).logAccesoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LogAccesoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogAccesoControllerApi
     */
    public logAccesoControllerFind(filter?: LogAccesoFilter1, options?: AxiosRequestConfig) {
        return LogAccesoControllerApiFp(this.configuration).logAccesoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LogAccesoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogAccesoControllerApi
     */
    public logAccesoControllerFindById(id: number, filter?: LogAccesoFilter, options?: AxiosRequestConfig) {
        return LogAccesoControllerApiFp(this.configuration).logAccesoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LogAcceso} [logAcceso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogAccesoControllerApi
     */
    public logAccesoControllerReplaceById(id: number, logAcceso?: LogAcceso, options?: AxiosRequestConfig) {
        return LogAccesoControllerApiFp(this.configuration).logAccesoControllerReplaceById(id, logAcceso, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {LogAccesoPartial} [logAccesoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogAccesoControllerApi
     */
    public logAccesoControllerUpdateAll(where?: { [key: string]: object; }, logAccesoPartial?: LogAccesoPartial, options?: AxiosRequestConfig) {
        return LogAccesoControllerApiFp(this.configuration).logAccesoControllerUpdateAll(where, logAccesoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LogAccesoPartial} [logAccesoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogAccesoControllerApi
     */
    public logAccesoControllerUpdateById(id: number, logAccesoPartial?: LogAccesoPartial, options?: AxiosRequestConfig) {
        return LogAccesoControllerApiFp(this.configuration).logAccesoControllerUpdateById(id, logAccesoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LogExportacionControllerApi - axios parameter creator
 * @export
 */
export const LogExportacionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logExportacionControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-exportacions/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewLogExportacion} [newLogExportacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logExportacionControllerCreate: async (newLogExportacion?: NewLogExportacion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-exportacions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newLogExportacion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logExportacionControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logExportacionControllerDeleteById', 'id', id)
            const localVarPath = `/log-exportacions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LogExportacionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logExportacionControllerFind: async (filter?: LogExportacionFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-exportacions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogExportacionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logExportacionControllerFindById: async (id: number, filter?: LogExportacionFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logExportacionControllerFindById', 'id', id)
            const localVarPath = `/log-exportacions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogExportacion} [logExportacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logExportacionControllerReplaceById: async (id: number, logExportacion?: LogExportacion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logExportacionControllerReplaceById', 'id', id)
            const localVarPath = `/log-exportacions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logExportacion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {LogExportacionPartial} [logExportacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logExportacionControllerUpdateAll: async (where?: { [key: string]: object; }, logExportacionPartial?: LogExportacionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-exportacions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logExportacionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogExportacionPartial} [logExportacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logExportacionControllerUpdateById: async (id: number, logExportacionPartial?: LogExportacionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logExportacionControllerUpdateById', 'id', id)
            const localVarPath = `/log-exportacions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logExportacionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogExportacionControllerApi - functional programming interface
 * @export
 */
export const LogExportacionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogExportacionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logExportacionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logExportacionControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewLogExportacion} [newLogExportacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logExportacionControllerCreate(newLogExportacion?: NewLogExportacion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogExportacion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logExportacionControllerCreate(newLogExportacion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logExportacionControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logExportacionControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LogExportacionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logExportacionControllerFind(filter?: LogExportacionFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LogExportacionWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logExportacionControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogExportacionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logExportacionControllerFindById(id: number, filter?: LogExportacionFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogExportacionWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logExportacionControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogExportacion} [logExportacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logExportacionControllerReplaceById(id: number, logExportacion?: LogExportacion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logExportacionControllerReplaceById(id, logExportacion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {LogExportacionPartial} [logExportacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logExportacionControllerUpdateAll(where?: { [key: string]: object; }, logExportacionPartial?: LogExportacionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logExportacionControllerUpdateAll(where, logExportacionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogExportacionPartial} [logExportacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logExportacionControllerUpdateById(id: number, logExportacionPartial?: LogExportacionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logExportacionControllerUpdateById(id, logExportacionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogExportacionControllerApi - factory interface
 * @export
 */
export const LogExportacionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogExportacionControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logExportacionControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.logExportacionControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewLogExportacion} [newLogExportacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logExportacionControllerCreate(newLogExportacion?: NewLogExportacion, options?: any): AxiosPromise<LogExportacion> {
            return localVarFp.logExportacionControllerCreate(newLogExportacion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logExportacionControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.logExportacionControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LogExportacionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logExportacionControllerFind(filter?: LogExportacionFilter1, options?: any): AxiosPromise<Array<LogExportacionWithRelations>> {
            return localVarFp.logExportacionControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LogExportacionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logExportacionControllerFindById(id: number, filter?: LogExportacionFilter, options?: any): AxiosPromise<LogExportacionWithRelations> {
            return localVarFp.logExportacionControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LogExportacion} [logExportacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logExportacionControllerReplaceById(id: number, logExportacion?: LogExportacion, options?: any): AxiosPromise<any> {
            return localVarFp.logExportacionControllerReplaceById(id, logExportacion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {LogExportacionPartial} [logExportacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logExportacionControllerUpdateAll(where?: { [key: string]: object; }, logExportacionPartial?: LogExportacionPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.logExportacionControllerUpdateAll(where, logExportacionPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LogExportacionPartial} [logExportacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logExportacionControllerUpdateById(id: number, logExportacionPartial?: LogExportacionPartial, options?: any): AxiosPromise<any> {
            return localVarFp.logExportacionControllerUpdateById(id, logExportacionPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogExportacionControllerApi - object-oriented interface
 * @export
 * @class LogExportacionControllerApi
 * @extends {BaseAPI}
 */
export class LogExportacionControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogExportacionControllerApi
     */
    public logExportacionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return LogExportacionControllerApiFp(this.configuration).logExportacionControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewLogExportacion} [newLogExportacion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogExportacionControllerApi
     */
    public logExportacionControllerCreate(newLogExportacion?: NewLogExportacion, options?: AxiosRequestConfig) {
        return LogExportacionControllerApiFp(this.configuration).logExportacionControllerCreate(newLogExportacion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogExportacionControllerApi
     */
    public logExportacionControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return LogExportacionControllerApiFp(this.configuration).logExportacionControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LogExportacionFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogExportacionControllerApi
     */
    public logExportacionControllerFind(filter?: LogExportacionFilter1, options?: AxiosRequestConfig) {
        return LogExportacionControllerApiFp(this.configuration).logExportacionControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LogExportacionFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogExportacionControllerApi
     */
    public logExportacionControllerFindById(id: number, filter?: LogExportacionFilter, options?: AxiosRequestConfig) {
        return LogExportacionControllerApiFp(this.configuration).logExportacionControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LogExportacion} [logExportacion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogExportacionControllerApi
     */
    public logExportacionControllerReplaceById(id: number, logExportacion?: LogExportacion, options?: AxiosRequestConfig) {
        return LogExportacionControllerApiFp(this.configuration).logExportacionControllerReplaceById(id, logExportacion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {LogExportacionPartial} [logExportacionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogExportacionControllerApi
     */
    public logExportacionControllerUpdateAll(where?: { [key: string]: object; }, logExportacionPartial?: LogExportacionPartial, options?: AxiosRequestConfig) {
        return LogExportacionControllerApiFp(this.configuration).logExportacionControllerUpdateAll(where, logExportacionPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LogExportacionPartial} [logExportacionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogExportacionControllerApi
     */
    public logExportacionControllerUpdateById(id: number, logExportacionPartial?: LogExportacionPartial, options?: AxiosRequestConfig) {
        return LogExportacionControllerApiFp(this.configuration).logExportacionControllerUpdateById(id, logExportacionPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LogImportacionControllerApi - axios parameter creator
 * @export
 */
export const LogImportacionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logImportacionControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-importacions/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewLogImportacion} [newLogImportacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logImportacionControllerCreate: async (newLogImportacion?: NewLogImportacion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-importacions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newLogImportacion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logImportacionControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logImportacionControllerDeleteById', 'id', id)
            const localVarPath = `/log-importacions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LogImportacionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logImportacionControllerFind: async (filter?: LogImportacionFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-importacions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogImportacionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logImportacionControllerFindById: async (id: number, filter?: LogImportacionFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logImportacionControllerFindById', 'id', id)
            const localVarPath = `/log-importacions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogImportacion} [logImportacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logImportacionControllerReplaceById: async (id: number, logImportacion?: LogImportacion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logImportacionControllerReplaceById', 'id', id)
            const localVarPath = `/log-importacions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logImportacion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {LogImportacionPartial} [logImportacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logImportacionControllerUpdateAll: async (where?: { [key: string]: object; }, logImportacionPartial?: LogImportacionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-importacions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logImportacionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogImportacionPartial} [logImportacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logImportacionControllerUpdateById: async (id: number, logImportacionPartial?: LogImportacionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logImportacionControllerUpdateById', 'id', id)
            const localVarPath = `/log-importacions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logImportacionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogImportacionControllerApi - functional programming interface
 * @export
 */
export const LogImportacionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogImportacionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logImportacionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logImportacionControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewLogImportacion} [newLogImportacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logImportacionControllerCreate(newLogImportacion?: NewLogImportacion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogImportacion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logImportacionControllerCreate(newLogImportacion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logImportacionControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logImportacionControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LogImportacionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logImportacionControllerFind(filter?: LogImportacionFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LogImportacionWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logImportacionControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogImportacionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logImportacionControllerFindById(id: number, filter?: LogImportacionFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogImportacionWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logImportacionControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogImportacion} [logImportacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logImportacionControllerReplaceById(id: number, logImportacion?: LogImportacion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logImportacionControllerReplaceById(id, logImportacion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {LogImportacionPartial} [logImportacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logImportacionControllerUpdateAll(where?: { [key: string]: object; }, logImportacionPartial?: LogImportacionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logImportacionControllerUpdateAll(where, logImportacionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogImportacionPartial} [logImportacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logImportacionControllerUpdateById(id: number, logImportacionPartial?: LogImportacionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logImportacionControllerUpdateById(id, logImportacionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogImportacionControllerApi - factory interface
 * @export
 */
export const LogImportacionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogImportacionControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logImportacionControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.logImportacionControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewLogImportacion} [newLogImportacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logImportacionControllerCreate(newLogImportacion?: NewLogImportacion, options?: any): AxiosPromise<LogImportacion> {
            return localVarFp.logImportacionControllerCreate(newLogImportacion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logImportacionControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.logImportacionControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LogImportacionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logImportacionControllerFind(filter?: LogImportacionFilter1, options?: any): AxiosPromise<Array<LogImportacionWithRelations>> {
            return localVarFp.logImportacionControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LogImportacionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logImportacionControllerFindById(id: number, filter?: LogImportacionFilter, options?: any): AxiosPromise<LogImportacionWithRelations> {
            return localVarFp.logImportacionControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LogImportacion} [logImportacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logImportacionControllerReplaceById(id: number, logImportacion?: LogImportacion, options?: any): AxiosPromise<any> {
            return localVarFp.logImportacionControllerReplaceById(id, logImportacion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {LogImportacionPartial} [logImportacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logImportacionControllerUpdateAll(where?: { [key: string]: object; }, logImportacionPartial?: LogImportacionPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.logImportacionControllerUpdateAll(where, logImportacionPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LogImportacionPartial} [logImportacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logImportacionControllerUpdateById(id: number, logImportacionPartial?: LogImportacionPartial, options?: any): AxiosPromise<any> {
            return localVarFp.logImportacionControllerUpdateById(id, logImportacionPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogImportacionControllerApi - object-oriented interface
 * @export
 * @class LogImportacionControllerApi
 * @extends {BaseAPI}
 */
export class LogImportacionControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogImportacionControllerApi
     */
    public logImportacionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return LogImportacionControllerApiFp(this.configuration).logImportacionControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewLogImportacion} [newLogImportacion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogImportacionControllerApi
     */
    public logImportacionControllerCreate(newLogImportacion?: NewLogImportacion, options?: AxiosRequestConfig) {
        return LogImportacionControllerApiFp(this.configuration).logImportacionControllerCreate(newLogImportacion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogImportacionControllerApi
     */
    public logImportacionControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return LogImportacionControllerApiFp(this.configuration).logImportacionControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LogImportacionFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogImportacionControllerApi
     */
    public logImportacionControllerFind(filter?: LogImportacionFilter1, options?: AxiosRequestConfig) {
        return LogImportacionControllerApiFp(this.configuration).logImportacionControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LogImportacionFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogImportacionControllerApi
     */
    public logImportacionControllerFindById(id: number, filter?: LogImportacionFilter, options?: AxiosRequestConfig) {
        return LogImportacionControllerApiFp(this.configuration).logImportacionControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LogImportacion} [logImportacion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogImportacionControllerApi
     */
    public logImportacionControllerReplaceById(id: number, logImportacion?: LogImportacion, options?: AxiosRequestConfig) {
        return LogImportacionControllerApiFp(this.configuration).logImportacionControllerReplaceById(id, logImportacion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {LogImportacionPartial} [logImportacionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogImportacionControllerApi
     */
    public logImportacionControllerUpdateAll(where?: { [key: string]: object; }, logImportacionPartial?: LogImportacionPartial, options?: AxiosRequestConfig) {
        return LogImportacionControllerApiFp(this.configuration).logImportacionControllerUpdateAll(where, logImportacionPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LogImportacionPartial} [logImportacionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogImportacionControllerApi
     */
    public logImportacionControllerUpdateById(id: number, logImportacionPartial?: LogImportacionPartial, options?: AxiosRequestConfig) {
        return LogImportacionControllerApiFp(this.configuration).logImportacionControllerUpdateById(id, logImportacionPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LogSincronizacionControllerApi - axios parameter creator
 * @export
 */
export const LogSincronizacionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logSincronizacionControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-sincronizacions/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewLogSincronizacion} [newLogSincronizacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logSincronizacionControllerCreate: async (newLogSincronizacion?: NewLogSincronizacion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-sincronizacions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newLogSincronizacion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logSincronizacionControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logSincronizacionControllerDeleteById', 'id', id)
            const localVarPath = `/log-sincronizacions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LogSincronizacionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logSincronizacionControllerFind: async (filter?: LogSincronizacionFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-sincronizacions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogSincronizacionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logSincronizacionControllerFindById: async (id: number, filter?: LogSincronizacionFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logSincronizacionControllerFindById', 'id', id)
            const localVarPath = `/log-sincronizacions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogSincronizacion} [logSincronizacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logSincronizacionControllerReplaceById: async (id: number, logSincronizacion?: LogSincronizacion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logSincronizacionControllerReplaceById', 'id', id)
            const localVarPath = `/log-sincronizacions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logSincronizacion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {LogSincronizacionPartial} [logSincronizacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logSincronizacionControllerUpdateAll: async (where?: { [key: string]: object; }, logSincronizacionPartial?: LogSincronizacionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-sincronizacions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logSincronizacionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogSincronizacionPartial} [logSincronizacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logSincronizacionControllerUpdateById: async (id: number, logSincronizacionPartial?: LogSincronizacionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logSincronizacionControllerUpdateById', 'id', id)
            const localVarPath = `/log-sincronizacions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logSincronizacionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogSincronizacionControllerApi - functional programming interface
 * @export
 */
export const LogSincronizacionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogSincronizacionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logSincronizacionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logSincronizacionControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewLogSincronizacion} [newLogSincronizacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logSincronizacionControllerCreate(newLogSincronizacion?: NewLogSincronizacion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogSincronizacion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logSincronizacionControllerCreate(newLogSincronizacion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logSincronizacionControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logSincronizacionControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LogSincronizacionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logSincronizacionControllerFind(filter?: LogSincronizacionFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LogSincronizacionWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logSincronizacionControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogSincronizacionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logSincronizacionControllerFindById(id: number, filter?: LogSincronizacionFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogSincronizacionWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logSincronizacionControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogSincronizacion} [logSincronizacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logSincronizacionControllerReplaceById(id: number, logSincronizacion?: LogSincronizacion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logSincronizacionControllerReplaceById(id, logSincronizacion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {LogSincronizacionPartial} [logSincronizacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logSincronizacionControllerUpdateAll(where?: { [key: string]: object; }, logSincronizacionPartial?: LogSincronizacionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logSincronizacionControllerUpdateAll(where, logSincronizacionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogSincronizacionPartial} [logSincronizacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logSincronizacionControllerUpdateById(id: number, logSincronizacionPartial?: LogSincronizacionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logSincronizacionControllerUpdateById(id, logSincronizacionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogSincronizacionControllerApi - factory interface
 * @export
 */
export const LogSincronizacionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogSincronizacionControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logSincronizacionControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.logSincronizacionControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewLogSincronizacion} [newLogSincronizacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logSincronizacionControllerCreate(newLogSincronizacion?: NewLogSincronizacion, options?: any): AxiosPromise<LogSincronizacion> {
            return localVarFp.logSincronizacionControllerCreate(newLogSincronizacion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logSincronizacionControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.logSincronizacionControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LogSincronizacionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logSincronizacionControllerFind(filter?: LogSincronizacionFilter1, options?: any): AxiosPromise<Array<LogSincronizacionWithRelations>> {
            return localVarFp.logSincronizacionControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LogSincronizacionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logSincronizacionControllerFindById(id: number, filter?: LogSincronizacionFilter, options?: any): AxiosPromise<LogSincronizacionWithRelations> {
            return localVarFp.logSincronizacionControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LogSincronizacion} [logSincronizacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logSincronizacionControllerReplaceById(id: number, logSincronizacion?: LogSincronizacion, options?: any): AxiosPromise<any> {
            return localVarFp.logSincronizacionControllerReplaceById(id, logSincronizacion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {LogSincronizacionPartial} [logSincronizacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logSincronizacionControllerUpdateAll(where?: { [key: string]: object; }, logSincronizacionPartial?: LogSincronizacionPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.logSincronizacionControllerUpdateAll(where, logSincronizacionPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LogSincronizacionPartial} [logSincronizacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logSincronizacionControllerUpdateById(id: number, logSincronizacionPartial?: LogSincronizacionPartial, options?: any): AxiosPromise<any> {
            return localVarFp.logSincronizacionControllerUpdateById(id, logSincronizacionPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogSincronizacionControllerApi - object-oriented interface
 * @export
 * @class LogSincronizacionControllerApi
 * @extends {BaseAPI}
 */
export class LogSincronizacionControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogSincronizacionControllerApi
     */
    public logSincronizacionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return LogSincronizacionControllerApiFp(this.configuration).logSincronizacionControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewLogSincronizacion} [newLogSincronizacion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogSincronizacionControllerApi
     */
    public logSincronizacionControllerCreate(newLogSincronizacion?: NewLogSincronizacion, options?: AxiosRequestConfig) {
        return LogSincronizacionControllerApiFp(this.configuration).logSincronizacionControllerCreate(newLogSincronizacion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogSincronizacionControllerApi
     */
    public logSincronizacionControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return LogSincronizacionControllerApiFp(this.configuration).logSincronizacionControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LogSincronizacionFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogSincronizacionControllerApi
     */
    public logSincronizacionControllerFind(filter?: LogSincronizacionFilter1, options?: AxiosRequestConfig) {
        return LogSincronizacionControllerApiFp(this.configuration).logSincronizacionControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LogSincronizacionFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogSincronizacionControllerApi
     */
    public logSincronizacionControllerFindById(id: number, filter?: LogSincronizacionFilter, options?: AxiosRequestConfig) {
        return LogSincronizacionControllerApiFp(this.configuration).logSincronizacionControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LogSincronizacion} [logSincronizacion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogSincronizacionControllerApi
     */
    public logSincronizacionControllerReplaceById(id: number, logSincronizacion?: LogSincronizacion, options?: AxiosRequestConfig) {
        return LogSincronizacionControllerApiFp(this.configuration).logSincronizacionControllerReplaceById(id, logSincronizacion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {LogSincronizacionPartial} [logSincronizacionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogSincronizacionControllerApi
     */
    public logSincronizacionControllerUpdateAll(where?: { [key: string]: object; }, logSincronizacionPartial?: LogSincronizacionPartial, options?: AxiosRequestConfig) {
        return LogSincronizacionControllerApiFp(this.configuration).logSincronizacionControllerUpdateAll(where, logSincronizacionPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LogSincronizacionPartial} [logSincronizacionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogSincronizacionControllerApi
     */
    public logSincronizacionControllerUpdateById(id: number, logSincronizacionPartial?: LogSincronizacionPartial, options?: AxiosRequestConfig) {
        return LogSincronizacionControllerApiFp(this.configuration).logSincronizacionControllerUpdateById(id, logSincronizacionPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MarcaControllerApi - axios parameter creator
 * @export
 */
export const MarcaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marcas/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewMarca} [newMarca] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerCreate: async (newMarca?: NewMarca, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marcas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newMarca, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marcaControllerDeleteById', 'id', id)
            const localVarPath = `/marcas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MarcaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerFind: async (filter?: MarcaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marcas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MarcaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerFindById: async (id: number, filter?: MarcaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marcaControllerFindById', 'id', id)
            const localVarPath = `/marcas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Marca} [marca] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerReplaceById: async (id: number, marca?: Marca, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marcaControllerReplaceById', 'id', id)
            const localVarPath = `/marcas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(marca, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MarcaPartial} [marcaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerUpdateAll: async (where?: { [key: string]: object; }, marcaPartial?: MarcaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marcas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(marcaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MarcaPartial} [marcaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerUpdateById: async (id: number, marcaPartial?: MarcaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marcaControllerUpdateById', 'id', id)
            const localVarPath = `/marcas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(marcaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarcaControllerApi - functional programming interface
 * @export
 */
export const MarcaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MarcaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marcaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marcaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewMarca} [newMarca] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marcaControllerCreate(newMarca?: NewMarca, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Marca>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marcaControllerCreate(newMarca, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marcaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marcaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MarcaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marcaControllerFind(filter?: MarcaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarcaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marcaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MarcaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marcaControllerFindById(id: number, filter?: MarcaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarcaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marcaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Marca} [marca] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marcaControllerReplaceById(id: number, marca?: Marca, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marcaControllerReplaceById(id, marca, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MarcaPartial} [marcaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marcaControllerUpdateAll(where?: { [key: string]: object; }, marcaPartial?: MarcaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marcaControllerUpdateAll(where, marcaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MarcaPartial} [marcaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marcaControllerUpdateById(id: number, marcaPartial?: MarcaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marcaControllerUpdateById(id, marcaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MarcaControllerApi - factory interface
 * @export
 */
export const MarcaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MarcaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.marcaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewMarca} [newMarca] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerCreate(newMarca?: NewMarca, options?: any): AxiosPromise<Marca> {
            return localVarFp.marcaControllerCreate(newMarca, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.marcaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MarcaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerFind(filter?: MarcaFilter1, options?: any): AxiosPromise<Array<MarcaWithRelations>> {
            return localVarFp.marcaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MarcaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerFindById(id: number, filter?: MarcaFilter, options?: any): AxiosPromise<MarcaWithRelations> {
            return localVarFp.marcaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Marca} [marca] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerReplaceById(id: number, marca?: Marca, options?: any): AxiosPromise<any> {
            return localVarFp.marcaControllerReplaceById(id, marca, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MarcaPartial} [marcaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerUpdateAll(where?: { [key: string]: object; }, marcaPartial?: MarcaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.marcaControllerUpdateAll(where, marcaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MarcaPartial} [marcaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerUpdateById(id: number, marcaPartial?: MarcaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.marcaControllerUpdateById(id, marcaPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarcaControllerApi - object-oriented interface
 * @export
 * @class MarcaControllerApi
 * @extends {BaseAPI}
 */
export class MarcaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarcaControllerApi
     */
    public marcaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return MarcaControllerApiFp(this.configuration).marcaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewMarca} [newMarca] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarcaControllerApi
     */
    public marcaControllerCreate(newMarca?: NewMarca, options?: AxiosRequestConfig) {
        return MarcaControllerApiFp(this.configuration).marcaControllerCreate(newMarca, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarcaControllerApi
     */
    public marcaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return MarcaControllerApiFp(this.configuration).marcaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MarcaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarcaControllerApi
     */
    public marcaControllerFind(filter?: MarcaFilter1, options?: AxiosRequestConfig) {
        return MarcaControllerApiFp(this.configuration).marcaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MarcaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarcaControllerApi
     */
    public marcaControllerFindById(id: number, filter?: MarcaFilter, options?: AxiosRequestConfig) {
        return MarcaControllerApiFp(this.configuration).marcaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Marca} [marca] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarcaControllerApi
     */
    public marcaControllerReplaceById(id: number, marca?: Marca, options?: AxiosRequestConfig) {
        return MarcaControllerApiFp(this.configuration).marcaControllerReplaceById(id, marca, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {MarcaPartial} [marcaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarcaControllerApi
     */
    public marcaControllerUpdateAll(where?: { [key: string]: object; }, marcaPartial?: MarcaPartial, options?: AxiosRequestConfig) {
        return MarcaControllerApiFp(this.configuration).marcaControllerUpdateAll(where, marcaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MarcaPartial} [marcaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarcaControllerApi
     */
    public marcaControllerUpdateById(id: number, marcaPartial?: MarcaPartial, options?: AxiosRequestConfig) {
        return MarcaControllerApiFp(this.configuration).marcaControllerUpdateById(id, marcaPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MarketplaceControllerApi - axios parameter creator
 * @export
 */
export const MarketplaceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketplaces/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewMarketplace} [newMarketplace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerCreate: async (newMarketplace?: NewMarketplace, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketplaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newMarketplace, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marketplaceControllerDeleteById', 'id', id)
            const localVarPath = `/marketplaces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MarketplaceFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerFind: async (filter?: MarketplaceFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketplaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MarketplaceFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerFindById: async (id: number, filter?: MarketplaceFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marketplaceControllerFindById', 'id', id)
            const localVarPath = `/marketplaces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Marketplace} [marketplace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerReplaceById: async (id: number, marketplace?: Marketplace, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marketplaceControllerReplaceById', 'id', id)
            const localVarPath = `/marketplaces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(marketplace, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MarketplacePartial} [marketplacePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerUpdateAll: async (where?: { [key: string]: object; }, marketplacePartial?: MarketplacePartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketplaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(marketplacePartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MarketplacePartial} [marketplacePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerUpdateById: async (id: number, marketplacePartial?: MarketplacePartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marketplaceControllerUpdateById', 'id', id)
            const localVarPath = `/marketplaces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(marketplacePartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarketplaceControllerApi - functional programming interface
 * @export
 */
export const MarketplaceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MarketplaceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewMarketplace} [newMarketplace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceControllerCreate(newMarketplace?: NewMarketplace, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Marketplace>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceControllerCreate(newMarketplace, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MarketplaceFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceControllerFind(filter?: MarketplaceFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarketplaceWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MarketplaceFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceControllerFindById(id: number, filter?: MarketplaceFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarketplaceWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Marketplace} [marketplace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceControllerReplaceById(id: number, marketplace?: Marketplace, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceControllerReplaceById(id, marketplace, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MarketplacePartial} [marketplacePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceControllerUpdateAll(where?: { [key: string]: object; }, marketplacePartial?: MarketplacePartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceControllerUpdateAll(where, marketplacePartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MarketplacePartial} [marketplacePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceControllerUpdateById(id: number, marketplacePartial?: MarketplacePartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceControllerUpdateById(id, marketplacePartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MarketplaceControllerApi - factory interface
 * @export
 */
export const MarketplaceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MarketplaceControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.marketplaceControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewMarketplace} [newMarketplace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerCreate(newMarketplace?: NewMarketplace, options?: any): AxiosPromise<Marketplace> {
            return localVarFp.marketplaceControllerCreate(newMarketplace, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.marketplaceControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MarketplaceFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerFind(filter?: MarketplaceFilter1, options?: any): AxiosPromise<Array<MarketplaceWithRelations>> {
            return localVarFp.marketplaceControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MarketplaceFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerFindById(id: number, filter?: MarketplaceFilter, options?: any): AxiosPromise<MarketplaceWithRelations> {
            return localVarFp.marketplaceControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Marketplace} [marketplace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerReplaceById(id: number, marketplace?: Marketplace, options?: any): AxiosPromise<any> {
            return localVarFp.marketplaceControllerReplaceById(id, marketplace, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MarketplacePartial} [marketplacePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerUpdateAll(where?: { [key: string]: object; }, marketplacePartial?: MarketplacePartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.marketplaceControllerUpdateAll(where, marketplacePartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MarketplacePartial} [marketplacePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerUpdateById(id: number, marketplacePartial?: MarketplacePartial, options?: any): AxiosPromise<any> {
            return localVarFp.marketplaceControllerUpdateById(id, marketplacePartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarketplaceControllerApi - object-oriented interface
 * @export
 * @class MarketplaceControllerApi
 * @extends {BaseAPI}
 */
export class MarketplaceControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplaceControllerApi
     */
    public marketplaceControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return MarketplaceControllerApiFp(this.configuration).marketplaceControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewMarketplace} [newMarketplace] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplaceControllerApi
     */
    public marketplaceControllerCreate(newMarketplace?: NewMarketplace, options?: AxiosRequestConfig) {
        return MarketplaceControllerApiFp(this.configuration).marketplaceControllerCreate(newMarketplace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplaceControllerApi
     */
    public marketplaceControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return MarketplaceControllerApiFp(this.configuration).marketplaceControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MarketplaceFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplaceControllerApi
     */
    public marketplaceControllerFind(filter?: MarketplaceFilter1, options?: AxiosRequestConfig) {
        return MarketplaceControllerApiFp(this.configuration).marketplaceControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MarketplaceFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplaceControllerApi
     */
    public marketplaceControllerFindById(id: number, filter?: MarketplaceFilter, options?: AxiosRequestConfig) {
        return MarketplaceControllerApiFp(this.configuration).marketplaceControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Marketplace} [marketplace] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplaceControllerApi
     */
    public marketplaceControllerReplaceById(id: number, marketplace?: Marketplace, options?: AxiosRequestConfig) {
        return MarketplaceControllerApiFp(this.configuration).marketplaceControllerReplaceById(id, marketplace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {MarketplacePartial} [marketplacePartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplaceControllerApi
     */
    public marketplaceControllerUpdateAll(where?: { [key: string]: object; }, marketplacePartial?: MarketplacePartial, options?: AxiosRequestConfig) {
        return MarketplaceControllerApiFp(this.configuration).marketplaceControllerUpdateAll(where, marketplacePartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MarketplacePartial} [marketplacePartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplaceControllerApi
     */
    public marketplaceControllerUpdateById(id: number, marketplacePartial?: MarketplacePartial, options?: AxiosRequestConfig) {
        return MarketplaceControllerApiFp(this.configuration).marketplaceControllerUpdateById(id, marketplacePartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MensajePlantillaCategoriaControllerApi - axios parameter creator
 * @export
 */
export const MensajePlantillaCategoriaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaCategoriaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mensaje-plantilla-categorias/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewMensajePlantillaCategoria} [newMensajePlantillaCategoria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaCategoriaControllerCreate: async (newMensajePlantillaCategoria?: NewMensajePlantillaCategoria, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mensaje-plantilla-categorias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newMensajePlantillaCategoria, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaCategoriaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mensajePlantillaCategoriaControllerDeleteById', 'id', id)
            const localVarPath = `/mensaje-plantilla-categorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MensajePlantillaCategoriaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaCategoriaControllerFind: async (filter?: MensajePlantillaCategoriaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mensaje-plantilla-categorias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajePlantillaCategoriaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaCategoriaControllerFindById: async (id: number, filter?: MensajePlantillaCategoriaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mensajePlantillaCategoriaControllerFindById', 'id', id)
            const localVarPath = `/mensaje-plantilla-categorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajePlantillaCategoria} [mensajePlantillaCategoria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaCategoriaControllerReplaceById: async (id: number, mensajePlantillaCategoria?: MensajePlantillaCategoria, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mensajePlantillaCategoriaControllerReplaceById', 'id', id)
            const localVarPath = `/mensaje-plantilla-categorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mensajePlantillaCategoria, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MensajePlantillaCategoriaPartial} [mensajePlantillaCategoriaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaCategoriaControllerUpdateAll: async (where?: { [key: string]: object; }, mensajePlantillaCategoriaPartial?: MensajePlantillaCategoriaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mensaje-plantilla-categorias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mensajePlantillaCategoriaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajePlantillaCategoriaPartial} [mensajePlantillaCategoriaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaCategoriaControllerUpdateById: async (id: number, mensajePlantillaCategoriaPartial?: MensajePlantillaCategoriaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mensajePlantillaCategoriaControllerUpdateById', 'id', id)
            const localVarPath = `/mensaje-plantilla-categorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mensajePlantillaCategoriaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MensajePlantillaCategoriaControllerApi - functional programming interface
 * @export
 */
export const MensajePlantillaCategoriaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MensajePlantillaCategoriaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajePlantillaCategoriaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajePlantillaCategoriaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewMensajePlantillaCategoria} [newMensajePlantillaCategoria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajePlantillaCategoriaControllerCreate(newMensajePlantillaCategoria?: NewMensajePlantillaCategoria, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MensajePlantillaCategoria>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajePlantillaCategoriaControllerCreate(newMensajePlantillaCategoria, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajePlantillaCategoriaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajePlantillaCategoriaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MensajePlantillaCategoriaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajePlantillaCategoriaControllerFind(filter?: MensajePlantillaCategoriaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MensajePlantillaCategoriaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajePlantillaCategoriaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajePlantillaCategoriaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajePlantillaCategoriaControllerFindById(id: number, filter?: MensajePlantillaCategoriaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MensajePlantillaCategoriaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajePlantillaCategoriaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajePlantillaCategoria} [mensajePlantillaCategoria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajePlantillaCategoriaControllerReplaceById(id: number, mensajePlantillaCategoria?: MensajePlantillaCategoria, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajePlantillaCategoriaControllerReplaceById(id, mensajePlantillaCategoria, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MensajePlantillaCategoriaPartial} [mensajePlantillaCategoriaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajePlantillaCategoriaControllerUpdateAll(where?: { [key: string]: object; }, mensajePlantillaCategoriaPartial?: MensajePlantillaCategoriaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajePlantillaCategoriaControllerUpdateAll(where, mensajePlantillaCategoriaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajePlantillaCategoriaPartial} [mensajePlantillaCategoriaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajePlantillaCategoriaControllerUpdateById(id: number, mensajePlantillaCategoriaPartial?: MensajePlantillaCategoriaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajePlantillaCategoriaControllerUpdateById(id, mensajePlantillaCategoriaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MensajePlantillaCategoriaControllerApi - factory interface
 * @export
 */
export const MensajePlantillaCategoriaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MensajePlantillaCategoriaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaCategoriaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.mensajePlantillaCategoriaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewMensajePlantillaCategoria} [newMensajePlantillaCategoria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaCategoriaControllerCreate(newMensajePlantillaCategoria?: NewMensajePlantillaCategoria, options?: any): AxiosPromise<MensajePlantillaCategoria> {
            return localVarFp.mensajePlantillaCategoriaControllerCreate(newMensajePlantillaCategoria, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaCategoriaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.mensajePlantillaCategoriaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MensajePlantillaCategoriaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaCategoriaControllerFind(filter?: MensajePlantillaCategoriaFilter1, options?: any): AxiosPromise<Array<MensajePlantillaCategoriaWithRelations>> {
            return localVarFp.mensajePlantillaCategoriaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajePlantillaCategoriaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaCategoriaControllerFindById(id: number, filter?: MensajePlantillaCategoriaFilter, options?: any): AxiosPromise<MensajePlantillaCategoriaWithRelations> {
            return localVarFp.mensajePlantillaCategoriaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajePlantillaCategoria} [mensajePlantillaCategoria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaCategoriaControllerReplaceById(id: number, mensajePlantillaCategoria?: MensajePlantillaCategoria, options?: any): AxiosPromise<any> {
            return localVarFp.mensajePlantillaCategoriaControllerReplaceById(id, mensajePlantillaCategoria, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MensajePlantillaCategoriaPartial} [mensajePlantillaCategoriaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaCategoriaControllerUpdateAll(where?: { [key: string]: object; }, mensajePlantillaCategoriaPartial?: MensajePlantillaCategoriaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.mensajePlantillaCategoriaControllerUpdateAll(where, mensajePlantillaCategoriaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajePlantillaCategoriaPartial} [mensajePlantillaCategoriaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaCategoriaControllerUpdateById(id: number, mensajePlantillaCategoriaPartial?: MensajePlantillaCategoriaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.mensajePlantillaCategoriaControllerUpdateById(id, mensajePlantillaCategoriaPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MensajePlantillaCategoriaControllerApi - object-oriented interface
 * @export
 * @class MensajePlantillaCategoriaControllerApi
 * @extends {BaseAPI}
 */
export class MensajePlantillaCategoriaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajePlantillaCategoriaControllerApi
     */
    public mensajePlantillaCategoriaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return MensajePlantillaCategoriaControllerApiFp(this.configuration).mensajePlantillaCategoriaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewMensajePlantillaCategoria} [newMensajePlantillaCategoria] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajePlantillaCategoriaControllerApi
     */
    public mensajePlantillaCategoriaControllerCreate(newMensajePlantillaCategoria?: NewMensajePlantillaCategoria, options?: AxiosRequestConfig) {
        return MensajePlantillaCategoriaControllerApiFp(this.configuration).mensajePlantillaCategoriaControllerCreate(newMensajePlantillaCategoria, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajePlantillaCategoriaControllerApi
     */
    public mensajePlantillaCategoriaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return MensajePlantillaCategoriaControllerApiFp(this.configuration).mensajePlantillaCategoriaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MensajePlantillaCategoriaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajePlantillaCategoriaControllerApi
     */
    public mensajePlantillaCategoriaControllerFind(filter?: MensajePlantillaCategoriaFilter1, options?: AxiosRequestConfig) {
        return MensajePlantillaCategoriaControllerApiFp(this.configuration).mensajePlantillaCategoriaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MensajePlantillaCategoriaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajePlantillaCategoriaControllerApi
     */
    public mensajePlantillaCategoriaControllerFindById(id: number, filter?: MensajePlantillaCategoriaFilter, options?: AxiosRequestConfig) {
        return MensajePlantillaCategoriaControllerApiFp(this.configuration).mensajePlantillaCategoriaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MensajePlantillaCategoria} [mensajePlantillaCategoria] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajePlantillaCategoriaControllerApi
     */
    public mensajePlantillaCategoriaControllerReplaceById(id: number, mensajePlantillaCategoria?: MensajePlantillaCategoria, options?: AxiosRequestConfig) {
        return MensajePlantillaCategoriaControllerApiFp(this.configuration).mensajePlantillaCategoriaControllerReplaceById(id, mensajePlantillaCategoria, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {MensajePlantillaCategoriaPartial} [mensajePlantillaCategoriaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajePlantillaCategoriaControllerApi
     */
    public mensajePlantillaCategoriaControllerUpdateAll(where?: { [key: string]: object; }, mensajePlantillaCategoriaPartial?: MensajePlantillaCategoriaPartial, options?: AxiosRequestConfig) {
        return MensajePlantillaCategoriaControllerApiFp(this.configuration).mensajePlantillaCategoriaControllerUpdateAll(where, mensajePlantillaCategoriaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MensajePlantillaCategoriaPartial} [mensajePlantillaCategoriaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajePlantillaCategoriaControllerApi
     */
    public mensajePlantillaCategoriaControllerUpdateById(id: number, mensajePlantillaCategoriaPartial?: MensajePlantillaCategoriaPartial, options?: AxiosRequestConfig) {
        return MensajePlantillaCategoriaControllerApiFp(this.configuration).mensajePlantillaCategoriaControllerUpdateById(id, mensajePlantillaCategoriaPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MensajePlantillaControllerApi - axios parameter creator
 * @export
 */
export const MensajePlantillaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mensaje-plantillas/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewMensajePlantilla} [newMensajePlantilla] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaControllerCreate: async (newMensajePlantilla?: NewMensajePlantilla, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mensaje-plantillas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newMensajePlantilla, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mensajePlantillaControllerDeleteById', 'id', id)
            const localVarPath = `/mensaje-plantillas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MensajePlantillaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaControllerFind: async (filter?: MensajePlantillaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mensaje-plantillas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajePlantillaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaControllerFindById: async (id: number, filter?: MensajePlantillaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mensajePlantillaControllerFindById', 'id', id)
            const localVarPath = `/mensaje-plantillas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajePlantilla} [mensajePlantilla] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaControllerReplaceById: async (id: number, mensajePlantilla?: MensajePlantilla, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mensajePlantillaControllerReplaceById', 'id', id)
            const localVarPath = `/mensaje-plantillas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mensajePlantilla, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MensajePlantillaPartial} [mensajePlantillaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaControllerUpdateAll: async (where?: { [key: string]: object; }, mensajePlantillaPartial?: MensajePlantillaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mensaje-plantillas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mensajePlantillaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajePlantillaPartial} [mensajePlantillaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaControllerUpdateById: async (id: number, mensajePlantillaPartial?: MensajePlantillaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mensajePlantillaControllerUpdateById', 'id', id)
            const localVarPath = `/mensaje-plantillas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mensajePlantillaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MensajePlantillaControllerApi - functional programming interface
 * @export
 */
export const MensajePlantillaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MensajePlantillaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajePlantillaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajePlantillaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewMensajePlantilla} [newMensajePlantilla] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajePlantillaControllerCreate(newMensajePlantilla?: NewMensajePlantilla, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MensajePlantilla>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajePlantillaControllerCreate(newMensajePlantilla, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajePlantillaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajePlantillaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MensajePlantillaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajePlantillaControllerFind(filter?: MensajePlantillaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MensajePlantillaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajePlantillaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajePlantillaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajePlantillaControllerFindById(id: number, filter?: MensajePlantillaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MensajePlantillaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajePlantillaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajePlantilla} [mensajePlantilla] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajePlantillaControllerReplaceById(id: number, mensajePlantilla?: MensajePlantilla, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajePlantillaControllerReplaceById(id, mensajePlantilla, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MensajePlantillaPartial} [mensajePlantillaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajePlantillaControllerUpdateAll(where?: { [key: string]: object; }, mensajePlantillaPartial?: MensajePlantillaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajePlantillaControllerUpdateAll(where, mensajePlantillaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajePlantillaPartial} [mensajePlantillaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajePlantillaControllerUpdateById(id: number, mensajePlantillaPartial?: MensajePlantillaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajePlantillaControllerUpdateById(id, mensajePlantillaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MensajePlantillaControllerApi - factory interface
 * @export
 */
export const MensajePlantillaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MensajePlantillaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.mensajePlantillaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewMensajePlantilla} [newMensajePlantilla] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaControllerCreate(newMensajePlantilla?: NewMensajePlantilla, options?: any): AxiosPromise<MensajePlantilla> {
            return localVarFp.mensajePlantillaControllerCreate(newMensajePlantilla, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.mensajePlantillaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MensajePlantillaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaControllerFind(filter?: MensajePlantillaFilter1, options?: any): AxiosPromise<Array<MensajePlantillaWithRelations>> {
            return localVarFp.mensajePlantillaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajePlantillaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaControllerFindById(id: number, filter?: MensajePlantillaFilter, options?: any): AxiosPromise<MensajePlantillaWithRelations> {
            return localVarFp.mensajePlantillaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajePlantilla} [mensajePlantilla] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaControllerReplaceById(id: number, mensajePlantilla?: MensajePlantilla, options?: any): AxiosPromise<any> {
            return localVarFp.mensajePlantillaControllerReplaceById(id, mensajePlantilla, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MensajePlantillaPartial} [mensajePlantillaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaControllerUpdateAll(where?: { [key: string]: object; }, mensajePlantillaPartial?: MensajePlantillaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.mensajePlantillaControllerUpdateAll(where, mensajePlantillaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajePlantillaPartial} [mensajePlantillaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajePlantillaControllerUpdateById(id: number, mensajePlantillaPartial?: MensajePlantillaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.mensajePlantillaControllerUpdateById(id, mensajePlantillaPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MensajePlantillaControllerApi - object-oriented interface
 * @export
 * @class MensajePlantillaControllerApi
 * @extends {BaseAPI}
 */
export class MensajePlantillaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajePlantillaControllerApi
     */
    public mensajePlantillaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return MensajePlantillaControllerApiFp(this.configuration).mensajePlantillaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewMensajePlantilla} [newMensajePlantilla] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajePlantillaControllerApi
     */
    public mensajePlantillaControllerCreate(newMensajePlantilla?: NewMensajePlantilla, options?: AxiosRequestConfig) {
        return MensajePlantillaControllerApiFp(this.configuration).mensajePlantillaControllerCreate(newMensajePlantilla, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajePlantillaControllerApi
     */
    public mensajePlantillaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return MensajePlantillaControllerApiFp(this.configuration).mensajePlantillaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MensajePlantillaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajePlantillaControllerApi
     */
    public mensajePlantillaControllerFind(filter?: MensajePlantillaFilter1, options?: AxiosRequestConfig) {
        return MensajePlantillaControllerApiFp(this.configuration).mensajePlantillaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MensajePlantillaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajePlantillaControllerApi
     */
    public mensajePlantillaControllerFindById(id: number, filter?: MensajePlantillaFilter, options?: AxiosRequestConfig) {
        return MensajePlantillaControllerApiFp(this.configuration).mensajePlantillaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MensajePlantilla} [mensajePlantilla] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajePlantillaControllerApi
     */
    public mensajePlantillaControllerReplaceById(id: number, mensajePlantilla?: MensajePlantilla, options?: AxiosRequestConfig) {
        return MensajePlantillaControllerApiFp(this.configuration).mensajePlantillaControllerReplaceById(id, mensajePlantilla, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {MensajePlantillaPartial} [mensajePlantillaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajePlantillaControllerApi
     */
    public mensajePlantillaControllerUpdateAll(where?: { [key: string]: object; }, mensajePlantillaPartial?: MensajePlantillaPartial, options?: AxiosRequestConfig) {
        return MensajePlantillaControllerApiFp(this.configuration).mensajePlantillaControllerUpdateAll(where, mensajePlantillaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MensajePlantillaPartial} [mensajePlantillaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajePlantillaControllerApi
     */
    public mensajePlantillaControllerUpdateById(id: number, mensajePlantillaPartial?: MensajePlantillaPartial, options?: AxiosRequestConfig) {
        return MensajePlantillaControllerApiFp(this.configuration).mensajePlantillaControllerUpdateById(id, mensajePlantillaPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MensajeTipoControllerApi - axios parameter creator
 * @export
 */
export const MensajeTipoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajeTipoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mensaje-tipos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewMensajeTipo} [newMensajeTipo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajeTipoControllerCreate: async (newMensajeTipo?: NewMensajeTipo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mensaje-tipos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newMensajeTipo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajeTipoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mensajeTipoControllerDeleteById', 'id', id)
            const localVarPath = `/mensaje-tipos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MensajeTipoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajeTipoControllerFind: async (filter?: MensajeTipoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mensaje-tipos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajeTipoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajeTipoControllerFindById: async (id: number, filter?: MensajeTipoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mensajeTipoControllerFindById', 'id', id)
            const localVarPath = `/mensaje-tipos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajeTipo} [mensajeTipo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajeTipoControllerReplaceById: async (id: number, mensajeTipo?: MensajeTipo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mensajeTipoControllerReplaceById', 'id', id)
            const localVarPath = `/mensaje-tipos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mensajeTipo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MensajeTipoPartial} [mensajeTipoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajeTipoControllerUpdateAll: async (where?: { [key: string]: object; }, mensajeTipoPartial?: MensajeTipoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mensaje-tipos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mensajeTipoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajeTipoPartial} [mensajeTipoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajeTipoControllerUpdateById: async (id: number, mensajeTipoPartial?: MensajeTipoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mensajeTipoControllerUpdateById', 'id', id)
            const localVarPath = `/mensaje-tipos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mensajeTipoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MensajeTipoControllerApi - functional programming interface
 * @export
 */
export const MensajeTipoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MensajeTipoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajeTipoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajeTipoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewMensajeTipo} [newMensajeTipo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajeTipoControllerCreate(newMensajeTipo?: NewMensajeTipo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MensajeTipo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajeTipoControllerCreate(newMensajeTipo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajeTipoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajeTipoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MensajeTipoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajeTipoControllerFind(filter?: MensajeTipoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MensajeTipoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajeTipoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajeTipoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajeTipoControllerFindById(id: number, filter?: MensajeTipoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MensajeTipoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajeTipoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajeTipo} [mensajeTipo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajeTipoControllerReplaceById(id: number, mensajeTipo?: MensajeTipo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajeTipoControllerReplaceById(id, mensajeTipo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MensajeTipoPartial} [mensajeTipoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajeTipoControllerUpdateAll(where?: { [key: string]: object; }, mensajeTipoPartial?: MensajeTipoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajeTipoControllerUpdateAll(where, mensajeTipoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajeTipoPartial} [mensajeTipoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mensajeTipoControllerUpdateById(id: number, mensajeTipoPartial?: MensajeTipoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mensajeTipoControllerUpdateById(id, mensajeTipoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MensajeTipoControllerApi - factory interface
 * @export
 */
export const MensajeTipoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MensajeTipoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajeTipoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.mensajeTipoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewMensajeTipo} [newMensajeTipo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajeTipoControllerCreate(newMensajeTipo?: NewMensajeTipo, options?: any): AxiosPromise<MensajeTipo> {
            return localVarFp.mensajeTipoControllerCreate(newMensajeTipo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajeTipoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.mensajeTipoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MensajeTipoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajeTipoControllerFind(filter?: MensajeTipoFilter1, options?: any): AxiosPromise<Array<MensajeTipoWithRelations>> {
            return localVarFp.mensajeTipoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajeTipoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajeTipoControllerFindById(id: number, filter?: MensajeTipoFilter, options?: any): AxiosPromise<MensajeTipoWithRelations> {
            return localVarFp.mensajeTipoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajeTipo} [mensajeTipo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajeTipoControllerReplaceById(id: number, mensajeTipo?: MensajeTipo, options?: any): AxiosPromise<any> {
            return localVarFp.mensajeTipoControllerReplaceById(id, mensajeTipo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MensajeTipoPartial} [mensajeTipoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajeTipoControllerUpdateAll(where?: { [key: string]: object; }, mensajeTipoPartial?: MensajeTipoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.mensajeTipoControllerUpdateAll(where, mensajeTipoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MensajeTipoPartial} [mensajeTipoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mensajeTipoControllerUpdateById(id: number, mensajeTipoPartial?: MensajeTipoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.mensajeTipoControllerUpdateById(id, mensajeTipoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MensajeTipoControllerApi - object-oriented interface
 * @export
 * @class MensajeTipoControllerApi
 * @extends {BaseAPI}
 */
export class MensajeTipoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajeTipoControllerApi
     */
    public mensajeTipoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return MensajeTipoControllerApiFp(this.configuration).mensajeTipoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewMensajeTipo} [newMensajeTipo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajeTipoControllerApi
     */
    public mensajeTipoControllerCreate(newMensajeTipo?: NewMensajeTipo, options?: AxiosRequestConfig) {
        return MensajeTipoControllerApiFp(this.configuration).mensajeTipoControllerCreate(newMensajeTipo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajeTipoControllerApi
     */
    public mensajeTipoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return MensajeTipoControllerApiFp(this.configuration).mensajeTipoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MensajeTipoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajeTipoControllerApi
     */
    public mensajeTipoControllerFind(filter?: MensajeTipoFilter1, options?: AxiosRequestConfig) {
        return MensajeTipoControllerApiFp(this.configuration).mensajeTipoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MensajeTipoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajeTipoControllerApi
     */
    public mensajeTipoControllerFindById(id: number, filter?: MensajeTipoFilter, options?: AxiosRequestConfig) {
        return MensajeTipoControllerApiFp(this.configuration).mensajeTipoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MensajeTipo} [mensajeTipo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajeTipoControllerApi
     */
    public mensajeTipoControllerReplaceById(id: number, mensajeTipo?: MensajeTipo, options?: AxiosRequestConfig) {
        return MensajeTipoControllerApiFp(this.configuration).mensajeTipoControllerReplaceById(id, mensajeTipo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {MensajeTipoPartial} [mensajeTipoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajeTipoControllerApi
     */
    public mensajeTipoControllerUpdateAll(where?: { [key: string]: object; }, mensajeTipoPartial?: MensajeTipoPartial, options?: AxiosRequestConfig) {
        return MensajeTipoControllerApiFp(this.configuration).mensajeTipoControllerUpdateAll(where, mensajeTipoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MensajeTipoPartial} [mensajeTipoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MensajeTipoControllerApi
     */
    public mensajeTipoControllerUpdateById(id: number, mensajeTipoPartial?: MensajeTipoPartial, options?: AxiosRequestConfig) {
        return MensajeTipoControllerApiFp(this.configuration).mensajeTipoControllerUpdateById(id, mensajeTipoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MultimediaControllerApi - axios parameter creator
 * @export
 */
export const MultimediaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/multimedias/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewMultimedia} [newMultimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerCreate: async (newMultimedia?: NewMultimedia, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/multimedias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newMultimedia, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('multimediaControllerDeleteById', 'id', id)
            const localVarPath = `/multimedias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MultimediaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerFind: async (filter?: MultimediaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/multimedias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MultimediaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerFindById: async (id: number, filter?: MultimediaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('multimediaControllerFindById', 'id', id)
            const localVarPath = `/multimedias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Multimedia} [multimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerReplaceById: async (id: number, multimedia?: Multimedia, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('multimediaControllerReplaceById', 'id', id)
            const localVarPath = `/multimedias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(multimedia, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MultimediaPartial} [multimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerUpdateAll: async (where?: { [key: string]: object; }, multimediaPartial?: MultimediaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/multimedias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(multimediaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MultimediaPartial} [multimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerUpdateById: async (id: number, multimediaPartial?: MultimediaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('multimediaControllerUpdateById', 'id', id)
            const localVarPath = `/multimedias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(multimediaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MultimediaControllerApi - functional programming interface
 * @export
 */
export const MultimediaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MultimediaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async multimediaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.multimediaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewMultimedia} [newMultimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async multimediaControllerCreate(newMultimedia?: NewMultimedia, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Multimedia>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.multimediaControllerCreate(newMultimedia, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async multimediaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.multimediaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MultimediaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async multimediaControllerFind(filter?: MultimediaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MultimediaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.multimediaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MultimediaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async multimediaControllerFindById(id: number, filter?: MultimediaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MultimediaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.multimediaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Multimedia} [multimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async multimediaControllerReplaceById(id: number, multimedia?: Multimedia, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.multimediaControllerReplaceById(id, multimedia, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MultimediaPartial} [multimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async multimediaControllerUpdateAll(where?: { [key: string]: object; }, multimediaPartial?: MultimediaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.multimediaControllerUpdateAll(where, multimediaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MultimediaPartial} [multimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async multimediaControllerUpdateById(id: number, multimediaPartial?: MultimediaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.multimediaControllerUpdateById(id, multimediaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MultimediaControllerApi - factory interface
 * @export
 */
export const MultimediaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MultimediaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.multimediaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewMultimedia} [newMultimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerCreate(newMultimedia?: NewMultimedia, options?: any): AxiosPromise<Multimedia> {
            return localVarFp.multimediaControllerCreate(newMultimedia, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.multimediaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MultimediaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerFind(filter?: MultimediaFilter1, options?: any): AxiosPromise<Array<MultimediaWithRelations>> {
            return localVarFp.multimediaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MultimediaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerFindById(id: number, filter?: MultimediaFilter, options?: any): AxiosPromise<MultimediaWithRelations> {
            return localVarFp.multimediaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Multimedia} [multimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerReplaceById(id: number, multimedia?: Multimedia, options?: any): AxiosPromise<any> {
            return localVarFp.multimediaControllerReplaceById(id, multimedia, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MultimediaPartial} [multimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerUpdateAll(where?: { [key: string]: object; }, multimediaPartial?: MultimediaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.multimediaControllerUpdateAll(where, multimediaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MultimediaPartial} [multimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerUpdateById(id: number, multimediaPartial?: MultimediaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.multimediaControllerUpdateById(id, multimediaPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MultimediaControllerApi - object-oriented interface
 * @export
 * @class MultimediaControllerApi
 * @extends {BaseAPI}
 */
export class MultimediaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MultimediaControllerApi
     */
    public multimediaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return MultimediaControllerApiFp(this.configuration).multimediaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewMultimedia} [newMultimedia] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MultimediaControllerApi
     */
    public multimediaControllerCreate(newMultimedia?: NewMultimedia, options?: AxiosRequestConfig) {
        return MultimediaControllerApiFp(this.configuration).multimediaControllerCreate(newMultimedia, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MultimediaControllerApi
     */
    public multimediaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return MultimediaControllerApiFp(this.configuration).multimediaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MultimediaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MultimediaControllerApi
     */
    public multimediaControllerFind(filter?: MultimediaFilter1, options?: AxiosRequestConfig) {
        return MultimediaControllerApiFp(this.configuration).multimediaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MultimediaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MultimediaControllerApi
     */
    public multimediaControllerFindById(id: number, filter?: MultimediaFilter, options?: AxiosRequestConfig) {
        return MultimediaControllerApiFp(this.configuration).multimediaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Multimedia} [multimedia] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MultimediaControllerApi
     */
    public multimediaControllerReplaceById(id: number, multimedia?: Multimedia, options?: AxiosRequestConfig) {
        return MultimediaControllerApiFp(this.configuration).multimediaControllerReplaceById(id, multimedia, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {MultimediaPartial} [multimediaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MultimediaControllerApi
     */
    public multimediaControllerUpdateAll(where?: { [key: string]: object; }, multimediaPartial?: MultimediaPartial, options?: AxiosRequestConfig) {
        return MultimediaControllerApiFp(this.configuration).multimediaControllerUpdateAll(where, multimediaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MultimediaPartial} [multimediaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MultimediaControllerApi
     */
    public multimediaControllerUpdateById(id: number, multimediaPartial?: MultimediaPartial, options?: AxiosRequestConfig) {
        return MultimediaControllerApiFp(this.configuration).multimediaControllerUpdateById(id, multimediaPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NotificacionControllerApi - axios parameter creator
 * @export
 */
export const NotificacionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificacionControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notificacions/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewNotificacion} [newNotificacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificacionControllerCreate: async (newNotificacion?: NewNotificacion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notificacions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newNotificacion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificacionControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notificacionControllerDeleteById', 'id', id)
            const localVarPath = `/notificacions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NotificacionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificacionControllerFind: async (filter?: NotificacionFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notificacions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {NotificacionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificacionControllerFindById: async (id: number, filter?: NotificacionFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notificacionControllerFindById', 'id', id)
            const localVarPath = `/notificacions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Notificacion} [notificacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificacionControllerReplaceById: async (id: number, notificacion?: Notificacion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notificacionControllerReplaceById', 'id', id)
            const localVarPath = `/notificacions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificacion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {NotificacionPartial} [notificacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificacionControllerUpdateAll: async (where?: { [key: string]: object; }, notificacionPartial?: NotificacionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notificacions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificacionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {NotificacionPartial} [notificacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificacionControllerUpdateById: async (id: number, notificacionPartial?: NotificacionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notificacionControllerUpdateById', 'id', id)
            const localVarPath = `/notificacions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificacionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificacionControllerApi - functional programming interface
 * @export
 */
export const NotificacionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificacionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificacionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificacionControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewNotificacion} [newNotificacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificacionControllerCreate(newNotificacion?: NewNotificacion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notificacion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificacionControllerCreate(newNotificacion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificacionControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificacionControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NotificacionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificacionControllerFind(filter?: NotificacionFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NotificacionWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificacionControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {NotificacionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificacionControllerFindById(id: number, filter?: NotificacionFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificacionWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificacionControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Notificacion} [notificacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificacionControllerReplaceById(id: number, notificacion?: Notificacion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificacionControllerReplaceById(id, notificacion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {NotificacionPartial} [notificacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificacionControllerUpdateAll(where?: { [key: string]: object; }, notificacionPartial?: NotificacionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificacionControllerUpdateAll(where, notificacionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {NotificacionPartial} [notificacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificacionControllerUpdateById(id: number, notificacionPartial?: NotificacionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificacionControllerUpdateById(id, notificacionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificacionControllerApi - factory interface
 * @export
 */
export const NotificacionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificacionControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificacionControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.notificacionControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewNotificacion} [newNotificacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificacionControllerCreate(newNotificacion?: NewNotificacion, options?: any): AxiosPromise<Notificacion> {
            return localVarFp.notificacionControllerCreate(newNotificacion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificacionControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.notificacionControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NotificacionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificacionControllerFind(filter?: NotificacionFilter1, options?: any): AxiosPromise<Array<NotificacionWithRelations>> {
            return localVarFp.notificacionControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {NotificacionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificacionControllerFindById(id: number, filter?: NotificacionFilter, options?: any): AxiosPromise<NotificacionWithRelations> {
            return localVarFp.notificacionControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Notificacion} [notificacion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificacionControllerReplaceById(id: number, notificacion?: Notificacion, options?: any): AxiosPromise<any> {
            return localVarFp.notificacionControllerReplaceById(id, notificacion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {NotificacionPartial} [notificacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificacionControllerUpdateAll(where?: { [key: string]: object; }, notificacionPartial?: NotificacionPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.notificacionControllerUpdateAll(where, notificacionPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {NotificacionPartial} [notificacionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificacionControllerUpdateById(id: number, notificacionPartial?: NotificacionPartial, options?: any): AxiosPromise<any> {
            return localVarFp.notificacionControllerUpdateById(id, notificacionPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificacionControllerApi - object-oriented interface
 * @export
 * @class NotificacionControllerApi
 * @extends {BaseAPI}
 */
export class NotificacionControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificacionControllerApi
     */
    public notificacionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return NotificacionControllerApiFp(this.configuration).notificacionControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewNotificacion} [newNotificacion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificacionControllerApi
     */
    public notificacionControllerCreate(newNotificacion?: NewNotificacion, options?: AxiosRequestConfig) {
        return NotificacionControllerApiFp(this.configuration).notificacionControllerCreate(newNotificacion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificacionControllerApi
     */
    public notificacionControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return NotificacionControllerApiFp(this.configuration).notificacionControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NotificacionFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificacionControllerApi
     */
    public notificacionControllerFind(filter?: NotificacionFilter1, options?: AxiosRequestConfig) {
        return NotificacionControllerApiFp(this.configuration).notificacionControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {NotificacionFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificacionControllerApi
     */
    public notificacionControllerFindById(id: number, filter?: NotificacionFilter, options?: AxiosRequestConfig) {
        return NotificacionControllerApiFp(this.configuration).notificacionControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Notificacion} [notificacion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificacionControllerApi
     */
    public notificacionControllerReplaceById(id: number, notificacion?: Notificacion, options?: AxiosRequestConfig) {
        return NotificacionControllerApiFp(this.configuration).notificacionControllerReplaceById(id, notificacion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {NotificacionPartial} [notificacionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificacionControllerApi
     */
    public notificacionControllerUpdateAll(where?: { [key: string]: object; }, notificacionPartial?: NotificacionPartial, options?: AxiosRequestConfig) {
        return NotificacionControllerApiFp(this.configuration).notificacionControllerUpdateAll(where, notificacionPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {NotificacionPartial} [notificacionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificacionControllerApi
     */
    public notificacionControllerUpdateById(id: number, notificacionPartial?: NotificacionPartial, options?: AxiosRequestConfig) {
        return NotificacionControllerApiFp(this.configuration).notificacionControllerUpdateById(id, notificacionPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ParametroGlobalControllerApi - axios parameter creator
 * @export
 */
export const ParametroGlobalControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametroGlobalControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/parametro-globals/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewParametroGlobal} [newParametroGlobal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametroGlobalControllerCreate: async (newParametroGlobal?: NewParametroGlobal, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/parametro-globals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newParametroGlobal, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametroGlobalControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('parametroGlobalControllerDeleteById', 'id', id)
            const localVarPath = `/parametro-globals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ParametroGlobalFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametroGlobalControllerFind: async (filter?: ParametroGlobalFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/parametro-globals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametroGlobalFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametroGlobalControllerFindById: async (id: number, filter?: ParametroGlobalFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('parametroGlobalControllerFindById', 'id', id)
            const localVarPath = `/parametro-globals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametroGlobal} [parametroGlobal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametroGlobalControllerReplaceById: async (id: number, parametroGlobal?: ParametroGlobal, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('parametroGlobalControllerReplaceById', 'id', id)
            const localVarPath = `/parametro-globals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parametroGlobal, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ParametroGlobalPartial} [parametroGlobalPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametroGlobalControllerUpdateAll: async (where?: { [key: string]: object; }, parametroGlobalPartial?: ParametroGlobalPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/parametro-globals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parametroGlobalPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametroGlobalPartial} [parametroGlobalPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametroGlobalControllerUpdateById: async (id: number, parametroGlobalPartial?: ParametroGlobalPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('parametroGlobalControllerUpdateById', 'id', id)
            const localVarPath = `/parametro-globals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parametroGlobalPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ParametroGlobalControllerApi - functional programming interface
 * @export
 */
export const ParametroGlobalControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ParametroGlobalControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametroGlobalControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametroGlobalControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewParametroGlobal} [newParametroGlobal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametroGlobalControllerCreate(newParametroGlobal?: NewParametroGlobal, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParametroGlobal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametroGlobalControllerCreate(newParametroGlobal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametroGlobalControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametroGlobalControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ParametroGlobalFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametroGlobalControllerFind(filter?: ParametroGlobalFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ParametroGlobalWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametroGlobalControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametroGlobalFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametroGlobalControllerFindById(id: number, filter?: ParametroGlobalFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParametroGlobalWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametroGlobalControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametroGlobal} [parametroGlobal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametroGlobalControllerReplaceById(id: number, parametroGlobal?: ParametroGlobal, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametroGlobalControllerReplaceById(id, parametroGlobal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ParametroGlobalPartial} [parametroGlobalPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametroGlobalControllerUpdateAll(where?: { [key: string]: object; }, parametroGlobalPartial?: ParametroGlobalPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametroGlobalControllerUpdateAll(where, parametroGlobalPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametroGlobalPartial} [parametroGlobalPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametroGlobalControllerUpdateById(id: number, parametroGlobalPartial?: ParametroGlobalPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametroGlobalControllerUpdateById(id, parametroGlobalPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ParametroGlobalControllerApi - factory interface
 * @export
 */
export const ParametroGlobalControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ParametroGlobalControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametroGlobalControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.parametroGlobalControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewParametroGlobal} [newParametroGlobal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametroGlobalControllerCreate(newParametroGlobal?: NewParametroGlobal, options?: any): AxiosPromise<ParametroGlobal> {
            return localVarFp.parametroGlobalControllerCreate(newParametroGlobal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametroGlobalControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.parametroGlobalControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ParametroGlobalFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametroGlobalControllerFind(filter?: ParametroGlobalFilter1, options?: any): AxiosPromise<Array<ParametroGlobalWithRelations>> {
            return localVarFp.parametroGlobalControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametroGlobalFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametroGlobalControllerFindById(id: number, filter?: ParametroGlobalFilter, options?: any): AxiosPromise<ParametroGlobalWithRelations> {
            return localVarFp.parametroGlobalControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametroGlobal} [parametroGlobal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametroGlobalControllerReplaceById(id: number, parametroGlobal?: ParametroGlobal, options?: any): AxiosPromise<any> {
            return localVarFp.parametroGlobalControllerReplaceById(id, parametroGlobal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ParametroGlobalPartial} [parametroGlobalPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametroGlobalControllerUpdateAll(where?: { [key: string]: object; }, parametroGlobalPartial?: ParametroGlobalPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.parametroGlobalControllerUpdateAll(where, parametroGlobalPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametroGlobalPartial} [parametroGlobalPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametroGlobalControllerUpdateById(id: number, parametroGlobalPartial?: ParametroGlobalPartial, options?: any): AxiosPromise<any> {
            return localVarFp.parametroGlobalControllerUpdateById(id, parametroGlobalPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ParametroGlobalControllerApi - object-oriented interface
 * @export
 * @class ParametroGlobalControllerApi
 * @extends {BaseAPI}
 */
export class ParametroGlobalControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametroGlobalControllerApi
     */
    public parametroGlobalControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ParametroGlobalControllerApiFp(this.configuration).parametroGlobalControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewParametroGlobal} [newParametroGlobal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametroGlobalControllerApi
     */
    public parametroGlobalControllerCreate(newParametroGlobal?: NewParametroGlobal, options?: AxiosRequestConfig) {
        return ParametroGlobalControllerApiFp(this.configuration).parametroGlobalControllerCreate(newParametroGlobal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametroGlobalControllerApi
     */
    public parametroGlobalControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ParametroGlobalControllerApiFp(this.configuration).parametroGlobalControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ParametroGlobalFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametroGlobalControllerApi
     */
    public parametroGlobalControllerFind(filter?: ParametroGlobalFilter1, options?: AxiosRequestConfig) {
        return ParametroGlobalControllerApiFp(this.configuration).parametroGlobalControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ParametroGlobalFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametroGlobalControllerApi
     */
    public parametroGlobalControllerFindById(id: number, filter?: ParametroGlobalFilter, options?: AxiosRequestConfig) {
        return ParametroGlobalControllerApiFp(this.configuration).parametroGlobalControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ParametroGlobal} [parametroGlobal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametroGlobalControllerApi
     */
    public parametroGlobalControllerReplaceById(id: number, parametroGlobal?: ParametroGlobal, options?: AxiosRequestConfig) {
        return ParametroGlobalControllerApiFp(this.configuration).parametroGlobalControllerReplaceById(id, parametroGlobal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ParametroGlobalPartial} [parametroGlobalPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametroGlobalControllerApi
     */
    public parametroGlobalControllerUpdateAll(where?: { [key: string]: object; }, parametroGlobalPartial?: ParametroGlobalPartial, options?: AxiosRequestConfig) {
        return ParametroGlobalControllerApiFp(this.configuration).parametroGlobalControllerUpdateAll(where, parametroGlobalPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ParametroGlobalPartial} [parametroGlobalPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametroGlobalControllerApi
     */
    public parametroGlobalControllerUpdateById(id: number, parametroGlobalPartial?: ParametroGlobalPartial, options?: AxiosRequestConfig) {
        return ParametroGlobalControllerApiFp(this.configuration).parametroGlobalControllerUpdateById(id, parametroGlobalPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PermisoControllerApi - axios parameter creator
 * @export
 */
export const PermisoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [rolId] 
         * @param {string} [modulo] 
         * @param {string} [controlador] 
         * @param {string} [accion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerBuscarPermiso: async (rolId?: string, modulo?: string, controlador?: string, accion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/buscarPermiso`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (rolId !== undefined) {
                localVarQueryParameter['rolId'] = rolId;
            }

            if (modulo !== undefined) {
                localVarQueryParameter['modulo'] = modulo;
            }

            if (controlador !== undefined) {
                localVarQueryParameter['controlador'] = controlador;
            }

            if (accion !== undefined) {
                localVarQueryParameter['accion'] = accion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permisos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewPermiso} [newPermiso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerCreate: async (newPermiso?: NewPermiso, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newPermiso, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('permisoControllerDeleteById', 'id', id)
            const localVarPath = `/permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PermisoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerFind: async (filter?: PermisoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerFindById: async (id: number, filter?: PermisoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('permisoControllerFindById', 'id', id)
            const localVarPath = `/permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Permiso} [permiso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerReplaceById: async (id: number, permiso?: Permiso, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('permisoControllerReplaceById', 'id', id)
            const localVarPath = `/permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(permiso, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PermisoPartial} [permisoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerUpdateAll: async (where?: { [key: string]: object; }, permisoPartial?: PermisoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(permisoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisoPartial} [permisoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerUpdateById: async (id: number, permisoPartial?: PermisoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('permisoControllerUpdateById', 'id', id)
            const localVarPath = `/permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(permisoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerVistaEmpresaRolPermiso: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaEmpresaRolPermiso`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermisoControllerApi - functional programming interface
 * @export
 */
export const PermisoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermisoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [rolId] 
         * @param {string} [modulo] 
         * @param {string} [controlador] 
         * @param {string} [accion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerBuscarPermiso(rolId?: string, modulo?: string, controlador?: string, accion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermisoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerBuscarPermiso(rolId, modulo, controlador, accion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewPermiso} [newPermiso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerCreate(newPermiso?: NewPermiso, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permiso>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerCreate(newPermiso, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PermisoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerFind(filter?: PermisoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermisoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerFindById(id: number, filter?: PermisoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermisoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Permiso} [permiso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerReplaceById(id: number, permiso?: Permiso, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerReplaceById(id, permiso, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PermisoPartial} [permisoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerUpdateAll(where?: { [key: string]: object; }, permisoPartial?: PermisoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerUpdateAll(where, permisoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisoPartial} [permisoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerUpdateById(id: number, permisoPartial?: PermisoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerUpdateById(id, permisoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerVistaEmpresaRolPermiso(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerVistaEmpresaRolPermiso(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PermisoControllerApi - factory interface
 * @export
 */
export const PermisoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermisoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [rolId] 
         * @param {string} [modulo] 
         * @param {string} [controlador] 
         * @param {string} [accion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerBuscarPermiso(rolId?: string, modulo?: string, controlador?: string, accion?: string, options?: any): AxiosPromise<Array<PermisoWithRelations>> {
            return localVarFp.permisoControllerBuscarPermiso(rolId, modulo, controlador, accion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.permisoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewPermiso} [newPermiso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerCreate(newPermiso?: NewPermiso, options?: any): AxiosPromise<Permiso> {
            return localVarFp.permisoControllerCreate(newPermiso, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.permisoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PermisoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerFind(filter?: PermisoFilter1, options?: any): AxiosPromise<Array<PermisoWithRelations>> {
            return localVarFp.permisoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerFindById(id: number, filter?: PermisoFilter, options?: any): AxiosPromise<PermisoWithRelations> {
            return localVarFp.permisoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Permiso} [permiso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerReplaceById(id: number, permiso?: Permiso, options?: any): AxiosPromise<any> {
            return localVarFp.permisoControllerReplaceById(id, permiso, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PermisoPartial} [permisoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerUpdateAll(where?: { [key: string]: object; }, permisoPartial?: PermisoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.permisoControllerUpdateAll(where, permisoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisoPartial} [permisoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerUpdateById(id: number, permisoPartial?: PermisoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.permisoControllerUpdateById(id, permisoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerVistaEmpresaRolPermiso(options?: any): AxiosPromise<object> {
            return localVarFp.permisoControllerVistaEmpresaRolPermiso(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PermisoControllerApi - object-oriented interface
 * @export
 * @class PermisoControllerApi
 * @extends {BaseAPI}
 */
export class PermisoControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} [rolId] 
     * @param {string} [modulo] 
     * @param {string} [controlador] 
     * @param {string} [accion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerBuscarPermiso(rolId?: string, modulo?: string, controlador?: string, accion?: string, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerBuscarPermiso(rolId, modulo, controlador, accion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewPermiso} [newPermiso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerCreate(newPermiso?: NewPermiso, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerCreate(newPermiso, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PermisoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerFind(filter?: PermisoFilter1, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PermisoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerFindById(id: number, filter?: PermisoFilter, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Permiso} [permiso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerReplaceById(id: number, permiso?: Permiso, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerReplaceById(id, permiso, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {PermisoPartial} [permisoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerUpdateAll(where?: { [key: string]: object; }, permisoPartial?: PermisoPartial, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerUpdateAll(where, permisoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PermisoPartial} [permisoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerUpdateById(id: number, permisoPartial?: PermisoPartial, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerUpdateById(id, permisoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerVistaEmpresaRolPermiso(options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerVistaEmpresaRolPermiso(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PingControllerApi - axios parameter creator
 * @export
 */
export const PingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingControllerPing: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PingControllerApi - functional programming interface
 * @export
 */
export const PingControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PingControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingControllerPing(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pingControllerPing(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PingControllerApi - factory interface
 * @export
 */
export const PingControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PingControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingControllerPing(options?: any): AxiosPromise<PingResponse> {
            return localVarFp.pingControllerPing(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PingControllerApi - object-oriented interface
 * @export
 * @class PingControllerApi
 * @extends {BaseAPI}
 */
export class PingControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PingControllerApi
     */
    public pingControllerPing(options?: AxiosRequestConfig) {
        return PingControllerApiFp(this.configuration).pingControllerPing(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PlantillaEmailControllerApi - axios parameter creator
 * @export
 */
export const PlantillaEmailControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plantilla-emails/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewPlantillaEmail} [newPlantillaEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerCreate: async (newPlantillaEmail?: NewPlantillaEmail, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plantilla-emails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newPlantillaEmail, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('plantillaEmailControllerDeleteById', 'id', id)
            const localVarPath = `/plantilla-emails/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} nombrePlantilla 
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerEnviarEmails: async (nombrePlantilla: string, inlineObject3: InlineObject3, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nombrePlantilla' is not null or undefined
            assertParamExists('plantillaEmailControllerEnviarEmails', 'nombrePlantilla', nombrePlantilla)
            // verify required parameter 'inlineObject3' is not null or undefined
            assertParamExists('plantillaEmailControllerEnviarEmails', 'inlineObject3', inlineObject3)
            const localVarPath = `/plantilla-emails/enviarEmails/{nombrePlantilla}`
                .replace(`{${"nombrePlantilla"}}`, encodeURIComponent(String(nombrePlantilla)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject3, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} url 
         * @param {InlineObject4} inlineObject4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerEnviarQR: async (url: string, inlineObject4: InlineObject4, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('plantillaEmailControllerEnviarQR', 'url', url)
            // verify required parameter 'inlineObject4' is not null or undefined
            assertParamExists('plantillaEmailControllerEnviarQR', 'inlineObject4', inlineObject4)
            const localVarPath = `/plantilla-emails/enviarQR/{url}`
                .replace(`{${"url"}}`, encodeURIComponent(String(url)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject4, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PlantillaEmailFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerFind: async (filter?: PlantillaEmailFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plantilla-emails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaEmailFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerFindById: async (id: number, filter?: PlantillaEmailFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('plantillaEmailControllerFindById', 'id', id)
            const localVarPath = `/plantilla-emails/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaEmail} [plantillaEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerReplaceById: async (id: number, plantillaEmail?: PlantillaEmail, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('plantillaEmailControllerReplaceById', 'id', id)
            const localVarPath = `/plantilla-emails/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(plantillaEmail, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PlantillaEmailPartial} [plantillaEmailPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerUpdateAll: async (where?: { [key: string]: object; }, plantillaEmailPartial?: PlantillaEmailPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plantilla-emails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(plantillaEmailPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaEmailPartial} [plantillaEmailPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerUpdateById: async (id: number, plantillaEmailPartial?: PlantillaEmailPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('plantillaEmailControllerUpdateById', 'id', id)
            const localVarPath = `/plantilla-emails/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(plantillaEmailPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PlantillaEmailFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerVistaPlantillaEmailIdioma: async (filter?: PlantillaEmailFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaPlantillaEmailIdioma`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerVistaPlantillaEmailIdiomaCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaPlantillaEmailIdiomaCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlantillaEmailControllerApi - functional programming interface
 * @export
 */
export const PlantillaEmailControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlantillaEmailControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewPlantillaEmail} [newPlantillaEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerCreate(newPlantillaEmail?: NewPlantillaEmail, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlantillaEmail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerCreate(newPlantillaEmail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} nombrePlantilla 
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerEnviarEmails(nombrePlantilla: string, inlineObject3: InlineObject3, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerEnviarEmails(nombrePlantilla, inlineObject3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} url 
         * @param {InlineObject4} inlineObject4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerEnviarQR(url: string, inlineObject4: InlineObject4, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerEnviarQR(url, inlineObject4, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PlantillaEmailFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerFind(filter?: PlantillaEmailFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlantillaEmailWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaEmailFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerFindById(id: number, filter?: PlantillaEmailFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlantillaEmailWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaEmail} [plantillaEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerReplaceById(id: number, plantillaEmail?: PlantillaEmail, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerReplaceById(id, plantillaEmail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PlantillaEmailPartial} [plantillaEmailPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerUpdateAll(where?: { [key: string]: object; }, plantillaEmailPartial?: PlantillaEmailPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerUpdateAll(where, plantillaEmailPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaEmailPartial} [plantillaEmailPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerUpdateById(id: number, plantillaEmailPartial?: PlantillaEmailPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerUpdateById(id, plantillaEmailPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PlantillaEmailFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerVistaPlantillaEmailIdioma(filter?: PlantillaEmailFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerVistaPlantillaEmailIdioma(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerVistaPlantillaEmailIdiomaCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerVistaPlantillaEmailIdiomaCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlantillaEmailControllerApi - factory interface
 * @export
 */
export const PlantillaEmailControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlantillaEmailControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.plantillaEmailControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewPlantillaEmail} [newPlantillaEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerCreate(newPlantillaEmail?: NewPlantillaEmail, options?: any): AxiosPromise<PlantillaEmail> {
            return localVarFp.plantillaEmailControllerCreate(newPlantillaEmail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.plantillaEmailControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} nombrePlantilla 
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerEnviarEmails(nombrePlantilla: string, inlineObject3: InlineObject3, options?: any): AxiosPromise<void> {
            return localVarFp.plantillaEmailControllerEnviarEmails(nombrePlantilla, inlineObject3, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} url 
         * @param {InlineObject4} inlineObject4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerEnviarQR(url: string, inlineObject4: InlineObject4, options?: any): AxiosPromise<void> {
            return localVarFp.plantillaEmailControllerEnviarQR(url, inlineObject4, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PlantillaEmailFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerFind(filter?: PlantillaEmailFilter1, options?: any): AxiosPromise<Array<PlantillaEmailWithRelations>> {
            return localVarFp.plantillaEmailControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaEmailFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerFindById(id: number, filter?: PlantillaEmailFilter, options?: any): AxiosPromise<PlantillaEmailWithRelations> {
            return localVarFp.plantillaEmailControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaEmail} [plantillaEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerReplaceById(id: number, plantillaEmail?: PlantillaEmail, options?: any): AxiosPromise<any> {
            return localVarFp.plantillaEmailControllerReplaceById(id, plantillaEmail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PlantillaEmailPartial} [plantillaEmailPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerUpdateAll(where?: { [key: string]: object; }, plantillaEmailPartial?: PlantillaEmailPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.plantillaEmailControllerUpdateAll(where, plantillaEmailPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaEmailPartial} [plantillaEmailPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerUpdateById(id: number, plantillaEmailPartial?: PlantillaEmailPartial, options?: any): AxiosPromise<any> {
            return localVarFp.plantillaEmailControllerUpdateById(id, plantillaEmailPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PlantillaEmailFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerVistaPlantillaEmailIdioma(filter?: PlantillaEmailFilter1, options?: any): AxiosPromise<object> {
            return localVarFp.plantillaEmailControllerVistaPlantillaEmailIdioma(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerVistaPlantillaEmailIdiomaCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<object> {
            return localVarFp.plantillaEmailControllerVistaPlantillaEmailIdiomaCount(where, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlantillaEmailControllerApi - object-oriented interface
 * @export
 * @class PlantillaEmailControllerApi
 * @extends {BaseAPI}
 */
export class PlantillaEmailControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewPlantillaEmail} [newPlantillaEmail] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerCreate(newPlantillaEmail?: NewPlantillaEmail, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerCreate(newPlantillaEmail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} nombrePlantilla 
     * @param {InlineObject3} inlineObject3 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerEnviarEmails(nombrePlantilla: string, inlineObject3: InlineObject3, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerEnviarEmails(nombrePlantilla, inlineObject3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} url 
     * @param {InlineObject4} inlineObject4 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerEnviarQR(url: string, inlineObject4: InlineObject4, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerEnviarQR(url, inlineObject4, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlantillaEmailFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerFind(filter?: PlantillaEmailFilter1, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PlantillaEmailFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerFindById(id: number, filter?: PlantillaEmailFilter, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PlantillaEmail} [plantillaEmail] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerReplaceById(id: number, plantillaEmail?: PlantillaEmail, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerReplaceById(id, plantillaEmail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {PlantillaEmailPartial} [plantillaEmailPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerUpdateAll(where?: { [key: string]: object; }, plantillaEmailPartial?: PlantillaEmailPartial, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerUpdateAll(where, plantillaEmailPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PlantillaEmailPartial} [plantillaEmailPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerUpdateById(id: number, plantillaEmailPartial?: PlantillaEmailPartial, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerUpdateById(id, plantillaEmailPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlantillaEmailFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerVistaPlantillaEmailIdioma(filter?: PlantillaEmailFilter1, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerVistaPlantillaEmailIdioma(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerVistaPlantillaEmailIdiomaCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerVistaPlantillaEmailIdiomaCount(where, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductoAtributoControllerApi - axios parameter creator
 * @export
 */
export const ProductoAtributoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-atributos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewProductoAtributo} [newProductoAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributoControllerCreate: async (newProductoAtributo?: NewProductoAtributo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newProductoAtributo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoAtributoControllerDeleteById', 'id', id)
            const localVarPath = `/producto-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductoAtributoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributoControllerFind: async (filter?: ProductoAtributoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoAtributoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributoControllerFindById: async (id: number, filter?: ProductoAtributoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoAtributoControllerFindById', 'id', id)
            const localVarPath = `/producto-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoAtributo} [productoAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributoControllerReplaceById: async (id: number, productoAtributo?: ProductoAtributo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoAtributoControllerReplaceById', 'id', id)
            const localVarPath = `/producto-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoAtributo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoAtributoPartial} [productoAtributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributoControllerUpdateAll: async (where?: { [key: string]: object; }, productoAtributoPartial?: ProductoAtributoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoAtributoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoAtributoPartial} [productoAtributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributoControllerUpdateById: async (id: number, productoAtributoPartial?: ProductoAtributoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoAtributoControllerUpdateById', 'id', id)
            const localVarPath = `/producto-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoAtributoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductoAtributoControllerApi - functional programming interface
 * @export
 */
export const ProductoAtributoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductoAtributoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoAtributoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoAtributoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewProductoAtributo} [newProductoAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoAtributoControllerCreate(newProductoAtributo?: NewProductoAtributo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductoAtributo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoAtributoControllerCreate(newProductoAtributo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoAtributoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoAtributoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductoAtributoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoAtributoControllerFind(filter?: ProductoAtributoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductoAtributoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoAtributoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoAtributoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoAtributoControllerFindById(id: number, filter?: ProductoAtributoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductoAtributoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoAtributoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoAtributo} [productoAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoAtributoControllerReplaceById(id: number, productoAtributo?: ProductoAtributo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoAtributoControllerReplaceById(id, productoAtributo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoAtributoPartial} [productoAtributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoAtributoControllerUpdateAll(where?: { [key: string]: object; }, productoAtributoPartial?: ProductoAtributoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoAtributoControllerUpdateAll(where, productoAtributoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoAtributoPartial} [productoAtributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoAtributoControllerUpdateById(id: number, productoAtributoPartial?: ProductoAtributoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoAtributoControllerUpdateById(id, productoAtributoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductoAtributoControllerApi - factory interface
 * @export
 */
export const ProductoAtributoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductoAtributoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productoAtributoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewProductoAtributo} [newProductoAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributoControllerCreate(newProductoAtributo?: NewProductoAtributo, options?: any): AxiosPromise<ProductoAtributo> {
            return localVarFp.productoAtributoControllerCreate(newProductoAtributo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.productoAtributoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductoAtributoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributoControllerFind(filter?: ProductoAtributoFilter1, options?: any): AxiosPromise<Array<ProductoAtributoWithRelations>> {
            return localVarFp.productoAtributoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoAtributoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributoControllerFindById(id: number, filter?: ProductoAtributoFilter, options?: any): AxiosPromise<ProductoAtributoWithRelations> {
            return localVarFp.productoAtributoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoAtributo} [productoAtributo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributoControllerReplaceById(id: number, productoAtributo?: ProductoAtributo, options?: any): AxiosPromise<any> {
            return localVarFp.productoAtributoControllerReplaceById(id, productoAtributo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoAtributoPartial} [productoAtributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributoControllerUpdateAll(where?: { [key: string]: object; }, productoAtributoPartial?: ProductoAtributoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productoAtributoControllerUpdateAll(where, productoAtributoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoAtributoPartial} [productoAtributoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributoControllerUpdateById(id: number, productoAtributoPartial?: ProductoAtributoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.productoAtributoControllerUpdateById(id, productoAtributoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductoAtributoControllerApi - object-oriented interface
 * @export
 * @class ProductoAtributoControllerApi
 * @extends {BaseAPI}
 */
export class ProductoAtributoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoAtributoControllerApi
     */
    public productoAtributoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ProductoAtributoControllerApiFp(this.configuration).productoAtributoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewProductoAtributo} [newProductoAtributo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoAtributoControllerApi
     */
    public productoAtributoControllerCreate(newProductoAtributo?: NewProductoAtributo, options?: AxiosRequestConfig) {
        return ProductoAtributoControllerApiFp(this.configuration).productoAtributoControllerCreate(newProductoAtributo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoAtributoControllerApi
     */
    public productoAtributoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ProductoAtributoControllerApiFp(this.configuration).productoAtributoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductoAtributoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoAtributoControllerApi
     */
    public productoAtributoControllerFind(filter?: ProductoAtributoFilter1, options?: AxiosRequestConfig) {
        return ProductoAtributoControllerApiFp(this.configuration).productoAtributoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoAtributoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoAtributoControllerApi
     */
    public productoAtributoControllerFindById(id: number, filter?: ProductoAtributoFilter, options?: AxiosRequestConfig) {
        return ProductoAtributoControllerApiFp(this.configuration).productoAtributoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoAtributo} [productoAtributo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoAtributoControllerApi
     */
    public productoAtributoControllerReplaceById(id: number, productoAtributo?: ProductoAtributo, options?: AxiosRequestConfig) {
        return ProductoAtributoControllerApiFp(this.configuration).productoAtributoControllerReplaceById(id, productoAtributo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ProductoAtributoPartial} [productoAtributoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoAtributoControllerApi
     */
    public productoAtributoControllerUpdateAll(where?: { [key: string]: object; }, productoAtributoPartial?: ProductoAtributoPartial, options?: AxiosRequestConfig) {
        return ProductoAtributoControllerApiFp(this.configuration).productoAtributoControllerUpdateAll(where, productoAtributoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoAtributoPartial} [productoAtributoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoAtributoControllerApi
     */
    public productoAtributoControllerUpdateById(id: number, productoAtributoPartial?: ProductoAtributoPartial, options?: AxiosRequestConfig) {
        return ProductoAtributoControllerApiFp(this.configuration).productoAtributoControllerUpdateById(id, productoAtributoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductoCampoDinamicoControllerApi - axios parameter creator
 * @export
 */
export const ProductoCampoDinamicoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoCampoDinamicoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-campo-dinamicos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewProductoCampoDinamico} [newProductoCampoDinamico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoCampoDinamicoControllerCreate: async (newProductoCampoDinamico?: NewProductoCampoDinamico, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-campo-dinamicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newProductoCampoDinamico, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoCampoDinamicoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoCampoDinamicoControllerDeleteById', 'id', id)
            const localVarPath = `/producto-campo-dinamicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductoCampoDinamicoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoCampoDinamicoControllerFind: async (filter?: ProductoCampoDinamicoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-campo-dinamicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoCampoDinamicoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoCampoDinamicoControllerFindById: async (id: number, filter?: ProductoCampoDinamicoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoCampoDinamicoControllerFindById', 'id', id)
            const localVarPath = `/producto-campo-dinamicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoCampoDinamico} [productoCampoDinamico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoCampoDinamicoControllerReplaceById: async (id: number, productoCampoDinamico?: ProductoCampoDinamico, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoCampoDinamicoControllerReplaceById', 'id', id)
            const localVarPath = `/producto-campo-dinamicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoCampoDinamico, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoCampoDinamicoPartial} [productoCampoDinamicoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoCampoDinamicoControllerUpdateAll: async (where?: { [key: string]: object; }, productoCampoDinamicoPartial?: ProductoCampoDinamicoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-campo-dinamicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoCampoDinamicoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoCampoDinamicoPartial} [productoCampoDinamicoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoCampoDinamicoControllerUpdateById: async (id: number, productoCampoDinamicoPartial?: ProductoCampoDinamicoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoCampoDinamicoControllerUpdateById', 'id', id)
            const localVarPath = `/producto-campo-dinamicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoCampoDinamicoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductoCampoDinamicoControllerApi - functional programming interface
 * @export
 */
export const ProductoCampoDinamicoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductoCampoDinamicoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoCampoDinamicoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoCampoDinamicoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewProductoCampoDinamico} [newProductoCampoDinamico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoCampoDinamicoControllerCreate(newProductoCampoDinamico?: NewProductoCampoDinamico, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductoCampoDinamico>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoCampoDinamicoControllerCreate(newProductoCampoDinamico, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoCampoDinamicoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoCampoDinamicoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductoCampoDinamicoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoCampoDinamicoControllerFind(filter?: ProductoCampoDinamicoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductoCampoDinamicoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoCampoDinamicoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoCampoDinamicoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoCampoDinamicoControllerFindById(id: number, filter?: ProductoCampoDinamicoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductoCampoDinamicoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoCampoDinamicoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoCampoDinamico} [productoCampoDinamico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoCampoDinamicoControllerReplaceById(id: number, productoCampoDinamico?: ProductoCampoDinamico, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoCampoDinamicoControllerReplaceById(id, productoCampoDinamico, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoCampoDinamicoPartial} [productoCampoDinamicoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoCampoDinamicoControllerUpdateAll(where?: { [key: string]: object; }, productoCampoDinamicoPartial?: ProductoCampoDinamicoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoCampoDinamicoControllerUpdateAll(where, productoCampoDinamicoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoCampoDinamicoPartial} [productoCampoDinamicoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoCampoDinamicoControllerUpdateById(id: number, productoCampoDinamicoPartial?: ProductoCampoDinamicoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoCampoDinamicoControllerUpdateById(id, productoCampoDinamicoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductoCampoDinamicoControllerApi - factory interface
 * @export
 */
export const ProductoCampoDinamicoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductoCampoDinamicoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoCampoDinamicoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productoCampoDinamicoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewProductoCampoDinamico} [newProductoCampoDinamico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoCampoDinamicoControllerCreate(newProductoCampoDinamico?: NewProductoCampoDinamico, options?: any): AxiosPromise<ProductoCampoDinamico> {
            return localVarFp.productoCampoDinamicoControllerCreate(newProductoCampoDinamico, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoCampoDinamicoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.productoCampoDinamicoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductoCampoDinamicoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoCampoDinamicoControllerFind(filter?: ProductoCampoDinamicoFilter1, options?: any): AxiosPromise<Array<ProductoCampoDinamicoWithRelations>> {
            return localVarFp.productoCampoDinamicoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoCampoDinamicoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoCampoDinamicoControllerFindById(id: number, filter?: ProductoCampoDinamicoFilter, options?: any): AxiosPromise<ProductoCampoDinamicoWithRelations> {
            return localVarFp.productoCampoDinamicoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoCampoDinamico} [productoCampoDinamico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoCampoDinamicoControllerReplaceById(id: number, productoCampoDinamico?: ProductoCampoDinamico, options?: any): AxiosPromise<any> {
            return localVarFp.productoCampoDinamicoControllerReplaceById(id, productoCampoDinamico, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoCampoDinamicoPartial} [productoCampoDinamicoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoCampoDinamicoControllerUpdateAll(where?: { [key: string]: object; }, productoCampoDinamicoPartial?: ProductoCampoDinamicoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productoCampoDinamicoControllerUpdateAll(where, productoCampoDinamicoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoCampoDinamicoPartial} [productoCampoDinamicoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoCampoDinamicoControllerUpdateById(id: number, productoCampoDinamicoPartial?: ProductoCampoDinamicoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.productoCampoDinamicoControllerUpdateById(id, productoCampoDinamicoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductoCampoDinamicoControllerApi - object-oriented interface
 * @export
 * @class ProductoCampoDinamicoControllerApi
 * @extends {BaseAPI}
 */
export class ProductoCampoDinamicoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoCampoDinamicoControllerApi
     */
    public productoCampoDinamicoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ProductoCampoDinamicoControllerApiFp(this.configuration).productoCampoDinamicoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewProductoCampoDinamico} [newProductoCampoDinamico] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoCampoDinamicoControllerApi
     */
    public productoCampoDinamicoControllerCreate(newProductoCampoDinamico?: NewProductoCampoDinamico, options?: AxiosRequestConfig) {
        return ProductoCampoDinamicoControllerApiFp(this.configuration).productoCampoDinamicoControllerCreate(newProductoCampoDinamico, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoCampoDinamicoControllerApi
     */
    public productoCampoDinamicoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ProductoCampoDinamicoControllerApiFp(this.configuration).productoCampoDinamicoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductoCampoDinamicoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoCampoDinamicoControllerApi
     */
    public productoCampoDinamicoControllerFind(filter?: ProductoCampoDinamicoFilter1, options?: AxiosRequestConfig) {
        return ProductoCampoDinamicoControllerApiFp(this.configuration).productoCampoDinamicoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoCampoDinamicoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoCampoDinamicoControllerApi
     */
    public productoCampoDinamicoControllerFindById(id: number, filter?: ProductoCampoDinamicoFilter, options?: AxiosRequestConfig) {
        return ProductoCampoDinamicoControllerApiFp(this.configuration).productoCampoDinamicoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoCampoDinamico} [productoCampoDinamico] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoCampoDinamicoControllerApi
     */
    public productoCampoDinamicoControllerReplaceById(id: number, productoCampoDinamico?: ProductoCampoDinamico, options?: AxiosRequestConfig) {
        return ProductoCampoDinamicoControllerApiFp(this.configuration).productoCampoDinamicoControllerReplaceById(id, productoCampoDinamico, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ProductoCampoDinamicoPartial} [productoCampoDinamicoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoCampoDinamicoControllerApi
     */
    public productoCampoDinamicoControllerUpdateAll(where?: { [key: string]: object; }, productoCampoDinamicoPartial?: ProductoCampoDinamicoPartial, options?: AxiosRequestConfig) {
        return ProductoCampoDinamicoControllerApiFp(this.configuration).productoCampoDinamicoControllerUpdateAll(where, productoCampoDinamicoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoCampoDinamicoPartial} [productoCampoDinamicoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoCampoDinamicoControllerApi
     */
    public productoCampoDinamicoControllerUpdateById(id: number, productoCampoDinamicoPartial?: ProductoCampoDinamicoPartial, options?: AxiosRequestConfig) {
        return ProductoCampoDinamicoControllerApiFp(this.configuration).productoCampoDinamicoControllerUpdateById(id, productoCampoDinamicoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductoControllerApi - axios parameter creator
 * @export
 */
export const ProductoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/productos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewProducto} [newProducto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoControllerCreate: async (newProducto?: NewProducto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/productos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newProducto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoControllerDeleteById', 'id', id)
            const localVarPath = `/productos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoControllerFind: async (filter?: ProductoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/productos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoControllerFindById: async (id: number, filter?: ProductoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoControllerFindById', 'id', id)
            const localVarPath = `/productos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Producto} [producto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoControllerReplaceById: async (id: number, producto?: Producto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoControllerReplaceById', 'id', id)
            const localVarPath = `/productos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(producto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoPartial} [productoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoControllerUpdateAll: async (where?: { [key: string]: object; }, productoPartial?: ProductoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/productos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoPartial} [productoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoControllerUpdateById: async (id: number, productoPartial?: ProductoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoControllerUpdateById', 'id', id)
            const localVarPath = `/productos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductoControllerApi - functional programming interface
 * @export
 */
export const ProductoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewProducto} [newProducto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoControllerCreate(newProducto?: NewProducto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Producto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoControllerCreate(newProducto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoControllerFind(filter?: ProductoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoControllerFindById(id: number, filter?: ProductoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Producto} [producto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoControllerReplaceById(id: number, producto?: Producto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoControllerReplaceById(id, producto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoPartial} [productoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoControllerUpdateAll(where?: { [key: string]: object; }, productoPartial?: ProductoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoControllerUpdateAll(where, productoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoPartial} [productoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoControllerUpdateById(id: number, productoPartial?: ProductoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoControllerUpdateById(id, productoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductoControllerApi - factory interface
 * @export
 */
export const ProductoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewProducto} [newProducto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoControllerCreate(newProducto?: NewProducto, options?: any): AxiosPromise<Producto> {
            return localVarFp.productoControllerCreate(newProducto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.productoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoControllerFind(filter?: ProductoFilter1, options?: any): AxiosPromise<Array<ProductoWithRelations>> {
            return localVarFp.productoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoControllerFindById(id: number, filter?: ProductoFilter, options?: any): AxiosPromise<ProductoWithRelations> {
            return localVarFp.productoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Producto} [producto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoControllerReplaceById(id: number, producto?: Producto, options?: any): AxiosPromise<any> {
            return localVarFp.productoControllerReplaceById(id, producto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoPartial} [productoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoControllerUpdateAll(where?: { [key: string]: object; }, productoPartial?: ProductoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productoControllerUpdateAll(where, productoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoPartial} [productoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoControllerUpdateById(id: number, productoPartial?: ProductoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.productoControllerUpdateById(id, productoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductoControllerApi - object-oriented interface
 * @export
 * @class ProductoControllerApi
 * @extends {BaseAPI}
 */
export class ProductoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoControllerApi
     */
    public productoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ProductoControllerApiFp(this.configuration).productoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewProducto} [newProducto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoControllerApi
     */
    public productoControllerCreate(newProducto?: NewProducto, options?: AxiosRequestConfig) {
        return ProductoControllerApiFp(this.configuration).productoControllerCreate(newProducto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoControllerApi
     */
    public productoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ProductoControllerApiFp(this.configuration).productoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoControllerApi
     */
    public productoControllerFind(filter?: ProductoFilter1, options?: AxiosRequestConfig) {
        return ProductoControllerApiFp(this.configuration).productoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoControllerApi
     */
    public productoControllerFindById(id: number, filter?: ProductoFilter, options?: AxiosRequestConfig) {
        return ProductoControllerApiFp(this.configuration).productoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Producto} [producto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoControllerApi
     */
    public productoControllerReplaceById(id: number, producto?: Producto, options?: AxiosRequestConfig) {
        return ProductoControllerApiFp(this.configuration).productoControllerReplaceById(id, producto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ProductoPartial} [productoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoControllerApi
     */
    public productoControllerUpdateAll(where?: { [key: string]: object; }, productoPartial?: ProductoPartial, options?: AxiosRequestConfig) {
        return ProductoControllerApiFp(this.configuration).productoControllerUpdateAll(where, productoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoPartial} [productoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoControllerApi
     */
    public productoControllerUpdateById(id: number, productoPartial?: ProductoPartial, options?: AxiosRequestConfig) {
        return ProductoControllerApiFp(this.configuration).productoControllerUpdateById(id, productoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductoIconoControllerApi - axios parameter creator
 * @export
 */
export const ProductoIconoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoIconoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-iconos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewProductoIcono} [newProductoIcono] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoIconoControllerCreate: async (newProductoIcono?: NewProductoIcono, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-iconos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newProductoIcono, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoIconoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoIconoControllerDeleteById', 'id', id)
            const localVarPath = `/producto-iconos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductoIconoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoIconoControllerFind: async (filter?: ProductoIconoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-iconos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoIconoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoIconoControllerFindById: async (id: number, filter?: ProductoIconoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoIconoControllerFindById', 'id', id)
            const localVarPath = `/producto-iconos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoIcono} [productoIcono] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoIconoControllerReplaceById: async (id: number, productoIcono?: ProductoIcono, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoIconoControllerReplaceById', 'id', id)
            const localVarPath = `/producto-iconos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoIcono, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoIconoPartial} [productoIconoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoIconoControllerUpdateAll: async (where?: { [key: string]: object; }, productoIconoPartial?: ProductoIconoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-iconos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoIconoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoIconoPartial} [productoIconoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoIconoControllerUpdateById: async (id: number, productoIconoPartial?: ProductoIconoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoIconoControllerUpdateById', 'id', id)
            const localVarPath = `/producto-iconos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoIconoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductoIconoControllerApi - functional programming interface
 * @export
 */
export const ProductoIconoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductoIconoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoIconoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoIconoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewProductoIcono} [newProductoIcono] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoIconoControllerCreate(newProductoIcono?: NewProductoIcono, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductoIcono>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoIconoControllerCreate(newProductoIcono, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoIconoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoIconoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductoIconoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoIconoControllerFind(filter?: ProductoIconoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductoIconoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoIconoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoIconoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoIconoControllerFindById(id: number, filter?: ProductoIconoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductoIconoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoIconoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoIcono} [productoIcono] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoIconoControllerReplaceById(id: number, productoIcono?: ProductoIcono, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoIconoControllerReplaceById(id, productoIcono, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoIconoPartial} [productoIconoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoIconoControllerUpdateAll(where?: { [key: string]: object; }, productoIconoPartial?: ProductoIconoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoIconoControllerUpdateAll(where, productoIconoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoIconoPartial} [productoIconoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoIconoControllerUpdateById(id: number, productoIconoPartial?: ProductoIconoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoIconoControllerUpdateById(id, productoIconoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductoIconoControllerApi - factory interface
 * @export
 */
export const ProductoIconoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductoIconoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoIconoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productoIconoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewProductoIcono} [newProductoIcono] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoIconoControllerCreate(newProductoIcono?: NewProductoIcono, options?: any): AxiosPromise<ProductoIcono> {
            return localVarFp.productoIconoControllerCreate(newProductoIcono, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoIconoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.productoIconoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductoIconoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoIconoControllerFind(filter?: ProductoIconoFilter1, options?: any): AxiosPromise<Array<ProductoIconoWithRelations>> {
            return localVarFp.productoIconoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoIconoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoIconoControllerFindById(id: number, filter?: ProductoIconoFilter, options?: any): AxiosPromise<ProductoIconoWithRelations> {
            return localVarFp.productoIconoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoIcono} [productoIcono] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoIconoControllerReplaceById(id: number, productoIcono?: ProductoIcono, options?: any): AxiosPromise<any> {
            return localVarFp.productoIconoControllerReplaceById(id, productoIcono, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoIconoPartial} [productoIconoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoIconoControllerUpdateAll(where?: { [key: string]: object; }, productoIconoPartial?: ProductoIconoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productoIconoControllerUpdateAll(where, productoIconoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoIconoPartial} [productoIconoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoIconoControllerUpdateById(id: number, productoIconoPartial?: ProductoIconoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.productoIconoControllerUpdateById(id, productoIconoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductoIconoControllerApi - object-oriented interface
 * @export
 * @class ProductoIconoControllerApi
 * @extends {BaseAPI}
 */
export class ProductoIconoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoIconoControllerApi
     */
    public productoIconoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ProductoIconoControllerApiFp(this.configuration).productoIconoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewProductoIcono} [newProductoIcono] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoIconoControllerApi
     */
    public productoIconoControllerCreate(newProductoIcono?: NewProductoIcono, options?: AxiosRequestConfig) {
        return ProductoIconoControllerApiFp(this.configuration).productoIconoControllerCreate(newProductoIcono, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoIconoControllerApi
     */
    public productoIconoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ProductoIconoControllerApiFp(this.configuration).productoIconoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductoIconoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoIconoControllerApi
     */
    public productoIconoControllerFind(filter?: ProductoIconoFilter1, options?: AxiosRequestConfig) {
        return ProductoIconoControllerApiFp(this.configuration).productoIconoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoIconoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoIconoControllerApi
     */
    public productoIconoControllerFindById(id: number, filter?: ProductoIconoFilter, options?: AxiosRequestConfig) {
        return ProductoIconoControllerApiFp(this.configuration).productoIconoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoIcono} [productoIcono] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoIconoControllerApi
     */
    public productoIconoControllerReplaceById(id: number, productoIcono?: ProductoIcono, options?: AxiosRequestConfig) {
        return ProductoIconoControllerApiFp(this.configuration).productoIconoControllerReplaceById(id, productoIcono, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ProductoIconoPartial} [productoIconoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoIconoControllerApi
     */
    public productoIconoControllerUpdateAll(where?: { [key: string]: object; }, productoIconoPartial?: ProductoIconoPartial, options?: AxiosRequestConfig) {
        return ProductoIconoControllerApiFp(this.configuration).productoIconoControllerUpdateAll(where, productoIconoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoIconoPartial} [productoIconoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoIconoControllerApi
     */
    public productoIconoControllerUpdateById(id: number, productoIconoPartial?: ProductoIconoPartial, options?: AxiosRequestConfig) {
        return ProductoIconoControllerApiFp(this.configuration).productoIconoControllerUpdateById(id, productoIconoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductoMarketplaceControllerApi - axios parameter creator
 * @export
 */
export const ProductoMarketplaceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMarketplaceControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-marketplaces/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewProductoMarketplace} [newProductoMarketplace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMarketplaceControllerCreate: async (newProductoMarketplace?: NewProductoMarketplace, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-marketplaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newProductoMarketplace, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMarketplaceControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoMarketplaceControllerDeleteById', 'id', id)
            const localVarPath = `/producto-marketplaces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductoMarketplaceFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMarketplaceControllerFind: async (filter?: ProductoMarketplaceFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-marketplaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMarketplaceFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMarketplaceControllerFindById: async (id: number, filter?: ProductoMarketplaceFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoMarketplaceControllerFindById', 'id', id)
            const localVarPath = `/producto-marketplaces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMarketplace} [productoMarketplace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMarketplaceControllerReplaceById: async (id: number, productoMarketplace?: ProductoMarketplace, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoMarketplaceControllerReplaceById', 'id', id)
            const localVarPath = `/producto-marketplaces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoMarketplace, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoMarketplacePartial} [productoMarketplacePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMarketplaceControllerUpdateAll: async (where?: { [key: string]: object; }, productoMarketplacePartial?: ProductoMarketplacePartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-marketplaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoMarketplacePartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMarketplacePartial} [productoMarketplacePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMarketplaceControllerUpdateById: async (id: number, productoMarketplacePartial?: ProductoMarketplacePartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoMarketplaceControllerUpdateById', 'id', id)
            const localVarPath = `/producto-marketplaces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoMarketplacePartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductoMarketplaceControllerApi - functional programming interface
 * @export
 */
export const ProductoMarketplaceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductoMarketplaceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMarketplaceControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMarketplaceControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewProductoMarketplace} [newProductoMarketplace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMarketplaceControllerCreate(newProductoMarketplace?: NewProductoMarketplace, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductoMarketplace>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMarketplaceControllerCreate(newProductoMarketplace, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMarketplaceControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMarketplaceControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductoMarketplaceFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMarketplaceControllerFind(filter?: ProductoMarketplaceFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductoMarketplaceWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMarketplaceControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMarketplaceFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMarketplaceControllerFindById(id: number, filter?: ProductoMarketplaceFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductoMarketplaceWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMarketplaceControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMarketplace} [productoMarketplace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMarketplaceControllerReplaceById(id: number, productoMarketplace?: ProductoMarketplace, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMarketplaceControllerReplaceById(id, productoMarketplace, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoMarketplacePartial} [productoMarketplacePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMarketplaceControllerUpdateAll(where?: { [key: string]: object; }, productoMarketplacePartial?: ProductoMarketplacePartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMarketplaceControllerUpdateAll(where, productoMarketplacePartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMarketplacePartial} [productoMarketplacePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMarketplaceControllerUpdateById(id: number, productoMarketplacePartial?: ProductoMarketplacePartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMarketplaceControllerUpdateById(id, productoMarketplacePartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductoMarketplaceControllerApi - factory interface
 * @export
 */
export const ProductoMarketplaceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductoMarketplaceControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMarketplaceControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productoMarketplaceControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewProductoMarketplace} [newProductoMarketplace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMarketplaceControllerCreate(newProductoMarketplace?: NewProductoMarketplace, options?: any): AxiosPromise<ProductoMarketplace> {
            return localVarFp.productoMarketplaceControllerCreate(newProductoMarketplace, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMarketplaceControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.productoMarketplaceControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductoMarketplaceFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMarketplaceControllerFind(filter?: ProductoMarketplaceFilter1, options?: any): AxiosPromise<Array<ProductoMarketplaceWithRelations>> {
            return localVarFp.productoMarketplaceControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMarketplaceFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMarketplaceControllerFindById(id: number, filter?: ProductoMarketplaceFilter, options?: any): AxiosPromise<ProductoMarketplaceWithRelations> {
            return localVarFp.productoMarketplaceControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMarketplace} [productoMarketplace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMarketplaceControllerReplaceById(id: number, productoMarketplace?: ProductoMarketplace, options?: any): AxiosPromise<any> {
            return localVarFp.productoMarketplaceControllerReplaceById(id, productoMarketplace, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoMarketplacePartial} [productoMarketplacePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMarketplaceControllerUpdateAll(where?: { [key: string]: object; }, productoMarketplacePartial?: ProductoMarketplacePartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productoMarketplaceControllerUpdateAll(where, productoMarketplacePartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMarketplacePartial} [productoMarketplacePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMarketplaceControllerUpdateById(id: number, productoMarketplacePartial?: ProductoMarketplacePartial, options?: any): AxiosPromise<any> {
            return localVarFp.productoMarketplaceControllerUpdateById(id, productoMarketplacePartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductoMarketplaceControllerApi - object-oriented interface
 * @export
 * @class ProductoMarketplaceControllerApi
 * @extends {BaseAPI}
 */
export class ProductoMarketplaceControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMarketplaceControllerApi
     */
    public productoMarketplaceControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ProductoMarketplaceControllerApiFp(this.configuration).productoMarketplaceControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewProductoMarketplace} [newProductoMarketplace] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMarketplaceControllerApi
     */
    public productoMarketplaceControllerCreate(newProductoMarketplace?: NewProductoMarketplace, options?: AxiosRequestConfig) {
        return ProductoMarketplaceControllerApiFp(this.configuration).productoMarketplaceControllerCreate(newProductoMarketplace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMarketplaceControllerApi
     */
    public productoMarketplaceControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ProductoMarketplaceControllerApiFp(this.configuration).productoMarketplaceControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductoMarketplaceFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMarketplaceControllerApi
     */
    public productoMarketplaceControllerFind(filter?: ProductoMarketplaceFilter1, options?: AxiosRequestConfig) {
        return ProductoMarketplaceControllerApiFp(this.configuration).productoMarketplaceControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoMarketplaceFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMarketplaceControllerApi
     */
    public productoMarketplaceControllerFindById(id: number, filter?: ProductoMarketplaceFilter, options?: AxiosRequestConfig) {
        return ProductoMarketplaceControllerApiFp(this.configuration).productoMarketplaceControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoMarketplace} [productoMarketplace] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMarketplaceControllerApi
     */
    public productoMarketplaceControllerReplaceById(id: number, productoMarketplace?: ProductoMarketplace, options?: AxiosRequestConfig) {
        return ProductoMarketplaceControllerApiFp(this.configuration).productoMarketplaceControllerReplaceById(id, productoMarketplace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ProductoMarketplacePartial} [productoMarketplacePartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMarketplaceControllerApi
     */
    public productoMarketplaceControllerUpdateAll(where?: { [key: string]: object; }, productoMarketplacePartial?: ProductoMarketplacePartial, options?: AxiosRequestConfig) {
        return ProductoMarketplaceControllerApiFp(this.configuration).productoMarketplaceControllerUpdateAll(where, productoMarketplacePartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoMarketplacePartial} [productoMarketplacePartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMarketplaceControllerApi
     */
    public productoMarketplaceControllerUpdateById(id: number, productoMarketplacePartial?: ProductoMarketplacePartial, options?: AxiosRequestConfig) {
        return ProductoMarketplaceControllerApiFp(this.configuration).productoMarketplaceControllerUpdateById(id, productoMarketplacePartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductoMultimediaControllerApi - axios parameter creator
 * @export
 */
export const ProductoMultimediaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-multimedias/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewProductoMultimedia} [newProductoMultimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerCreate: async (newProductoMultimedia?: NewProductoMultimedia, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-multimedias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newProductoMultimedia, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoMultimediaControllerDeleteById', 'id', id)
            const localVarPath = `/producto-multimedias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductoMultimediaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerFind: async (filter?: ProductoMultimediaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-multimedias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMultimediaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerFindById: async (id: number, filter?: ProductoMultimediaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoMultimediaControllerFindById', 'id', id)
            const localVarPath = `/producto-multimedias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMultimedia} [productoMultimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerReplaceById: async (id: number, productoMultimedia?: ProductoMultimedia, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoMultimediaControllerReplaceById', 'id', id)
            const localVarPath = `/producto-multimedias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoMultimedia, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoMultimediaPartial} [productoMultimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerUpdateAll: async (where?: { [key: string]: object; }, productoMultimediaPartial?: ProductoMultimediaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-multimedias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoMultimediaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMultimediaPartial} [productoMultimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerUpdateById: async (id: number, productoMultimediaPartial?: ProductoMultimediaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoMultimediaControllerUpdateById', 'id', id)
            const localVarPath = `/producto-multimedias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoMultimediaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductoMultimediaControllerApi - functional programming interface
 * @export
 */
export const ProductoMultimediaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductoMultimediaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMultimediaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMultimediaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewProductoMultimedia} [newProductoMultimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMultimediaControllerCreate(newProductoMultimedia?: NewProductoMultimedia, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductoMultimedia>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMultimediaControllerCreate(newProductoMultimedia, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMultimediaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMultimediaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductoMultimediaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMultimediaControllerFind(filter?: ProductoMultimediaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductoMultimediaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMultimediaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMultimediaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMultimediaControllerFindById(id: number, filter?: ProductoMultimediaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductoMultimediaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMultimediaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMultimedia} [productoMultimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMultimediaControllerReplaceById(id: number, productoMultimedia?: ProductoMultimedia, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMultimediaControllerReplaceById(id, productoMultimedia, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoMultimediaPartial} [productoMultimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMultimediaControllerUpdateAll(where?: { [key: string]: object; }, productoMultimediaPartial?: ProductoMultimediaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMultimediaControllerUpdateAll(where, productoMultimediaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMultimediaPartial} [productoMultimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMultimediaControllerUpdateById(id: number, productoMultimediaPartial?: ProductoMultimediaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMultimediaControllerUpdateById(id, productoMultimediaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductoMultimediaControllerApi - factory interface
 * @export
 */
export const ProductoMultimediaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductoMultimediaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productoMultimediaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewProductoMultimedia} [newProductoMultimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerCreate(newProductoMultimedia?: NewProductoMultimedia, options?: any): AxiosPromise<ProductoMultimedia> {
            return localVarFp.productoMultimediaControllerCreate(newProductoMultimedia, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.productoMultimediaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductoMultimediaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerFind(filter?: ProductoMultimediaFilter1, options?: any): AxiosPromise<Array<ProductoMultimediaWithRelations>> {
            return localVarFp.productoMultimediaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMultimediaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerFindById(id: number, filter?: ProductoMultimediaFilter, options?: any): AxiosPromise<ProductoMultimediaWithRelations> {
            return localVarFp.productoMultimediaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMultimedia} [productoMultimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerReplaceById(id: number, productoMultimedia?: ProductoMultimedia, options?: any): AxiosPromise<any> {
            return localVarFp.productoMultimediaControllerReplaceById(id, productoMultimedia, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoMultimediaPartial} [productoMultimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerUpdateAll(where?: { [key: string]: object; }, productoMultimediaPartial?: ProductoMultimediaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productoMultimediaControllerUpdateAll(where, productoMultimediaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMultimediaPartial} [productoMultimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerUpdateById(id: number, productoMultimediaPartial?: ProductoMultimediaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.productoMultimediaControllerUpdateById(id, productoMultimediaPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductoMultimediaControllerApi - object-oriented interface
 * @export
 * @class ProductoMultimediaControllerApi
 * @extends {BaseAPI}
 */
export class ProductoMultimediaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMultimediaControllerApi
     */
    public productoMultimediaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ProductoMultimediaControllerApiFp(this.configuration).productoMultimediaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewProductoMultimedia} [newProductoMultimedia] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMultimediaControllerApi
     */
    public productoMultimediaControllerCreate(newProductoMultimedia?: NewProductoMultimedia, options?: AxiosRequestConfig) {
        return ProductoMultimediaControllerApiFp(this.configuration).productoMultimediaControllerCreate(newProductoMultimedia, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMultimediaControllerApi
     */
    public productoMultimediaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ProductoMultimediaControllerApiFp(this.configuration).productoMultimediaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductoMultimediaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMultimediaControllerApi
     */
    public productoMultimediaControllerFind(filter?: ProductoMultimediaFilter1, options?: AxiosRequestConfig) {
        return ProductoMultimediaControllerApiFp(this.configuration).productoMultimediaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoMultimediaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMultimediaControllerApi
     */
    public productoMultimediaControllerFindById(id: number, filter?: ProductoMultimediaFilter, options?: AxiosRequestConfig) {
        return ProductoMultimediaControllerApiFp(this.configuration).productoMultimediaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoMultimedia} [productoMultimedia] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMultimediaControllerApi
     */
    public productoMultimediaControllerReplaceById(id: number, productoMultimedia?: ProductoMultimedia, options?: AxiosRequestConfig) {
        return ProductoMultimediaControllerApiFp(this.configuration).productoMultimediaControllerReplaceById(id, productoMultimedia, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ProductoMultimediaPartial} [productoMultimediaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMultimediaControllerApi
     */
    public productoMultimediaControllerUpdateAll(where?: { [key: string]: object; }, productoMultimediaPartial?: ProductoMultimediaPartial, options?: AxiosRequestConfig) {
        return ProductoMultimediaControllerApiFp(this.configuration).productoMultimediaControllerUpdateAll(where, productoMultimediaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoMultimediaPartial} [productoMultimediaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMultimediaControllerApi
     */
    public productoMultimediaControllerUpdateById(id: number, productoMultimediaPartial?: ProductoMultimediaPartial, options?: AxiosRequestConfig) {
        return ProductoMultimediaControllerApiFp(this.configuration).productoMultimediaControllerUpdateById(id, productoMultimediaPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RefrescarTokenControllerApi - axios parameter creator
 * @export
 */
export const RefrescarTokenControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/refrescar-tokens/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewRefrescarToken} [newRefrescarToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerCreate: async (newRefrescarToken?: NewRefrescarToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/refrescar-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newRefrescarToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refrescarTokenControllerDeleteById', 'id', id)
            const localVarPath = `/refrescar-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefrescarTokenFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerFind: async (filter?: RefrescarTokenFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/refrescar-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarTokenFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerFindById: async (id: number, filter?: RefrescarTokenFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refrescarTokenControllerFindById', 'id', id)
            const localVarPath = `/refrescar-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarToken} [refrescarToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerReplaceById: async (id: number, refrescarToken?: RefrescarToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refrescarTokenControllerReplaceById', 'id', id)
            const localVarPath = `/refrescar-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refrescarToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerUpdateAll: async (where?: { [key: string]: object; }, refrescarTokenPartial?: RefrescarTokenPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/refrescar-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refrescarTokenPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerUpdateById: async (id: number, refrescarTokenPartial?: RefrescarTokenPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refrescarTokenControllerUpdateById', 'id', id)
            const localVarPath = `/refrescar-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refrescarTokenPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RefrescarTokenControllerApi - functional programming interface
 * @export
 */
export const RefrescarTokenControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RefrescarTokenControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewRefrescarToken} [newRefrescarToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerCreate(newRefrescarToken?: NewRefrescarToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefrescarToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerCreate(newRefrescarToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RefrescarTokenFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerFind(filter?: RefrescarTokenFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RefrescarTokenWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarTokenFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerFindById(id: number, filter?: RefrescarTokenFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefrescarTokenWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarToken} [refrescarToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerReplaceById(id: number, refrescarToken?: RefrescarToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerReplaceById(id, refrescarToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerUpdateAll(where?: { [key: string]: object; }, refrescarTokenPartial?: RefrescarTokenPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerUpdateAll(where, refrescarTokenPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerUpdateById(id: number, refrescarTokenPartial?: RefrescarTokenPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerUpdateById(id, refrescarTokenPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RefrescarTokenControllerApi - factory interface
 * @export
 */
export const RefrescarTokenControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RefrescarTokenControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.refrescarTokenControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewRefrescarToken} [newRefrescarToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerCreate(newRefrescarToken?: NewRefrescarToken, options?: any): AxiosPromise<RefrescarToken> {
            return localVarFp.refrescarTokenControllerCreate(newRefrescarToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.refrescarTokenControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RefrescarTokenFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerFind(filter?: RefrescarTokenFilter1, options?: any): AxiosPromise<Array<RefrescarTokenWithRelations>> {
            return localVarFp.refrescarTokenControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarTokenFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerFindById(id: number, filter?: RefrescarTokenFilter, options?: any): AxiosPromise<RefrescarTokenWithRelations> {
            return localVarFp.refrescarTokenControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarToken} [refrescarToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerReplaceById(id: number, refrescarToken?: RefrescarToken, options?: any): AxiosPromise<any> {
            return localVarFp.refrescarTokenControllerReplaceById(id, refrescarToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerUpdateAll(where?: { [key: string]: object; }, refrescarTokenPartial?: RefrescarTokenPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.refrescarTokenControllerUpdateAll(where, refrescarTokenPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerUpdateById(id: number, refrescarTokenPartial?: RefrescarTokenPartial, options?: any): AxiosPromise<any> {
            return localVarFp.refrescarTokenControllerUpdateById(id, refrescarTokenPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RefrescarTokenControllerApi - object-oriented interface
 * @export
 * @class RefrescarTokenControllerApi
 * @extends {BaseAPI}
 */
export class RefrescarTokenControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewRefrescarToken} [newRefrescarToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerCreate(newRefrescarToken?: NewRefrescarToken, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerCreate(newRefrescarToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RefrescarTokenFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerFind(filter?: RefrescarTokenFilter1, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RefrescarTokenFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerFindById(id: number, filter?: RefrescarTokenFilter, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RefrescarToken} [refrescarToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerReplaceById(id: number, refrescarToken?: RefrescarToken, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerReplaceById(id, refrescarToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerUpdateAll(where?: { [key: string]: object; }, refrescarTokenPartial?: RefrescarTokenPartial, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerUpdateAll(where, refrescarTokenPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerUpdateById(id: number, refrescarTokenPartial?: RefrescarTokenPartial, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerUpdateById(id, refrescarTokenPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RolControllerApi - axios parameter creator
 * @export
 */
export const RolControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [nombre] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerBuscarIdRol: async (nombre?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/buscarIdRol`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nombre !== undefined) {
                localVarQueryParameter['nombre'] = nombre;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewRol} [newRol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerCreate: async (newRol?: NewRol, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newRol, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolControllerDeleteById', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RolFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerFind: async (filter?: RolFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RolFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerFindById: async (id: number, filter?: RolFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolControllerFindById', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Rol} [rol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerReplaceById: async (id: number, rol?: Rol, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolControllerReplaceById', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rol, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RolPartial} [rolPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerUpdateAll: async (where?: { [key: string]: object; }, rolPartial?: RolPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rolPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RolPartial} [rolPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerUpdateById: async (id: number, rolPartial?: RolPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolControllerUpdateById', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rolPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RolFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerVistaEmpresaRol: async (filter?: RolFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaEmpresaRol`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerVistaEmpresaRolCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaEmpresaRolCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolControllerApi - functional programming interface
 * @export
 */
export const RolControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RolControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [nombre] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerBuscarIdRol(nombre?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RolWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerBuscarIdRol(nombre, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewRol} [newRol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerCreate(newRol?: NewRol, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rol>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerCreate(newRol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RolFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerFind(filter?: RolFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RolWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RolFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerFindById(id: number, filter?: RolFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Rol} [rol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerReplaceById(id: number, rol?: Rol, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerReplaceById(id, rol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RolPartial} [rolPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerUpdateAll(where?: { [key: string]: object; }, rolPartial?: RolPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerUpdateAll(where, rolPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RolPartial} [rolPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerUpdateById(id: number, rolPartial?: RolPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerUpdateById(id, rolPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RolFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerVistaEmpresaRol(filter?: RolFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerVistaEmpresaRol(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerVistaEmpresaRolCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerVistaEmpresaRolCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RolControllerApi - factory interface
 * @export
 */
export const RolControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RolControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [nombre] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerBuscarIdRol(nombre?: string, options?: any): AxiosPromise<Array<RolWithRelations>> {
            return localVarFp.rolControllerBuscarIdRol(nombre, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.rolControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewRol} [newRol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerCreate(newRol?: NewRol, options?: any): AxiosPromise<Rol> {
            return localVarFp.rolControllerCreate(newRol, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.rolControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RolFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerFind(filter?: RolFilter1, options?: any): AxiosPromise<Array<RolWithRelations>> {
            return localVarFp.rolControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RolFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerFindById(id: number, filter?: RolFilter, options?: any): AxiosPromise<RolWithRelations> {
            return localVarFp.rolControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Rol} [rol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerReplaceById(id: number, rol?: Rol, options?: any): AxiosPromise<any> {
            return localVarFp.rolControllerReplaceById(id, rol, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RolPartial} [rolPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerUpdateAll(where?: { [key: string]: object; }, rolPartial?: RolPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.rolControllerUpdateAll(where, rolPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RolPartial} [rolPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerUpdateById(id: number, rolPartial?: RolPartial, options?: any): AxiosPromise<any> {
            return localVarFp.rolControllerUpdateById(id, rolPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RolFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerVistaEmpresaRol(filter?: RolFilter1, options?: any): AxiosPromise<object> {
            return localVarFp.rolControllerVistaEmpresaRol(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerVistaEmpresaRolCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<object> {
            return localVarFp.rolControllerVistaEmpresaRolCount(where, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolControllerApi - object-oriented interface
 * @export
 * @class RolControllerApi
 * @extends {BaseAPI}
 */
export class RolControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} [nombre] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerBuscarIdRol(nombre?: string, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerBuscarIdRol(nombre, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewRol} [newRol] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerCreate(newRol?: NewRol, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerCreate(newRol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RolFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerFind(filter?: RolFilter1, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RolFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerFindById(id: number, filter?: RolFilter, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Rol} [rol] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerReplaceById(id: number, rol?: Rol, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerReplaceById(id, rol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {RolPartial} [rolPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerUpdateAll(where?: { [key: string]: object; }, rolPartial?: RolPartial, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerUpdateAll(where, rolPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RolPartial} [rolPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerUpdateById(id: number, rolPartial?: RolPartial, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerUpdateById(id, rolPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RolFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerVistaEmpresaRol(filter?: RolFilter1, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerVistaEmpresaRol(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerVistaEmpresaRolCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerVistaEmpresaRolCount(where, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SeccionControllerApi - axios parameter creator
 * @export
 */
export const SeccionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/secciones/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewSeccion} [newSeccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerCreate: async (newSeccion?: NewSeccion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/secciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newSeccion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('seccionControllerDeleteById', 'id', id)
            const localVarPath = `/secciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SeccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerFind: async (filter?: SeccionFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/secciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SeccionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerFindById: async (id: number, filter?: SeccionFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('seccionControllerFindById', 'id', id)
            const localVarPath = `/secciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Seccion} [seccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerReplaceById: async (id: number, seccion?: Seccion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('seccionControllerReplaceById', 'id', id)
            const localVarPath = `/secciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seccion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SeccionPartial} [seccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerUpdateAll: async (where?: { [key: string]: object; }, seccionPartial?: SeccionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/secciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seccionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SeccionPartial} [seccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerUpdateById: async (id: number, seccionPartial?: SeccionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('seccionControllerUpdateById', 'id', id)
            const localVarPath = `/secciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seccionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SeccionControllerApi - functional programming interface
 * @export
 */
export const SeccionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SeccionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewSeccion} [newSeccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerCreate(newSeccion?: NewSeccion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Seccion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerCreate(newSeccion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SeccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerFind(filter?: SeccionFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SeccionWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {SeccionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerFindById(id: number, filter?: SeccionFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeccionWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Seccion} [seccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerReplaceById(id: number, seccion?: Seccion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerReplaceById(id, seccion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SeccionPartial} [seccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerUpdateAll(where?: { [key: string]: object; }, seccionPartial?: SeccionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerUpdateAll(where, seccionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {SeccionPartial} [seccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerUpdateById(id: number, seccionPartial?: SeccionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerUpdateById(id, seccionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SeccionControllerApi - factory interface
 * @export
 */
export const SeccionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SeccionControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.seccionControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewSeccion} [newSeccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerCreate(newSeccion?: NewSeccion, options?: any): AxiosPromise<Seccion> {
            return localVarFp.seccionControllerCreate(newSeccion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.seccionControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SeccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerFind(filter?: SeccionFilter1, options?: any): AxiosPromise<Array<SeccionWithRelations>> {
            return localVarFp.seccionControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SeccionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerFindById(id: number, filter?: SeccionFilter, options?: any): AxiosPromise<SeccionWithRelations> {
            return localVarFp.seccionControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Seccion} [seccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerReplaceById(id: number, seccion?: Seccion, options?: any): AxiosPromise<any> {
            return localVarFp.seccionControllerReplaceById(id, seccion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SeccionPartial} [seccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerUpdateAll(where?: { [key: string]: object; }, seccionPartial?: SeccionPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.seccionControllerUpdateAll(where, seccionPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SeccionPartial} [seccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerUpdateById(id: number, seccionPartial?: SeccionPartial, options?: any): AxiosPromise<any> {
            return localVarFp.seccionControllerUpdateById(id, seccionPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SeccionControllerApi - object-oriented interface
 * @export
 * @class SeccionControllerApi
 * @extends {BaseAPI}
 */
export class SeccionControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewSeccion} [newSeccion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerCreate(newSeccion?: NewSeccion, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerCreate(newSeccion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SeccionFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerFind(filter?: SeccionFilter1, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SeccionFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerFindById(id: number, filter?: SeccionFilter, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Seccion} [seccion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerReplaceById(id: number, seccion?: Seccion, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerReplaceById(id, seccion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {SeccionPartial} [seccionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerUpdateAll(where?: { [key: string]: object; }, seccionPartial?: SeccionPartial, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerUpdateAll(where, seccionPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SeccionPartial} [seccionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerUpdateById(id: number, seccionPartial?: SeccionPartial, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerUpdateById(id, seccionPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TareaControllerApi - axios parameter creator
 * @export
 */
export const TareaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tareaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tareas/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewTarea} [newTarea] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tareaControllerCreate: async (newTarea?: NewTarea, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tareas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newTarea, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tareaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tareaControllerDeleteById', 'id', id)
            const localVarPath = `/tareas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TareaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tareaControllerFind: async (filter?: TareaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tareas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TareaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tareaControllerFindById: async (id: number, filter?: TareaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tareaControllerFindById', 'id', id)
            const localVarPath = `/tareas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Tarea} [tarea] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tareaControllerReplaceById: async (id: number, tarea?: Tarea, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tareaControllerReplaceById', 'id', id)
            const localVarPath = `/tareas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tarea, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TareaPartial} [tareaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tareaControllerUpdateAll: async (where?: { [key: string]: object; }, tareaPartial?: TareaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tareas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tareaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TareaPartial} [tareaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tareaControllerUpdateById: async (id: number, tareaPartial?: TareaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tareaControllerUpdateById', 'id', id)
            const localVarPath = `/tareas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tareaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TareaControllerApi - functional programming interface
 * @export
 */
export const TareaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TareaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tareaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tareaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewTarea} [newTarea] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tareaControllerCreate(newTarea?: NewTarea, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tarea>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tareaControllerCreate(newTarea, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tareaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tareaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TareaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tareaControllerFind(filter?: TareaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TareaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tareaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TareaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tareaControllerFindById(id: number, filter?: TareaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TareaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tareaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Tarea} [tarea] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tareaControllerReplaceById(id: number, tarea?: Tarea, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tareaControllerReplaceById(id, tarea, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TareaPartial} [tareaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tareaControllerUpdateAll(where?: { [key: string]: object; }, tareaPartial?: TareaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tareaControllerUpdateAll(where, tareaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TareaPartial} [tareaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tareaControllerUpdateById(id: number, tareaPartial?: TareaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tareaControllerUpdateById(id, tareaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TareaControllerApi - factory interface
 * @export
 */
export const TareaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TareaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tareaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.tareaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewTarea} [newTarea] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tareaControllerCreate(newTarea?: NewTarea, options?: any): AxiosPromise<Tarea> {
            return localVarFp.tareaControllerCreate(newTarea, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tareaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.tareaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TareaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tareaControllerFind(filter?: TareaFilter1, options?: any): AxiosPromise<Array<TareaWithRelations>> {
            return localVarFp.tareaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TareaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tareaControllerFindById(id: number, filter?: TareaFilter, options?: any): AxiosPromise<TareaWithRelations> {
            return localVarFp.tareaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Tarea} [tarea] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tareaControllerReplaceById(id: number, tarea?: Tarea, options?: any): AxiosPromise<any> {
            return localVarFp.tareaControllerReplaceById(id, tarea, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TareaPartial} [tareaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tareaControllerUpdateAll(where?: { [key: string]: object; }, tareaPartial?: TareaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.tareaControllerUpdateAll(where, tareaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TareaPartial} [tareaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tareaControllerUpdateById(id: number, tareaPartial?: TareaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.tareaControllerUpdateById(id, tareaPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TareaControllerApi - object-oriented interface
 * @export
 * @class TareaControllerApi
 * @extends {BaseAPI}
 */
export class TareaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TareaControllerApi
     */
    public tareaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return TareaControllerApiFp(this.configuration).tareaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewTarea} [newTarea] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TareaControllerApi
     */
    public tareaControllerCreate(newTarea?: NewTarea, options?: AxiosRequestConfig) {
        return TareaControllerApiFp(this.configuration).tareaControllerCreate(newTarea, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TareaControllerApi
     */
    public tareaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return TareaControllerApiFp(this.configuration).tareaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TareaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TareaControllerApi
     */
    public tareaControllerFind(filter?: TareaFilter1, options?: AxiosRequestConfig) {
        return TareaControllerApiFp(this.configuration).tareaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TareaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TareaControllerApi
     */
    public tareaControllerFindById(id: number, filter?: TareaFilter, options?: AxiosRequestConfig) {
        return TareaControllerApiFp(this.configuration).tareaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Tarea} [tarea] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TareaControllerApi
     */
    public tareaControllerReplaceById(id: number, tarea?: Tarea, options?: AxiosRequestConfig) {
        return TareaControllerApiFp(this.configuration).tareaControllerReplaceById(id, tarea, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TareaPartial} [tareaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TareaControllerApi
     */
    public tareaControllerUpdateAll(where?: { [key: string]: object; }, tareaPartial?: TareaPartial, options?: AxiosRequestConfig) {
        return TareaControllerApiFp(this.configuration).tareaControllerUpdateAll(where, tareaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TareaPartial} [tareaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TareaControllerApi
     */
    public tareaControllerUpdateById(id: number, tareaPartial?: TareaPartial, options?: AxiosRequestConfig) {
        return TareaControllerApiFp(this.configuration).tareaControllerUpdateById(id, tareaPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TipoArchivoControllerApi - axios parameter creator
 * @export
 */
export const TipoArchivoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-archivos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewTipoArchivo} [newTipoArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerCreate: async (newTipoArchivo?: NewTipoArchivo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-archivos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newTipoArchivo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoArchivoControllerDeleteById', 'id', id)
            const localVarPath = `/tipo-archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TipoArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerFind: async (filter?: TipoArchivoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-archivos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerFindById: async (id: number, filter?: TipoArchivoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoArchivoControllerFindById', 'id', id)
            const localVarPath = `/tipo-archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivo} [tipoArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerReplaceById: async (id: number, tipoArchivo?: TipoArchivo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoArchivoControllerReplaceById', 'id', id)
            const localVarPath = `/tipo-archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tipoArchivo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TipoArchivoPartial} [tipoArchivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerUpdateAll: async (where?: { [key: string]: object; }, tipoArchivoPartial?: TipoArchivoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-archivos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tipoArchivoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivoPartial} [tipoArchivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerUpdateById: async (id: number, tipoArchivoPartial?: TipoArchivoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoArchivoControllerUpdateById', 'id', id)
            const localVarPath = `/tipo-archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tipoArchivoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TipoArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerVistaTipoArchivoEmpresaSeccion: async (filter?: TipoArchivoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaTipoArchivoEmpresaSeccion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerVistaTipoArchivoEmpresaSeccionCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaTipoArchivoEmpresaSeccionCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TipoArchivoControllerApi - functional programming interface
 * @export
 */
export const TipoArchivoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TipoArchivoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewTipoArchivo} [newTipoArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerCreate(newTipoArchivo?: NewTipoArchivo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TipoArchivo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerCreate(newTipoArchivo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TipoArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerFind(filter?: TipoArchivoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TipoArchivoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerFindById(id: number, filter?: TipoArchivoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TipoArchivoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivo} [tipoArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerReplaceById(id: number, tipoArchivo?: TipoArchivo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerReplaceById(id, tipoArchivo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TipoArchivoPartial} [tipoArchivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerUpdateAll(where?: { [key: string]: object; }, tipoArchivoPartial?: TipoArchivoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerUpdateAll(where, tipoArchivoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivoPartial} [tipoArchivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerUpdateById(id: number, tipoArchivoPartial?: TipoArchivoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerUpdateById(id, tipoArchivoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TipoArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerVistaTipoArchivoEmpresaSeccion(filter?: TipoArchivoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerVistaTipoArchivoEmpresaSeccion(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerVistaTipoArchivoEmpresaSeccionCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerVistaTipoArchivoEmpresaSeccionCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TipoArchivoControllerApi - factory interface
 * @export
 */
export const TipoArchivoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TipoArchivoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.tipoArchivoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewTipoArchivo} [newTipoArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerCreate(newTipoArchivo?: NewTipoArchivo, options?: any): AxiosPromise<TipoArchivo> {
            return localVarFp.tipoArchivoControllerCreate(newTipoArchivo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.tipoArchivoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TipoArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerFind(filter?: TipoArchivoFilter1, options?: any): AxiosPromise<Array<TipoArchivoWithRelations>> {
            return localVarFp.tipoArchivoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerFindById(id: number, filter?: TipoArchivoFilter, options?: any): AxiosPromise<TipoArchivoWithRelations> {
            return localVarFp.tipoArchivoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivo} [tipoArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerReplaceById(id: number, tipoArchivo?: TipoArchivo, options?: any): AxiosPromise<any> {
            return localVarFp.tipoArchivoControllerReplaceById(id, tipoArchivo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TipoArchivoPartial} [tipoArchivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerUpdateAll(where?: { [key: string]: object; }, tipoArchivoPartial?: TipoArchivoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.tipoArchivoControllerUpdateAll(where, tipoArchivoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivoPartial} [tipoArchivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerUpdateById(id: number, tipoArchivoPartial?: TipoArchivoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.tipoArchivoControllerUpdateById(id, tipoArchivoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TipoArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerVistaTipoArchivoEmpresaSeccion(filter?: TipoArchivoFilter1, options?: any): AxiosPromise<object> {
            return localVarFp.tipoArchivoControllerVistaTipoArchivoEmpresaSeccion(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerVistaTipoArchivoEmpresaSeccionCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<object> {
            return localVarFp.tipoArchivoControllerVistaTipoArchivoEmpresaSeccionCount(where, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TipoArchivoControllerApi - object-oriented interface
 * @export
 * @class TipoArchivoControllerApi
 * @extends {BaseAPI}
 */
export class TipoArchivoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewTipoArchivo} [newTipoArchivo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerCreate(newTipoArchivo?: NewTipoArchivo, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerCreate(newTipoArchivo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TipoArchivoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerFind(filter?: TipoArchivoFilter1, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TipoArchivoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerFindById(id: number, filter?: TipoArchivoFilter, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TipoArchivo} [tipoArchivo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerReplaceById(id: number, tipoArchivo?: TipoArchivo, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerReplaceById(id, tipoArchivo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TipoArchivoPartial} [tipoArchivoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerUpdateAll(where?: { [key: string]: object; }, tipoArchivoPartial?: TipoArchivoPartial, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerUpdateAll(where, tipoArchivoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TipoArchivoPartial} [tipoArchivoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerUpdateById(id: number, tipoArchivoPartial?: TipoArchivoPartial, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerUpdateById(id, tipoArchivoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TipoArchivoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerVistaTipoArchivoEmpresaSeccion(filter?: TipoArchivoFilter1, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerVistaTipoArchivoEmpresaSeccion(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerVistaTipoArchivoEmpresaSeccionCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerVistaTipoArchivoEmpresaSeccionCount(where, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TipoUsuarioControllerApi - axios parameter creator
 * @export
 */
export const TipoUsuarioControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-usuarios/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewTipoUsuario} [newTipoUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioControllerCreate: async (newTipoUsuario?: NewTipoUsuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newTipoUsuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoUsuarioControllerDeleteById', 'id', id)
            const localVarPath = `/tipo-usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TipoUsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioControllerFind: async (filter?: TipoUsuarioFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoUsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioControllerFindById: async (id: number, filter?: TipoUsuarioFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoUsuarioControllerFindById', 'id', id)
            const localVarPath = `/tipo-usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoUsuario} [tipoUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioControllerReplaceById: async (id: number, tipoUsuario?: TipoUsuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoUsuarioControllerReplaceById', 'id', id)
            const localVarPath = `/tipo-usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tipoUsuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TipoUsuarioPartial} [tipoUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioControllerUpdateAll: async (where?: { [key: string]: object; }, tipoUsuarioPartial?: TipoUsuarioPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tipoUsuarioPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoUsuarioPartial} [tipoUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioControllerUpdateById: async (id: number, tipoUsuarioPartial?: TipoUsuarioPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoUsuarioControllerUpdateById', 'id', id)
            const localVarPath = `/tipo-usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tipoUsuarioPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TipoUsuarioControllerApi - functional programming interface
 * @export
 */
export const TipoUsuarioControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TipoUsuarioControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoUsuarioControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoUsuarioControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewTipoUsuario} [newTipoUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoUsuarioControllerCreate(newTipoUsuario?: NewTipoUsuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TipoUsuario>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoUsuarioControllerCreate(newTipoUsuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoUsuarioControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoUsuarioControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TipoUsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoUsuarioControllerFind(filter?: TipoUsuarioFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TipoUsuarioWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoUsuarioControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoUsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoUsuarioControllerFindById(id: number, filter?: TipoUsuarioFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TipoUsuarioWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoUsuarioControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoUsuario} [tipoUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoUsuarioControllerReplaceById(id: number, tipoUsuario?: TipoUsuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoUsuarioControllerReplaceById(id, tipoUsuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TipoUsuarioPartial} [tipoUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoUsuarioControllerUpdateAll(where?: { [key: string]: object; }, tipoUsuarioPartial?: TipoUsuarioPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoUsuarioControllerUpdateAll(where, tipoUsuarioPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoUsuarioPartial} [tipoUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoUsuarioControllerUpdateById(id: number, tipoUsuarioPartial?: TipoUsuarioPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoUsuarioControllerUpdateById(id, tipoUsuarioPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TipoUsuarioControllerApi - factory interface
 * @export
 */
export const TipoUsuarioControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TipoUsuarioControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.tipoUsuarioControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewTipoUsuario} [newTipoUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioControllerCreate(newTipoUsuario?: NewTipoUsuario, options?: any): AxiosPromise<TipoUsuario> {
            return localVarFp.tipoUsuarioControllerCreate(newTipoUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.tipoUsuarioControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TipoUsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioControllerFind(filter?: TipoUsuarioFilter1, options?: any): AxiosPromise<Array<TipoUsuarioWithRelations>> {
            return localVarFp.tipoUsuarioControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoUsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioControllerFindById(id: number, filter?: TipoUsuarioFilter, options?: any): AxiosPromise<TipoUsuarioWithRelations> {
            return localVarFp.tipoUsuarioControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoUsuario} [tipoUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioControllerReplaceById(id: number, tipoUsuario?: TipoUsuario, options?: any): AxiosPromise<any> {
            return localVarFp.tipoUsuarioControllerReplaceById(id, tipoUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TipoUsuarioPartial} [tipoUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioControllerUpdateAll(where?: { [key: string]: object; }, tipoUsuarioPartial?: TipoUsuarioPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.tipoUsuarioControllerUpdateAll(where, tipoUsuarioPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoUsuarioPartial} [tipoUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioControllerUpdateById(id: number, tipoUsuarioPartial?: TipoUsuarioPartial, options?: any): AxiosPromise<any> {
            return localVarFp.tipoUsuarioControllerUpdateById(id, tipoUsuarioPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TipoUsuarioControllerApi - object-oriented interface
 * @export
 * @class TipoUsuarioControllerApi
 * @extends {BaseAPI}
 */
export class TipoUsuarioControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoUsuarioControllerApi
     */
    public tipoUsuarioControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return TipoUsuarioControllerApiFp(this.configuration).tipoUsuarioControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewTipoUsuario} [newTipoUsuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoUsuarioControllerApi
     */
    public tipoUsuarioControllerCreate(newTipoUsuario?: NewTipoUsuario, options?: AxiosRequestConfig) {
        return TipoUsuarioControllerApiFp(this.configuration).tipoUsuarioControllerCreate(newTipoUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoUsuarioControllerApi
     */
    public tipoUsuarioControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return TipoUsuarioControllerApiFp(this.configuration).tipoUsuarioControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TipoUsuarioFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoUsuarioControllerApi
     */
    public tipoUsuarioControllerFind(filter?: TipoUsuarioFilter1, options?: AxiosRequestConfig) {
        return TipoUsuarioControllerApiFp(this.configuration).tipoUsuarioControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TipoUsuarioFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoUsuarioControllerApi
     */
    public tipoUsuarioControllerFindById(id: number, filter?: TipoUsuarioFilter, options?: AxiosRequestConfig) {
        return TipoUsuarioControllerApiFp(this.configuration).tipoUsuarioControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TipoUsuario} [tipoUsuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoUsuarioControllerApi
     */
    public tipoUsuarioControllerReplaceById(id: number, tipoUsuario?: TipoUsuario, options?: AxiosRequestConfig) {
        return TipoUsuarioControllerApiFp(this.configuration).tipoUsuarioControllerReplaceById(id, tipoUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TipoUsuarioPartial} [tipoUsuarioPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoUsuarioControllerApi
     */
    public tipoUsuarioControllerUpdateAll(where?: { [key: string]: object; }, tipoUsuarioPartial?: TipoUsuarioPartial, options?: AxiosRequestConfig) {
        return TipoUsuarioControllerApiFp(this.configuration).tipoUsuarioControllerUpdateAll(where, tipoUsuarioPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TipoUsuarioPartial} [tipoUsuarioPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoUsuarioControllerApi
     */
    public tipoUsuarioControllerUpdateById(id: number, tipoUsuarioPartial?: TipoUsuarioPartial, options?: AxiosRequestConfig) {
        return TipoUsuarioControllerApiFp(this.configuration).tipoUsuarioControllerUpdateById(id, tipoUsuarioPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TipoUsuarioUsuarioControllerApi - axios parameter creator
 * @export
 */
export const TipoUsuarioUsuarioControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioUsuarioControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-usuario-usuarios/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewTipoUsuarioUsuario} [newTipoUsuarioUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioUsuarioControllerCreate: async (newTipoUsuarioUsuario?: NewTipoUsuarioUsuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-usuario-usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newTipoUsuarioUsuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioUsuarioControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoUsuarioUsuarioControllerDeleteById', 'id', id)
            const localVarPath = `/tipo-usuario-usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TipoUsuarioUsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioUsuarioControllerFind: async (filter?: TipoUsuarioUsuarioFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-usuario-usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoUsuarioUsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioUsuarioControllerFindById: async (id: number, filter?: TipoUsuarioUsuarioFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoUsuarioUsuarioControllerFindById', 'id', id)
            const localVarPath = `/tipo-usuario-usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoUsuarioUsuario} [tipoUsuarioUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioUsuarioControllerReplaceById: async (id: number, tipoUsuarioUsuario?: TipoUsuarioUsuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoUsuarioUsuarioControllerReplaceById', 'id', id)
            const localVarPath = `/tipo-usuario-usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tipoUsuarioUsuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TipoUsuarioUsuarioPartial} [tipoUsuarioUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioUsuarioControllerUpdateAll: async (where?: { [key: string]: object; }, tipoUsuarioUsuarioPartial?: TipoUsuarioUsuarioPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-usuario-usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tipoUsuarioUsuarioPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoUsuarioUsuarioPartial} [tipoUsuarioUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioUsuarioControllerUpdateById: async (id: number, tipoUsuarioUsuarioPartial?: TipoUsuarioUsuarioPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoUsuarioUsuarioControllerUpdateById', 'id', id)
            const localVarPath = `/tipo-usuario-usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tipoUsuarioUsuarioPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TipoUsuarioUsuarioControllerApi - functional programming interface
 * @export
 */
export const TipoUsuarioUsuarioControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TipoUsuarioUsuarioControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoUsuarioUsuarioControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoUsuarioUsuarioControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewTipoUsuarioUsuario} [newTipoUsuarioUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoUsuarioUsuarioControllerCreate(newTipoUsuarioUsuario?: NewTipoUsuarioUsuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TipoUsuarioUsuario>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoUsuarioUsuarioControllerCreate(newTipoUsuarioUsuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoUsuarioUsuarioControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoUsuarioUsuarioControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TipoUsuarioUsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoUsuarioUsuarioControllerFind(filter?: TipoUsuarioUsuarioFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TipoUsuarioUsuarioWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoUsuarioUsuarioControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoUsuarioUsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoUsuarioUsuarioControllerFindById(id: number, filter?: TipoUsuarioUsuarioFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TipoUsuarioUsuarioWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoUsuarioUsuarioControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoUsuarioUsuario} [tipoUsuarioUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoUsuarioUsuarioControllerReplaceById(id: number, tipoUsuarioUsuario?: TipoUsuarioUsuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoUsuarioUsuarioControllerReplaceById(id, tipoUsuarioUsuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TipoUsuarioUsuarioPartial} [tipoUsuarioUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoUsuarioUsuarioControllerUpdateAll(where?: { [key: string]: object; }, tipoUsuarioUsuarioPartial?: TipoUsuarioUsuarioPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoUsuarioUsuarioControllerUpdateAll(where, tipoUsuarioUsuarioPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoUsuarioUsuarioPartial} [tipoUsuarioUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoUsuarioUsuarioControllerUpdateById(id: number, tipoUsuarioUsuarioPartial?: TipoUsuarioUsuarioPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoUsuarioUsuarioControllerUpdateById(id, tipoUsuarioUsuarioPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TipoUsuarioUsuarioControllerApi - factory interface
 * @export
 */
export const TipoUsuarioUsuarioControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TipoUsuarioUsuarioControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioUsuarioControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.tipoUsuarioUsuarioControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewTipoUsuarioUsuario} [newTipoUsuarioUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioUsuarioControllerCreate(newTipoUsuarioUsuario?: NewTipoUsuarioUsuario, options?: any): AxiosPromise<TipoUsuarioUsuario> {
            return localVarFp.tipoUsuarioUsuarioControllerCreate(newTipoUsuarioUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioUsuarioControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.tipoUsuarioUsuarioControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TipoUsuarioUsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioUsuarioControllerFind(filter?: TipoUsuarioUsuarioFilter1, options?: any): AxiosPromise<Array<TipoUsuarioUsuarioWithRelations>> {
            return localVarFp.tipoUsuarioUsuarioControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoUsuarioUsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioUsuarioControllerFindById(id: number, filter?: TipoUsuarioUsuarioFilter, options?: any): AxiosPromise<TipoUsuarioUsuarioWithRelations> {
            return localVarFp.tipoUsuarioUsuarioControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoUsuarioUsuario} [tipoUsuarioUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioUsuarioControllerReplaceById(id: number, tipoUsuarioUsuario?: TipoUsuarioUsuario, options?: any): AxiosPromise<any> {
            return localVarFp.tipoUsuarioUsuarioControllerReplaceById(id, tipoUsuarioUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TipoUsuarioUsuarioPartial} [tipoUsuarioUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioUsuarioControllerUpdateAll(where?: { [key: string]: object; }, tipoUsuarioUsuarioPartial?: TipoUsuarioUsuarioPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.tipoUsuarioUsuarioControllerUpdateAll(where, tipoUsuarioUsuarioPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoUsuarioUsuarioPartial} [tipoUsuarioUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoUsuarioUsuarioControllerUpdateById(id: number, tipoUsuarioUsuarioPartial?: TipoUsuarioUsuarioPartial, options?: any): AxiosPromise<any> {
            return localVarFp.tipoUsuarioUsuarioControllerUpdateById(id, tipoUsuarioUsuarioPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TipoUsuarioUsuarioControllerApi - object-oriented interface
 * @export
 * @class TipoUsuarioUsuarioControllerApi
 * @extends {BaseAPI}
 */
export class TipoUsuarioUsuarioControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoUsuarioUsuarioControllerApi
     */
    public tipoUsuarioUsuarioControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return TipoUsuarioUsuarioControllerApiFp(this.configuration).tipoUsuarioUsuarioControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewTipoUsuarioUsuario} [newTipoUsuarioUsuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoUsuarioUsuarioControllerApi
     */
    public tipoUsuarioUsuarioControllerCreate(newTipoUsuarioUsuario?: NewTipoUsuarioUsuario, options?: AxiosRequestConfig) {
        return TipoUsuarioUsuarioControllerApiFp(this.configuration).tipoUsuarioUsuarioControllerCreate(newTipoUsuarioUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoUsuarioUsuarioControllerApi
     */
    public tipoUsuarioUsuarioControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return TipoUsuarioUsuarioControllerApiFp(this.configuration).tipoUsuarioUsuarioControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TipoUsuarioUsuarioFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoUsuarioUsuarioControllerApi
     */
    public tipoUsuarioUsuarioControllerFind(filter?: TipoUsuarioUsuarioFilter1, options?: AxiosRequestConfig) {
        return TipoUsuarioUsuarioControllerApiFp(this.configuration).tipoUsuarioUsuarioControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TipoUsuarioUsuarioFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoUsuarioUsuarioControllerApi
     */
    public tipoUsuarioUsuarioControllerFindById(id: number, filter?: TipoUsuarioUsuarioFilter, options?: AxiosRequestConfig) {
        return TipoUsuarioUsuarioControllerApiFp(this.configuration).tipoUsuarioUsuarioControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TipoUsuarioUsuario} [tipoUsuarioUsuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoUsuarioUsuarioControllerApi
     */
    public tipoUsuarioUsuarioControllerReplaceById(id: number, tipoUsuarioUsuario?: TipoUsuarioUsuario, options?: AxiosRequestConfig) {
        return TipoUsuarioUsuarioControllerApiFp(this.configuration).tipoUsuarioUsuarioControllerReplaceById(id, tipoUsuarioUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TipoUsuarioUsuarioPartial} [tipoUsuarioUsuarioPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoUsuarioUsuarioControllerApi
     */
    public tipoUsuarioUsuarioControllerUpdateAll(where?: { [key: string]: object; }, tipoUsuarioUsuarioPartial?: TipoUsuarioUsuarioPartial, options?: AxiosRequestConfig) {
        return TipoUsuarioUsuarioControllerApiFp(this.configuration).tipoUsuarioUsuarioControllerUpdateAll(where, tipoUsuarioUsuarioPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TipoUsuarioUsuarioPartial} [tipoUsuarioUsuarioPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoUsuarioUsuarioControllerApi
     */
    public tipoUsuarioUsuarioControllerUpdateById(id: number, tipoUsuarioUsuarioPartial?: TipoUsuarioUsuarioPartial, options?: AxiosRequestConfig) {
        return TipoUsuarioUsuarioControllerApiFp(this.configuration).tipoUsuarioUsuarioControllerUpdateById(id, tipoUsuarioUsuarioPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TraduccionContenidoControllerApi - axios parameter creator
 * @export
 */
export const TraduccionContenidoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionContenidoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traduccion-contenidos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewTraduccionContenido} [newTraduccionContenido] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionContenidoControllerCreate: async (newTraduccionContenido?: NewTraduccionContenido, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traduccion-contenidos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newTraduccionContenido, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionContenidoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionContenidoControllerDeleteById', 'id', id)
            const localVarPath = `/traduccion-contenidos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TraduccionContenidoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionContenidoControllerFind: async (filter?: TraduccionContenidoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traduccion-contenidos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionContenidoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionContenidoControllerFindById: async (id: number, filter?: TraduccionContenidoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionContenidoControllerFindById', 'id', id)
            const localVarPath = `/traduccion-contenidos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionContenido} [traduccionContenido] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionContenidoControllerReplaceById: async (id: number, traduccionContenido?: TraduccionContenido, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionContenidoControllerReplaceById', 'id', id)
            const localVarPath = `/traduccion-contenidos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traduccionContenido, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TraduccionContenidoPartial} [traduccionContenidoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionContenidoControllerUpdateAll: async (where?: { [key: string]: object; }, traduccionContenidoPartial?: TraduccionContenidoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traduccion-contenidos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traduccionContenidoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionContenidoPartial} [traduccionContenidoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionContenidoControllerUpdateById: async (id: number, traduccionContenidoPartial?: TraduccionContenidoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionContenidoControllerUpdateById', 'id', id)
            const localVarPath = `/traduccion-contenidos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traduccionContenidoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TraduccionContenidoControllerApi - functional programming interface
 * @export
 */
export const TraduccionContenidoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TraduccionContenidoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionContenidoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionContenidoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewTraduccionContenido} [newTraduccionContenido] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionContenidoControllerCreate(newTraduccionContenido?: NewTraduccionContenido, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TraduccionContenido>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionContenidoControllerCreate(newTraduccionContenido, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionContenidoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionContenidoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TraduccionContenidoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionContenidoControllerFind(filter?: TraduccionContenidoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TraduccionContenidoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionContenidoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionContenidoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionContenidoControllerFindById(id: number, filter?: TraduccionContenidoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TraduccionContenidoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionContenidoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionContenido} [traduccionContenido] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionContenidoControllerReplaceById(id: number, traduccionContenido?: TraduccionContenido, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionContenidoControllerReplaceById(id, traduccionContenido, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TraduccionContenidoPartial} [traduccionContenidoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionContenidoControllerUpdateAll(where?: { [key: string]: object; }, traduccionContenidoPartial?: TraduccionContenidoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionContenidoControllerUpdateAll(where, traduccionContenidoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionContenidoPartial} [traduccionContenidoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionContenidoControllerUpdateById(id: number, traduccionContenidoPartial?: TraduccionContenidoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionContenidoControllerUpdateById(id, traduccionContenidoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TraduccionContenidoControllerApi - factory interface
 * @export
 */
export const TraduccionContenidoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TraduccionContenidoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionContenidoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.traduccionContenidoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewTraduccionContenido} [newTraduccionContenido] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionContenidoControllerCreate(newTraduccionContenido?: NewTraduccionContenido, options?: any): AxiosPromise<TraduccionContenido> {
            return localVarFp.traduccionContenidoControllerCreate(newTraduccionContenido, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionContenidoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.traduccionContenidoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TraduccionContenidoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionContenidoControllerFind(filter?: TraduccionContenidoFilter1, options?: any): AxiosPromise<Array<TraduccionContenidoWithRelations>> {
            return localVarFp.traduccionContenidoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionContenidoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionContenidoControllerFindById(id: number, filter?: TraduccionContenidoFilter, options?: any): AxiosPromise<TraduccionContenidoWithRelations> {
            return localVarFp.traduccionContenidoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionContenido} [traduccionContenido] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionContenidoControllerReplaceById(id: number, traduccionContenido?: TraduccionContenido, options?: any): AxiosPromise<any> {
            return localVarFp.traduccionContenidoControllerReplaceById(id, traduccionContenido, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TraduccionContenidoPartial} [traduccionContenidoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionContenidoControllerUpdateAll(where?: { [key: string]: object; }, traduccionContenidoPartial?: TraduccionContenidoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.traduccionContenidoControllerUpdateAll(where, traduccionContenidoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionContenidoPartial} [traduccionContenidoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionContenidoControllerUpdateById(id: number, traduccionContenidoPartial?: TraduccionContenidoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.traduccionContenidoControllerUpdateById(id, traduccionContenidoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TraduccionContenidoControllerApi - object-oriented interface
 * @export
 * @class TraduccionContenidoControllerApi
 * @extends {BaseAPI}
 */
export class TraduccionContenidoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionContenidoControllerApi
     */
    public traduccionContenidoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return TraduccionContenidoControllerApiFp(this.configuration).traduccionContenidoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewTraduccionContenido} [newTraduccionContenido] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionContenidoControllerApi
     */
    public traduccionContenidoControllerCreate(newTraduccionContenido?: NewTraduccionContenido, options?: AxiosRequestConfig) {
        return TraduccionContenidoControllerApiFp(this.configuration).traduccionContenidoControllerCreate(newTraduccionContenido, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionContenidoControllerApi
     */
    public traduccionContenidoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return TraduccionContenidoControllerApiFp(this.configuration).traduccionContenidoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TraduccionContenidoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionContenidoControllerApi
     */
    public traduccionContenidoControllerFind(filter?: TraduccionContenidoFilter1, options?: AxiosRequestConfig) {
        return TraduccionContenidoControllerApiFp(this.configuration).traduccionContenidoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TraduccionContenidoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionContenidoControllerApi
     */
    public traduccionContenidoControllerFindById(id: number, filter?: TraduccionContenidoFilter, options?: AxiosRequestConfig) {
        return TraduccionContenidoControllerApiFp(this.configuration).traduccionContenidoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TraduccionContenido} [traduccionContenido] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionContenidoControllerApi
     */
    public traduccionContenidoControllerReplaceById(id: number, traduccionContenido?: TraduccionContenido, options?: AxiosRequestConfig) {
        return TraduccionContenidoControllerApiFp(this.configuration).traduccionContenidoControllerReplaceById(id, traduccionContenido, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TraduccionContenidoPartial} [traduccionContenidoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionContenidoControllerApi
     */
    public traduccionContenidoControllerUpdateAll(where?: { [key: string]: object; }, traduccionContenidoPartial?: TraduccionContenidoPartial, options?: AxiosRequestConfig) {
        return TraduccionContenidoControllerApiFp(this.configuration).traduccionContenidoControllerUpdateAll(where, traduccionContenidoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TraduccionContenidoPartial} [traduccionContenidoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionContenidoControllerApi
     */
    public traduccionContenidoControllerUpdateById(id: number, traduccionContenidoPartial?: TraduccionContenidoPartial, options?: AxiosRequestConfig) {
        return TraduccionContenidoControllerApiFp(this.configuration).traduccionContenidoControllerUpdateById(id, traduccionContenidoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TraduccionControllerApi - axios parameter creator
 * @export
 */
export const TraduccionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [iso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerBuscarTraduccion: async (iso?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/buscarTraduccion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (iso !== undefined) {
                localVarQueryParameter['iso'] = iso;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traducciones/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewTraduccion} [newTraduccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerCreate: async (newTraduccion?: NewTraduccion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traducciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newTraduccion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionControllerDeleteById', 'id', id)
            const localVarPath = `/traducciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TraduccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerFind: async (filter?: TraduccionFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traducciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerFindById: async (id: number, filter?: TraduccionFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionControllerFindById', 'id', id)
            const localVarPath = `/traducciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Traduccion} [traduccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerReplaceById: async (id: number, traduccion?: Traduccion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionControllerReplaceById', 'id', id)
            const localVarPath = `/traducciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traduccion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TraduccionPartial} [traduccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerUpdateAll: async (where?: { [key: string]: object; }, traduccionPartial?: TraduccionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traducciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traduccionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionPartial} [traduccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerUpdateById: async (id: number, traduccionPartial?: TraduccionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionControllerUpdateById', 'id', id)
            const localVarPath = `/traducciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traduccionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TraduccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerVistaTraduccionIdioma: async (filter?: TraduccionFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaTraduccionIdioma`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerVistaTraduccionIdiomaCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaTraduccionIdiomaCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TraduccionControllerApi - functional programming interface
 * @export
 */
export const TraduccionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TraduccionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [iso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerBuscarTraduccion(iso?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerBuscarTraduccion(iso, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewTraduccion} [newTraduccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerCreate(newTraduccion?: NewTraduccion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Traduccion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerCreate(newTraduccion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TraduccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerFind(filter?: TraduccionFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TraduccionWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerFindById(id: number, filter?: TraduccionFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TraduccionWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Traduccion} [traduccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerReplaceById(id: number, traduccion?: Traduccion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerReplaceById(id, traduccion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TraduccionPartial} [traduccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerUpdateAll(where?: { [key: string]: object; }, traduccionPartial?: TraduccionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerUpdateAll(where, traduccionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionPartial} [traduccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerUpdateById(id: number, traduccionPartial?: TraduccionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerUpdateById(id, traduccionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TraduccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerVistaTraduccionIdioma(filter?: TraduccionFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerVistaTraduccionIdioma(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerVistaTraduccionIdiomaCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerVistaTraduccionIdiomaCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TraduccionControllerApi - factory interface
 * @export
 */
export const TraduccionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TraduccionControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [iso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerBuscarTraduccion(iso?: string, options?: any): AxiosPromise<object> {
            return localVarFp.traduccionControllerBuscarTraduccion(iso, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.traduccionControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewTraduccion} [newTraduccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerCreate(newTraduccion?: NewTraduccion, options?: any): AxiosPromise<Traduccion> {
            return localVarFp.traduccionControllerCreate(newTraduccion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.traduccionControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TraduccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerFind(filter?: TraduccionFilter1, options?: any): AxiosPromise<Array<TraduccionWithRelations>> {
            return localVarFp.traduccionControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerFindById(id: number, filter?: TraduccionFilter, options?: any): AxiosPromise<TraduccionWithRelations> {
            return localVarFp.traduccionControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Traduccion} [traduccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerReplaceById(id: number, traduccion?: Traduccion, options?: any): AxiosPromise<any> {
            return localVarFp.traduccionControllerReplaceById(id, traduccion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TraduccionPartial} [traduccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerUpdateAll(where?: { [key: string]: object; }, traduccionPartial?: TraduccionPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.traduccionControllerUpdateAll(where, traduccionPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionPartial} [traduccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerUpdateById(id: number, traduccionPartial?: TraduccionPartial, options?: any): AxiosPromise<any> {
            return localVarFp.traduccionControllerUpdateById(id, traduccionPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TraduccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerVistaTraduccionIdioma(filter?: TraduccionFilter1, options?: any): AxiosPromise<object> {
            return localVarFp.traduccionControllerVistaTraduccionIdioma(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerVistaTraduccionIdiomaCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<object> {
            return localVarFp.traduccionControllerVistaTraduccionIdiomaCount(where, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TraduccionControllerApi - object-oriented interface
 * @export
 * @class TraduccionControllerApi
 * @extends {BaseAPI}
 */
export class TraduccionControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} [iso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerBuscarTraduccion(iso?: string, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerBuscarTraduccion(iso, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewTraduccion} [newTraduccion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerCreate(newTraduccion?: NewTraduccion, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerCreate(newTraduccion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TraduccionFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerFind(filter?: TraduccionFilter1, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TraduccionFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerFindById(id: number, filter?: TraduccionFilter, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Traduccion} [traduccion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerReplaceById(id: number, traduccion?: Traduccion, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerReplaceById(id, traduccion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TraduccionPartial} [traduccionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerUpdateAll(where?: { [key: string]: object; }, traduccionPartial?: TraduccionPartial, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerUpdateAll(where, traduccionPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TraduccionPartial} [traduccionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerUpdateById(id: number, traduccionPartial?: TraduccionPartial, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerUpdateById(id, traduccionPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TraduccionFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerVistaTraduccionIdioma(filter?: TraduccionFilter1, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerVistaTraduccionIdioma(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerVistaTraduccionIdiomaCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerVistaTraduccionIdiomaCount(where, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TraduccionLiteralControllerApi - axios parameter creator
 * @export
 */
export const TraduccionLiteralControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionLiteralControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traduccion-literals/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewTraduccionLiteral} [newTraduccionLiteral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionLiteralControllerCreate: async (newTraduccionLiteral?: NewTraduccionLiteral, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traduccion-literals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newTraduccionLiteral, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionLiteralControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionLiteralControllerDeleteById', 'id', id)
            const localVarPath = `/traduccion-literals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TraduccionLiteralFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionLiteralControllerFind: async (filter?: TraduccionLiteralFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traduccion-literals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionLiteralFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionLiteralControllerFindById: async (id: number, filter?: TraduccionLiteralFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionLiteralControllerFindById', 'id', id)
            const localVarPath = `/traduccion-literals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionLiteral} [traduccionLiteral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionLiteralControllerReplaceById: async (id: number, traduccionLiteral?: TraduccionLiteral, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionLiteralControllerReplaceById', 'id', id)
            const localVarPath = `/traduccion-literals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traduccionLiteral, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TraduccionLiteralPartial} [traduccionLiteralPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionLiteralControllerUpdateAll: async (where?: { [key: string]: object; }, traduccionLiteralPartial?: TraduccionLiteralPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traduccion-literals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traduccionLiteralPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionLiteralPartial} [traduccionLiteralPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionLiteralControllerUpdateById: async (id: number, traduccionLiteralPartial?: TraduccionLiteralPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionLiteralControllerUpdateById', 'id', id)
            const localVarPath = `/traduccion-literals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traduccionLiteralPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TraduccionLiteralControllerApi - functional programming interface
 * @export
 */
export const TraduccionLiteralControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TraduccionLiteralControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionLiteralControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionLiteralControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewTraduccionLiteral} [newTraduccionLiteral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionLiteralControllerCreate(newTraduccionLiteral?: NewTraduccionLiteral, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TraduccionLiteral>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionLiteralControllerCreate(newTraduccionLiteral, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionLiteralControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionLiteralControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TraduccionLiteralFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionLiteralControllerFind(filter?: TraduccionLiteralFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TraduccionLiteralWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionLiteralControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionLiteralFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionLiteralControllerFindById(id: number, filter?: TraduccionLiteralFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TraduccionLiteralWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionLiteralControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionLiteral} [traduccionLiteral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionLiteralControllerReplaceById(id: number, traduccionLiteral?: TraduccionLiteral, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionLiteralControllerReplaceById(id, traduccionLiteral, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TraduccionLiteralPartial} [traduccionLiteralPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionLiteralControllerUpdateAll(where?: { [key: string]: object; }, traduccionLiteralPartial?: TraduccionLiteralPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionLiteralControllerUpdateAll(where, traduccionLiteralPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionLiteralPartial} [traduccionLiteralPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionLiteralControllerUpdateById(id: number, traduccionLiteralPartial?: TraduccionLiteralPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionLiteralControllerUpdateById(id, traduccionLiteralPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TraduccionLiteralControllerApi - factory interface
 * @export
 */
export const TraduccionLiteralControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TraduccionLiteralControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionLiteralControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.traduccionLiteralControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewTraduccionLiteral} [newTraduccionLiteral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionLiteralControllerCreate(newTraduccionLiteral?: NewTraduccionLiteral, options?: any): AxiosPromise<TraduccionLiteral> {
            return localVarFp.traduccionLiteralControllerCreate(newTraduccionLiteral, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionLiteralControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.traduccionLiteralControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TraduccionLiteralFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionLiteralControllerFind(filter?: TraduccionLiteralFilter1, options?: any): AxiosPromise<Array<TraduccionLiteralWithRelations>> {
            return localVarFp.traduccionLiteralControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionLiteralFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionLiteralControllerFindById(id: number, filter?: TraduccionLiteralFilter, options?: any): AxiosPromise<TraduccionLiteralWithRelations> {
            return localVarFp.traduccionLiteralControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionLiteral} [traduccionLiteral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionLiteralControllerReplaceById(id: number, traduccionLiteral?: TraduccionLiteral, options?: any): AxiosPromise<any> {
            return localVarFp.traduccionLiteralControllerReplaceById(id, traduccionLiteral, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TraduccionLiteralPartial} [traduccionLiteralPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionLiteralControllerUpdateAll(where?: { [key: string]: object; }, traduccionLiteralPartial?: TraduccionLiteralPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.traduccionLiteralControllerUpdateAll(where, traduccionLiteralPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionLiteralPartial} [traduccionLiteralPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionLiteralControllerUpdateById(id: number, traduccionLiteralPartial?: TraduccionLiteralPartial, options?: any): AxiosPromise<any> {
            return localVarFp.traduccionLiteralControllerUpdateById(id, traduccionLiteralPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TraduccionLiteralControllerApi - object-oriented interface
 * @export
 * @class TraduccionLiteralControllerApi
 * @extends {BaseAPI}
 */
export class TraduccionLiteralControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionLiteralControllerApi
     */
    public traduccionLiteralControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return TraduccionLiteralControllerApiFp(this.configuration).traduccionLiteralControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewTraduccionLiteral} [newTraduccionLiteral] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionLiteralControllerApi
     */
    public traduccionLiteralControllerCreate(newTraduccionLiteral?: NewTraduccionLiteral, options?: AxiosRequestConfig) {
        return TraduccionLiteralControllerApiFp(this.configuration).traduccionLiteralControllerCreate(newTraduccionLiteral, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionLiteralControllerApi
     */
    public traduccionLiteralControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return TraduccionLiteralControllerApiFp(this.configuration).traduccionLiteralControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TraduccionLiteralFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionLiteralControllerApi
     */
    public traduccionLiteralControllerFind(filter?: TraduccionLiteralFilter1, options?: AxiosRequestConfig) {
        return TraduccionLiteralControllerApiFp(this.configuration).traduccionLiteralControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TraduccionLiteralFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionLiteralControllerApi
     */
    public traduccionLiteralControllerFindById(id: number, filter?: TraduccionLiteralFilter, options?: AxiosRequestConfig) {
        return TraduccionLiteralControllerApiFp(this.configuration).traduccionLiteralControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TraduccionLiteral} [traduccionLiteral] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionLiteralControllerApi
     */
    public traduccionLiteralControllerReplaceById(id: number, traduccionLiteral?: TraduccionLiteral, options?: AxiosRequestConfig) {
        return TraduccionLiteralControllerApiFp(this.configuration).traduccionLiteralControllerReplaceById(id, traduccionLiteral, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TraduccionLiteralPartial} [traduccionLiteralPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionLiteralControllerApi
     */
    public traduccionLiteralControllerUpdateAll(where?: { [key: string]: object; }, traduccionLiteralPartial?: TraduccionLiteralPartial, options?: AxiosRequestConfig) {
        return TraduccionLiteralControllerApiFp(this.configuration).traduccionLiteralControllerUpdateAll(where, traduccionLiteralPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TraduccionLiteralPartial} [traduccionLiteralPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionLiteralControllerApi
     */
    public traduccionLiteralControllerUpdateById(id: number, traduccionLiteralPartial?: TraduccionLiteralPartial, options?: AxiosRequestConfig) {
        return TraduccionLiteralControllerApiFp(this.configuration).traduccionLiteralControllerUpdateById(id, traduccionLiteralPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsuarioCredencialesControllerApi - axios parameter creator
 * @export
 */
export const UsuarioCredencialesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-credenciales/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewUsuarioCredenciales} [newUsuarioCredenciales] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerCreate: async (newUsuarioCredenciales?: NewUsuarioCredenciales, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-credenciales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newUsuarioCredenciales, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioCredencialesControllerDeleteById', 'id', id)
            const localVarPath = `/usuario-credenciales/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UsuarioCredencialesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerFind: async (filter?: UsuarioCredencialesFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-credenciales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredencialesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerFindById: async (id: number, filter?: UsuarioCredencialesFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioCredencialesControllerFindById', 'id', id)
            const localVarPath = `/usuario-credenciales/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredenciales} [usuarioCredenciales] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerReplaceById: async (id: number, usuarioCredenciales?: UsuarioCredenciales, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioCredencialesControllerReplaceById', 'id', id)
            const localVarPath = `/usuario-credenciales/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioCredenciales, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerUpdateAll: async (where?: { [key: string]: object; }, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-credenciales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioCredencialesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerUpdateById: async (id: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioCredencialesControllerUpdateById', 'id', id)
            const localVarPath = `/usuario-credenciales/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioCredencialesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsuarioCredencialesControllerApi - functional programming interface
 * @export
 */
export const UsuarioCredencialesControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsuarioCredencialesControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewUsuarioCredenciales} [newUsuarioCredenciales] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerCreate(newUsuarioCredenciales?: NewUsuarioCredenciales, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuarioCredenciales>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerCreate(newUsuarioCredenciales, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UsuarioCredencialesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerFind(filter?: UsuarioCredencialesFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsuarioCredencialesWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredencialesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerFindById(id: number, filter?: UsuarioCredencialesFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuarioCredencialesWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredenciales} [usuarioCredenciales] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerReplaceById(id: number, usuarioCredenciales?: UsuarioCredenciales, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerReplaceById(id, usuarioCredenciales, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerUpdateAll(where?: { [key: string]: object; }, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerUpdateAll(where, usuarioCredencialesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerUpdateById(id: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerUpdateById(id, usuarioCredencialesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsuarioCredencialesControllerApi - factory interface
 * @export
 */
export const UsuarioCredencialesControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsuarioCredencialesControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuarioCredencialesControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewUsuarioCredenciales} [newUsuarioCredenciales] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerCreate(newUsuarioCredenciales?: NewUsuarioCredenciales, options?: any): AxiosPromise<UsuarioCredenciales> {
            return localVarFp.usuarioCredencialesControllerCreate(newUsuarioCredenciales, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioCredencialesControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsuarioCredencialesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerFind(filter?: UsuarioCredencialesFilter1, options?: any): AxiosPromise<Array<UsuarioCredencialesWithRelations>> {
            return localVarFp.usuarioCredencialesControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredencialesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerFindById(id: number, filter?: UsuarioCredencialesFilter, options?: any): AxiosPromise<UsuarioCredencialesWithRelations> {
            return localVarFp.usuarioCredencialesControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredenciales} [usuarioCredenciales] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerReplaceById(id: number, usuarioCredenciales?: UsuarioCredenciales, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioCredencialesControllerReplaceById(id, usuarioCredenciales, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerUpdateAll(where?: { [key: string]: object; }, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuarioCredencialesControllerUpdateAll(where, usuarioCredencialesPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerUpdateById(id: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioCredencialesControllerUpdateById(id, usuarioCredencialesPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsuarioCredencialesControllerApi - object-oriented interface
 * @export
 * @class UsuarioCredencialesControllerApi
 * @extends {BaseAPI}
 */
export class UsuarioCredencialesControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewUsuarioCredenciales} [newUsuarioCredenciales] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerCreate(newUsuarioCredenciales?: NewUsuarioCredenciales, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerCreate(newUsuarioCredenciales, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsuarioCredencialesFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerFind(filter?: UsuarioCredencialesFilter1, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioCredencialesFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerFindById(id: number, filter?: UsuarioCredencialesFilter, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioCredenciales} [usuarioCredenciales] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerReplaceById(id: number, usuarioCredenciales?: UsuarioCredenciales, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerReplaceById(id, usuarioCredenciales, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerUpdateAll(where?: { [key: string]: object; }, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerUpdateAll(where, usuarioCredencialesPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerUpdateById(id: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerUpdateById(id, usuarioCredencialesPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsuarioPasswordHistoricoControllerApi - axios parameter creator
 * @export
 */
export const UsuarioPasswordHistoricoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-password-historicos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewUsuarioPasswordHistorico} [newUsuarioPasswordHistorico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerCreate: async (newUsuarioPasswordHistorico?: NewUsuarioPasswordHistorico, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-password-historicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newUsuarioPasswordHistorico, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioPasswordHistoricoControllerDeleteById', 'id', id)
            const localVarPath = `/usuario-password-historicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UsuarioPasswordHistoricoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerFind: async (filter?: UsuarioPasswordHistoricoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-password-historicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistoricoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerFindById: async (id: number, filter?: UsuarioPasswordHistoricoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioPasswordHistoricoControllerFindById', 'id', id)
            const localVarPath = `/usuario-password-historicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistorico} [usuarioPasswordHistorico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerReplaceById: async (id: number, usuarioPasswordHistorico?: UsuarioPasswordHistorico, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioPasswordHistoricoControllerReplaceById', 'id', id)
            const localVarPath = `/usuario-password-historicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioPasswordHistorico, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerUpdateAll: async (where?: { [key: string]: object; }, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-password-historicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioPasswordHistoricoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerUpdateById: async (id: number, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioPasswordHistoricoControllerUpdateById', 'id', id)
            const localVarPath = `/usuario-password-historicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioPasswordHistoricoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsuarioPasswordHistoricoControllerApi - functional programming interface
 * @export
 */
export const UsuarioPasswordHistoricoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsuarioPasswordHistoricoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewUsuarioPasswordHistorico} [newUsuarioPasswordHistorico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerCreate(newUsuarioPasswordHistorico?: NewUsuarioPasswordHistorico, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuarioPasswordHistorico>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerCreate(newUsuarioPasswordHistorico, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UsuarioPasswordHistoricoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerFind(filter?: UsuarioPasswordHistoricoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsuarioPasswordHistoricoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistoricoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerFindById(id: number, filter?: UsuarioPasswordHistoricoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuarioPasswordHistoricoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistorico} [usuarioPasswordHistorico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerReplaceById(id: number, usuarioPasswordHistorico?: UsuarioPasswordHistorico, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerReplaceById(id, usuarioPasswordHistorico, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerUpdateAll(where?: { [key: string]: object; }, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerUpdateAll(where, usuarioPasswordHistoricoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerUpdateById(id: number, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerUpdateById(id, usuarioPasswordHistoricoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsuarioPasswordHistoricoControllerApi - factory interface
 * @export
 */
export const UsuarioPasswordHistoricoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsuarioPasswordHistoricoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuarioPasswordHistoricoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewUsuarioPasswordHistorico} [newUsuarioPasswordHistorico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerCreate(newUsuarioPasswordHistorico?: NewUsuarioPasswordHistorico, options?: any): AxiosPromise<UsuarioPasswordHistorico> {
            return localVarFp.usuarioPasswordHistoricoControllerCreate(newUsuarioPasswordHistorico, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioPasswordHistoricoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsuarioPasswordHistoricoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerFind(filter?: UsuarioPasswordHistoricoFilter1, options?: any): AxiosPromise<Array<UsuarioPasswordHistoricoWithRelations>> {
            return localVarFp.usuarioPasswordHistoricoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistoricoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerFindById(id: number, filter?: UsuarioPasswordHistoricoFilter, options?: any): AxiosPromise<UsuarioPasswordHistoricoWithRelations> {
            return localVarFp.usuarioPasswordHistoricoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistorico} [usuarioPasswordHistorico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerReplaceById(id: number, usuarioPasswordHistorico?: UsuarioPasswordHistorico, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioPasswordHistoricoControllerReplaceById(id, usuarioPasswordHistorico, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerUpdateAll(where?: { [key: string]: object; }, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuarioPasswordHistoricoControllerUpdateAll(where, usuarioPasswordHistoricoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerUpdateById(id: number, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioPasswordHistoricoControllerUpdateById(id, usuarioPasswordHistoricoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsuarioPasswordHistoricoControllerApi - object-oriented interface
 * @export
 * @class UsuarioPasswordHistoricoControllerApi
 * @extends {BaseAPI}
 */
export class UsuarioPasswordHistoricoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewUsuarioPasswordHistorico} [newUsuarioPasswordHistorico] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerCreate(newUsuarioPasswordHistorico?: NewUsuarioPasswordHistorico, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerCreate(newUsuarioPasswordHistorico, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsuarioPasswordHistoricoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerFind(filter?: UsuarioPasswordHistoricoFilter1, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioPasswordHistoricoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerFindById(id: number, filter?: UsuarioPasswordHistoricoFilter, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioPasswordHistorico} [usuarioPasswordHistorico] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerReplaceById(id: number, usuarioPasswordHistorico?: UsuarioPasswordHistorico, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerReplaceById(id, usuarioPasswordHistorico, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerUpdateAll(where?: { [key: string]: object; }, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerUpdateAll(where, usuarioPasswordHistoricoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerUpdateById(id: number, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerUpdateById(id, usuarioPasswordHistoricoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsuariosControllerApi - axios parameter creator
 * @export
 */
export const UsuariosControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewUsuario} [newUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerCreate: async (newUsuario?: NewUsuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newUsuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerDeleteById', 'id', id)
            const localVarPath = `/usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerFind: async (filter?: UsuarioFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerFindById: async (id: number, filter?: UsuarioFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerFindById', 'id', id)
            const localVarPath = `/usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject5} inlineObject5 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerLogin: async (inlineObject5: InlineObject5, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject5' is not null or undefined
            assertParamExists('usuariosControllerLogin', 'inlineObject5', inlineObject5)
            const localVarPath = `/usuarios/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject5, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerObtenerUsuarioAvatar: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerObtenerUsuarioAvatar', 'id', id)
            const localVarPath = `/obtenerUsuarioAvatar/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject6} inlineObject6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerRecuperarPassword: async (inlineObject6: InlineObject6, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject6' is not null or undefined
            assertParamExists('usuariosControllerRecuperarPassword', 'inlineObject6', inlineObject6)
            const localVarPath = `/usuarios/recuperarPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject6, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject7} [inlineObject7] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerRegister: async (inlineObject7?: InlineObject7, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject7, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Usuario} [usuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerReplaceById: async (id: number, usuario?: Usuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerReplaceById', 'id', id)
            const localVarPath = `/usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioPartial} [usuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateAll: async (where?: { [key: string]: object; }, usuarioPartial?: UsuarioPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPartial} [usuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateById: async (id: number, usuarioPartial?: UsuarioPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerUpdateById', 'id', id)
            const localVarPath = `/usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} idUsuario 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateByIdCredenciales: async (idUsuario: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idUsuario' is not null or undefined
            assertParamExists('usuariosControllerUpdateByIdCredenciales', 'idUsuario', idUsuario)
            const localVarPath = `/usuarioCredenciales/{idUsuario}`
                .replace(`{${"idUsuario"}}`, encodeURIComponent(String(idUsuario)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioCredencialesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} codigoRecuperacion 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerValidarCodigoRecuperacion: async (codigoRecuperacion: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'codigoRecuperacion' is not null or undefined
            assertParamExists('usuariosControllerValidarCodigoRecuperacion', 'codigoRecuperacion', codigoRecuperacion)
            const localVarPath = `/usuarios/validarCodigoRecuperacion/{codigoRecuperacion}`
                .replace(`{${"codigoRecuperacion"}}`, encodeURIComponent(String(codigoRecuperacion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerVistaEmpresaRolUsuario: async (filter?: UsuarioFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaEmpresaRolUsuario`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerVistaEmpresaRolUsuarioCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaEmpresaRolUsuarioCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsuariosControllerApi - functional programming interface
 * @export
 */
export const UsuariosControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsuariosControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewUsuario} [newUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerCreate(newUsuario?: NewUsuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Usuario>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerCreate(newUsuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerFind(filter?: UsuarioFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsuarioWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerFindById(id: number, filter?: UsuarioFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuarioWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject5} inlineObject5 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerLogin(inlineObject5: InlineObject5, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerLogin(inlineObject5, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerObtenerUsuarioAvatar(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerObtenerUsuarioAvatar(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject6} inlineObject6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerRecuperarPassword(inlineObject6: InlineObject6, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerRecuperarPassword(inlineObject6, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject7} [inlineObject7] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerRegister(inlineObject7?: InlineObject7, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerRegister(inlineObject7, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Usuario} [usuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerReplaceById(id: number, usuario?: Usuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerReplaceById(id, usuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioPartial} [usuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerUpdateAll(where?: { [key: string]: object; }, usuarioPartial?: UsuarioPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerUpdateAll(where, usuarioPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPartial} [usuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerUpdateById(id: number, usuarioPartial?: UsuarioPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerUpdateById(id, usuarioPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} idUsuario 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerUpdateByIdCredenciales(idUsuario: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerUpdateByIdCredenciales(idUsuario, usuarioCredencialesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} codigoRecuperacion 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerValidarCodigoRecuperacion(codigoRecuperacion: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerValidarCodigoRecuperacion(codigoRecuperacion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerVistaEmpresaRolUsuario(filter?: UsuarioFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerVistaEmpresaRolUsuario(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerVistaEmpresaRolUsuarioCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerVistaEmpresaRolUsuarioCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsuariosControllerApi - factory interface
 * @export
 */
export const UsuariosControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsuariosControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuariosControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewUsuario} [newUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerCreate(newUsuario?: NewUsuario, options?: any): AxiosPromise<Usuario> {
            return localVarFp.usuariosControllerCreate(newUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.usuariosControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerFind(filter?: UsuarioFilter1, options?: any): AxiosPromise<Array<UsuarioWithRelations>> {
            return localVarFp.usuariosControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerFindById(id: number, filter?: UsuarioFilter, options?: any): AxiosPromise<UsuarioWithRelations> {
            return localVarFp.usuariosControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject5} inlineObject5 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerLogin(inlineObject5: InlineObject5, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.usuariosControllerLogin(inlineObject5, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerObtenerUsuarioAvatar(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.usuariosControllerObtenerUsuarioAvatar(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject6} inlineObject6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerRecuperarPassword(inlineObject6: InlineObject6, options?: any): AxiosPromise<void> {
            return localVarFp.usuariosControllerRecuperarPassword(inlineObject6, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject7} [inlineObject7] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerRegister(inlineObject7?: InlineObject7, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.usuariosControllerRegister(inlineObject7, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Usuario} [usuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerReplaceById(id: number, usuario?: Usuario, options?: any): AxiosPromise<any> {
            return localVarFp.usuariosControllerReplaceById(id, usuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioPartial} [usuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateAll(where?: { [key: string]: object; }, usuarioPartial?: UsuarioPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuariosControllerUpdateAll(where, usuarioPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPartial} [usuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateById(id: number, usuarioPartial?: UsuarioPartial, options?: any): AxiosPromise<any> {
            return localVarFp.usuariosControllerUpdateById(id, usuarioPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} idUsuario 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateByIdCredenciales(idUsuario: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: any): AxiosPromise<any> {
            return localVarFp.usuariosControllerUpdateByIdCredenciales(idUsuario, usuarioCredencialesPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} codigoRecuperacion 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerValidarCodigoRecuperacion(codigoRecuperacion: number, options?: any): AxiosPromise<number> {
            return localVarFp.usuariosControllerValidarCodigoRecuperacion(codigoRecuperacion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerVistaEmpresaRolUsuario(filter?: UsuarioFilter1, options?: any): AxiosPromise<object> {
            return localVarFp.usuariosControllerVistaEmpresaRolUsuario(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerVistaEmpresaRolUsuarioCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<object> {
            return localVarFp.usuariosControllerVistaEmpresaRolUsuarioCount(where, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsuariosControllerApi - object-oriented interface
 * @export
 * @class UsuariosControllerApi
 * @extends {BaseAPI}
 */
export class UsuariosControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewUsuario} [newUsuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerCreate(newUsuario?: NewUsuario, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerCreate(newUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsuarioFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerFind(filter?: UsuarioFilter1, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerFindById(id: number, filter?: UsuarioFilter, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject5} inlineObject5 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerLogin(inlineObject5: InlineObject5, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerLogin(inlineObject5, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerObtenerUsuarioAvatar(id: number, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerObtenerUsuarioAvatar(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject6} inlineObject6 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerRecuperarPassword(inlineObject6: InlineObject6, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerRecuperarPassword(inlineObject6, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject7} [inlineObject7] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerRegister(inlineObject7?: InlineObject7, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerRegister(inlineObject7, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Usuario} [usuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerReplaceById(id: number, usuario?: Usuario, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerReplaceById(id, usuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {UsuarioPartial} [usuarioPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerUpdateAll(where?: { [key: string]: object; }, usuarioPartial?: UsuarioPartial, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerUpdateAll(where, usuarioPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioPartial} [usuarioPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerUpdateById(id: number, usuarioPartial?: UsuarioPartial, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerUpdateById(id, usuarioPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} idUsuario 
     * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerUpdateByIdCredenciales(idUsuario: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerUpdateByIdCredenciales(idUsuario, usuarioCredencialesPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} codigoRecuperacion 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerValidarCodigoRecuperacion(codigoRecuperacion: number, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerValidarCodigoRecuperacion(codigoRecuperacion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsuarioFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerVistaEmpresaRolUsuario(filter?: UsuarioFilter1, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerVistaEmpresaRolUsuario(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerVistaEmpresaRolUsuarioCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerVistaEmpresaRolUsuarioCount(where, options).then((request) => request(this.axios, this.basePath));
    }
}


